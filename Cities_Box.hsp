/*--------------------------------------------------------------------------------------------------

										Cities Box Ver.1.3.0
									 	  (2018.03 Recode)

									  (C) YotioSoft 2017-2018

--------------------------------------------------------------------------------------------------*/

/*---------------------------------------起動準備-------------------------------------------------*/
*startup	
	directory = dirinfo(0)
	
	/*------------------------------------packopt登録---------------------------------------------*/
	#packopt name "Cities_Box"
	#packopt icon "img/logo.ico"

	/*------------------------------------uselib登録----------------------------------------------*/
	#uselib "user32.dll"
		#func FindWindow "FindWindowA" str, int
		#func GetWindowRect "GetWindowRect" int, int
		#func DrawText "DrawTextW" int,wstr,int,int,int
	
		#func ClientToScreen "ClientToScreen" int, int
	
		#func GetWindowLong "GetWindowLongA" int,int
		#func SetWindowLong "SetWindowLongA" int,int,int
	
		#define WM_SIZE	0x00005	//ウィンドウサイズ変更
		#define WS_MAXIMIZEBOX	0x10000	//最大化ボタン
		#define WS_THICKFRAME	0x40000	//サイズ変更可能
	
		#func SetTimer  "SetTimer"  int,int,int,int
		#func KillTimer "KillTimer" int,int
		#define WM_TIMER    0x0113
		#define TIMER_ID    1    ; タイマーID

	/*----------------------------------------include---------------------------------------------*/
	#include "hspinet.as"
	#include "hspext.as"

	/*----------------------------------------define登録------------------------------------------*/
	; チップサイズの指定
	#define CHIP_SIZE				64

	; アドオン用バッファIDの最小値
	#define BEGIN_ADDON_BUFFER_ID	100

	; アドオン以外の画像のバッファ総数
	#define BUFFER_IMAGES_TOTAL		81

	; Pacriman : おばけの数
	#define TOTAL_GHOSTS			60

	; マップサイズ
	#define MAPSIZE_X				100
	#define MAPSIZE_Y				100
	#define MAPSIZE_Z				1

	/*---------------------------------------module登録-------------------------------------------*/
	#include "module.hsp"

	/*---------------------------------about.txtの読み込み----------------------------------------*/
	exist "data/about.txt"
	if strsize = -1 {
		error "F01 : about.txtが見つかりません\ndataフォルダ内にabout.txtが見つかりません。"
	}
		
	notesel about_txt
	noteload "data/about.txt"
			
	noteget about_title, 0
	noteget about_version, 1
	noteget about_release_number, 2
		
	split about_title, " : ", not_use, about_title
	split about_version, " : ", not_use, about_version
	split about_release_number, " : ", not_use, about_release_number
		
	title about_title

	/*---------------------------------config.datの読み込み---------------------------------------*/
	exist "data/config.dat"
	if strsize = -1 {
		error "F02 : 設定ファイルが見つかりません\ndataフォルダ内にconfig.datが見つかりません。"
	}
		
	notesel config
	noteload "data/config.dat"
	
	config_SystemFont = get_chapter(config, "SystemFont", " = \"", "\"")
	config_Set_Play_BGM = int( get_chapter(config, "Set_Play_BGM", " = ", ";") )
	config_Ignore_Update = int( get_chapter(config, "Ignore_Update", " = ", ";") )
	config_Get_Dev_Version = int( get_chapter(config, "Get_Dev_Version", " = ", ";") )

	config_OS = get_chapter(config, "OS", " = \"", "\"")

	config_Adjustment_Interval = int( get_chapter(config, "Adjustment_Interval", " = ", ";") )
	config_Drow_Interval = int( get_chapter(config, "Drow_Interval", " = ", ";") )
	
	config_WindowSize_X = int( get_chapter(config, "Config_WindowSize_X", " = ", ";") )
	config_WindowSize_Y = int( get_chapter(config, "Config_WindowSize_Y", " = ", ";") )

	config_Pacriman_Mode = int( get_chapter(config, "Pacriman_Mode", " = ", ";") )

	
	windowx=Config_WindowSize_X : windowy=Config_WindowSize_Y

	/*-------------------------------ウィンドウサイズの可変化-------------------------------------*/
	screen 0, ginfo_dispx, ginfo_dispy : width windowx, windowy
		
	GetWindowLong hwnd, -16
	SetWindowLong hwnd, -16, stat | WS_THICKFRAME | WS_MAXIMIZEBOX

	color 0, 0, 0 : boxf

	/*---------------------------------アップデートの確認-----------------------------------------*/
	//既にアップデーターがあれば削除
	exist "Cities_Box_UD.exe"
	if strsize != -1 {
		delete "Cities_Box_UD.exe"
	}

	exist "Cities_Box_UD_Dev.exe"
	if strsize != -1 {
		delete "Cities_Box_UD_Dev.exe"
	}
	
	//アップデート通知を受け取らない設定なら*menuへ
	if config_Ignore_Update = 1 {
		goto *buffering
	}

	//通常のアップデートの確認
	download "http://joogle.web.fc2.com/datacenter/cities_box/", "datacenter_url.txt", "data/datacenter_url.txt"
		
	notesel datacenter_url
	noteload "data/datacenter_url.txt"
		
	if instr(datacenter_url, 0, "http://") = -1 {
		datacenter_url = "http://yotiosoft.com/dc/cities_box/"
	}
		
	download datacenter_url, "latest_version.txt", "data/latest_version.txt"
		
	notesel latest_version
	noteload "data/latest_version.txt"
	
	if instr(latest_version, 0, "<!DOCTYPE html>") != -1 {
		goto *buffering
	}
		
	latest_version__Release_number = int(get_chapter(latest_version, "Release Number", " : ", ";"))
	latest_version__Title = get_chapter(latest_version, "Title", " : ", ";")
	latest_version__Version = get_chapter(latest_version, "Version", " : ", ";")
	latest_version__About = get_chapter(latest_version, "About", " : ", ";")
	latest_version__OS = get_chapter(latest_version, "OS", " : ", ";")
		
	if latest_version__Release_number != 1145141919 and instr(latest_version__OS, 0, config_OS) != -1 {
		normalUpdate = 1
	
		goto *buffering
	}

	//開発版のアップデートの確認
	if config_get_Dev_Version = 1 {
		if instr(datacenter_url, 0, "http://") = -1 {
			datacenter_url = "http://yotiosoft.com/dc/cities_box/"
		}
			
		download datacenter_url, "Dev_latest_version.txt", "data/Dev_latest_version.txt"
			
		notesel Dev_latest_version
		noteload "data/Dev_latest_version.txt"
			
		if instr(Dev_latest_version, 0, "<!DOCTYPE html>") != -1 {
			goto *buffering
		}
			
		Dev_latest_version__Release_number = int(get_chapter(Dev_latest_version, "Release Number", " : ", ";"))
		Dev_latest_version__Title = get_chapter(Dev_latest_version, "Title", " : ", ";")
		Dev_latest_version__Version = get_chapter(Dev_latest_version, "Version", " : ", ";")
		Dev_latest_version__About = get_chapter(Dev_latest_version, "About", " : ", ";")
		Dev_latest_version__OS = get_chapter(latest_version, "OS", " : ", ";")
			
		if Dev_latest_version__Release_number > about_release_number and instr(Dev_latest_version__OS, 0, config_OS) != -1 {
			devUpdate = 1
		
			goto *buffering
		}
	}

*buffering
	/*------------------------------------使用する画像の読み込み----------------------------------*/
	color 255, 201, 14 : boxf 0, windowy-5, windowx/2, windowy
	
	bufferings = ""

	notesel bufferings

	repeat BUFFER_IMAGES_TOTAL + 1
		noteadd " ", cnt
	loop
	
	//ロゴ、背景画像（buffer 1は設定ウィンドウで使うため使用不可）
		if instr(about_title, 0, "Dev") != -1 {
			noteadd "img/logo_Dev.png", 2, 1								; ロゴ
			noteadd "img/logo2_Dev.png", 62, 1								; ロゴ2（タイトル）
		} else {
			noteadd "img/logo.png", 2, 1									; ロゴ
			noteadd "img/logo2.png", 62, 1									; ロゴ2（タイトル）
		}
		
		noteadd "img/logo2_Mac.png", 75, 1									; ロゴ2（macOS向け）
		noteadd "img/title_background.png", 15, 1							; タイトル背景画像
	
	//メニューのアイコン
		noteadd "img/menu_icons/menu/cursor.png", 3, 1						; 標準カーソル
		noteadd "img/menu_icons/menu/road.png", 4, 1						; メニューアイコン（道路敷設）
		noteadd "img/menu_icons/menu/railroad.png", 50, 1					; メニューアイコン（線路建設）
		noteadd "img/menu_icons/menu/low_density_residential.png", 5, 1		; メニューアイコン（住居地区建設）
		noteadd "img/menu_icons/menu/commercial.png", 12, 1					; メニューアイコン（商業地区建設）
		noteadd "img/menu_icons/menu/office.png", 6, 1						; メニューアイコン（オフィス建設）
		noteadd "img/menu_icons/menu/industrial.png", 19, 1					; メニューアイコン（工業地区建設）
		noteadd "img/menu_icons/menu/farm.png", 57, 1						; メニューアイコン（農業地区建設）
		noteadd "img/menu_icons/menu/public.png", 7, 1						; メニューアイコン（郵便局建設）
		noteadd "img/menu_icons/menu/park.png", 29, 1						; メニューアイコン（公園建設）
		noteadd "img/menu_icons/menu/waterway.png", 76, 1					; メニューアイコン（水路建設）
	
		noteadd "img/menu_icons/menu/bulldozer.png", 10, 1					; 撤去ボタン
		noteadd "img/menu_icons/save/save.png", 11, 1						; 保存ボタン
		noteadd "img/menu_icons/setting/setting.png", 13, 1					; 設定ボタン
		noteadd "img/menu_icons/stat/stat.png", 30, 1						; 統計ボタン
		noteadd "img/menu_icons/budget/budget.png", 49, 1					; 予算ボタン
		noteadd "img/menu_icons/information/information.png", 52, 1			; 情報ボタン
	
	//小サイズのアイコン
		noteadd "img/menu_icons/mini/low_density_residential.png", 8, 1		; 低密度住居地区
		noteadd "img/menu_icons/mini/high_density_residential.png", 9, 1	; 高密度住居地区
		noteadd "img/menu_icons/mini/low_density_commercial.png", 20, 1		; 低密度商業地区
		noteadd "img/menu_icons/mini/high_density_commercial.png", 21, 1	; 高密度商業地区
		
		noteadd "img/menu_icons/mini/roadway.png", 66, 1					; 車道
		noteadd "img/menu_icons/mini/promenade.png", 67, 1					; 歩道 / 自転車道
	
	//設定で使うアイコン
		noteadd "img/menu_icons/setting/check.png", 14, 1					; チェックボタン
		noteadd "img/menu_icons/setting/refer.png", 16, 1					; 参照ボタン
	
	//統計メニューで使うアイコン
		noteadd "img/menu_icons/stat/type.png", 31, 1						; 建築物の種類
		noteadd "img/menu_icons/stat/land_price.png", 32, 1					; 地価
		noteadd "img/menu_icons/stat/crime_rate.png", 33, 1					; 犯罪率
		noteadd "img/menu_icons/stat/education_rate.png", 47, 1				; 教育度
		noteadd "img/menu_icons/stat/happiness.png", 51, 1					; 幸福度
	
	//犯罪率、地価の統計で使うタイル
		noteadd "img/quarter/+3.png", 34, 1									; 地価/犯罪率/教育度 : 最良
		noteadd "img/quarter/+2.png", 35, 1									; 地価/犯罪率/教育度 : 良
		noteadd "img/quarter/+1.png", 36, 1									; 地価/犯罪率/教育度 : 概ね良
		noteadd "img/quarter/0.png" , 48, 1									; 地価/犯罪率/教育度 : 0
		noteadd "img/quarter/-1.png", 37, 1									; 地価/犯罪率/教育度 : 少し低い/悪い
		noteadd "img/quarter/-2.png", 38, 1									; 地価/犯罪率/教育度 : 低い/悪い
		noteadd "img/quarter/-3.png", 39, 1									; 地価/犯罪率/教育度 : 最低/最悪
	
	//エリア設定で使うアイコン
		noteadd "img/area/residential.png", 40, 1							; エリア : 住居地区
		noteadd "img/area/commercial.png", 41, 1							; エリア : 商業地区
		noteadd "img/area/office.png", 42, 1								; エリア : オフィス地区
		noteadd "img/area/industrial.png", 43, 1							; エリア : 工業地区
		noteadd "img/area/farm.png", 58, 1									; エリア : 農業地区
	
	//ポインター
		noteadd "img/pointer/blue.png", 17, 1								; 青いポインター
		noteadd "img/pointer/red.png", 18, 1								; 赤いポインター
	
	//地区を示すタイル
		noteadd "img/quarter/residential.png", 22, 1						; 住居地区
		noteadd "img/quarter/commercial.png", 23, 1							; 商業地区
		noteadd "img/quarter/office.png", 24, 1								; オフィス地区
		noteadd "img/quarter/industrial.png", 25, 1							; 工業地区
		noteadd "img/quarter/farm.png", 59, 1								; 農業地区
		noteadd "img/quarter/public.png", 26, 1								; 公共施設
		noteadd "img/quarter/h_residential.png", 44, 1						; 高密度住居地区
		noteadd "img/quarter/h_commercial.png", 45, 1						; 高密度商業地区
		noteadd "img/quarter/h_office.png", 46, 1							; 高密度オフィス地区
	
	//最初のメニュー画面のボタン
		noteadd "img/start_menu/new.png", 27, 1								; 新マップ
		noteadd "img/start_menu/load.png", 28, 1							; 都市
	
		noteadd "img/start_menu/setting.png", 65, 1							; 設定
		noteadd "img/start_menu/addon_maker.png", 72, 1						; Addon Maker
	
	//メニューの設定画面で使うアイコン
		noteadd "img/menu_setting/general.png", 60, 1						; 一般設定
		noteadd "img/menu_setting/information.png", 61, 1					; 情報
		noteadd "img/menu_setting/bug.png", 63, 1							; バグ・ご要望の送信
	
		noteadd "img/menu_setting/text.png", 64, 1							; テキストファイルアイコン
	
	//読み込み中アイコン
		noteadd "img/loading/124856y.png", 53, 1							; 読み込み中アイコン1
		noteadd "img/loading/124856y-2.png", 54, 1							; 読み込み中アイコン2
		noteadd "img/loading/124856y-3.png", 55, 1							; 読み込み中アイコン3
		noteadd "img/loading/124856y-4.png", 56, 1							; 読み込み中アイコン4

	//速さ
		noteadd "img/speed/slow.png", 73, 1									; 遅い
		noteadd "img/speed/normal.png", 68, 1								; 普通
		noteadd "img/speed/fast.png", 69, 1									; 速い
		noteadd "img/speed/very_fast.png", 74, 1							; とても早い
		noteadd "img/speed/pause.png", 70, 1								; 一時停止

	//建物詳細ダイアログ
		noteadd "img/show_detail/change_name.png", 71, 1					; 建物名の変更

	//Pacriman
		celload "img/pacriman/logo.png", 77									; パックリマンのロゴ
		celload "img/pacriman/pacriman.png", 78								; パックリマン本体
		celload "img/pacriman/ghost.png", 79								; おばけ
		celload "img/pacriman/small_feed.png", 80							; 小さいパックリマンの餌
		celload "img/pacriman/big_feed.png", 81								; 大きいパックリマンの餌
		celload "img/pacriman/selected.png", 82								; 選択
		celload "img/pacriman/ghost_blue.png", 83							; おばけ（パックリマンが無敵状態のとき）

	; 読み込み
	a_statbar_block = windowx/2 / BUFFER_IMAGES_TOTAL
	
	repeat BUFFER_IMAGES_TOTAL + 1
		noteget load_img, cnt
		exist load_img

		if load_img != " " and strsize = -1 {
			error "F03 : 画像ファイルが見つかりません\n必要な画像ファイル "+load_img+" が欠けています。"
		}
		
		if load_img != " " and strsize != -1 {
			celload load_img, cnt
		}

		color 255, 201, 14 : boxf 0, windowy-5, windowx/2+(a_statbar_block*(cnt+3)), windowy
	loop

	bufferings = ""

/*-----------------------------------メニュー画面と設定画面---------------------------------------*/
*menu
	/*-----------------------------------メニュー画面---------------------------------------------*/
	onexit *exit
	onclick gosub *menu_onclick

	return_from_exit = "menu"
	
	if (devUpdate = 1 or normalUpdate = 1) and update_button = 0 and config_Ignore_Update = 0 {
		objsize 150, 20
		pos windowx-150-20, windowy-titlebar_h-65+5 : button gosub "更新する", *update
		pos windowx-150-20, windowy-titlebar_h-65+30 : button "更新通知を受け取らない", *set_ignore_update
		update_button = 1
	}
	
	now_loading = 0

	if config_Pacriman_Mode = 1 {
		wait 50
		mmload "bgm/[Sp]8bit_Title.mp3", , 1 : mmplay
	}
	
	repeat
		redraw 0

		//現在のウィンドウサイズを取得
		windowx = ginfo_sizex
		windowy = ginfo_sizey
	
		//ウィンドウ左枠の横幅とタイトルバーの高さを取得
		dim rc, 2
		rc(0) = 0
		rc(1) = 0
		ClientToScreen hwnd, varptr(rc)
			
		window_left_breadth = rc(0) - ginfo_wx1
		titlebar_h = rc(1) - ginfo_wy1

		//背景画像
		if config_Pacriman_Mode = 1 {
			color 0, 0, 0 : boxf
		} else {
			pos 0, 0 : gzoom windowx, windowy-titlebar_h, 15, 0, 0, 948, 635 : gblur 2
		}

		//メニュー画面表示
		color 0, 0, 0
		sboxf 128, 0, 0, windowx, windowy
				
		if config_Pacriman_Mode = 1 {
			pos windowx/2-320, double(52./300)*(windowy-titlebar_h) : gmode 2 : gcopy 77, 0, 0, 640, 105
		} else {
			pos windowx/2-55, double(50./300)*(windowy-titlebar_h) : gmode 0 : gcopy 2, 0, 0, 110, 110
		}
			
		font config_SystemFont, 14
			
		color 0, 162, 232

		if config_Pacriman_Mode = 0 {
			if click_range(windowx/2-50-20-10, double(300./483)*(windowy-titlebar_h), windowx/2-50-20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20) = 1 {
				sboxf 200, windowx/2-50-20-10, double(300./483)*(windowy-titlebar_h), windowx/2-50-20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20
			}
			if click_range(windowx/2+20-10, double(300./483)*(windowy-titlebar_h), windowx/2+20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20) = 1 {
				sboxf 200, windowx/2+20-10, double(300./483)*(windowy-titlebar_h), windowx/2+20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20
			}
		
			if click_range(8, 25, 8+32, 25+32) = 1 {
				sboxf 200, 8, 25, 8+32, 25+32
			}
			if click_range(45, 25, 45+32, 25+32) = 1 {
				sboxf 200, 45, 25, 45+32, 25+32
			}
		
			//マップ作成・読み込みボタン
				color 255, 255, 255
				
				gmode 2
				pos windowx/2-50-20, double(300./483)*(windowy-titlebar_h) : gcopy 27, 0, 0, 50, 50
					cmes "新しいマップ", windowx/2-50-20-50, double(300./483)*(windowy-titlebar_h)+50+2, windowx/2-50-20+50+50, double(300./483)*(windowy-titlebar_h)+50+2+20, 1
							
				pos windowx/2+20, double(300./483)*(windowy-titlebar_h) : gcopy 28, 0, 0, 50, 50
					cmes "読み込み", windowx/2+20-50, double(300./483)*(windowy-titlebar_h)+50+2, windowx/2+20+50+50, double(300./483)*(windowy-titlebar_h)+50+2+20, 1
		
			//左上のメニュー（設定ボタンなど）
				color 255, 255, 255 : font config_SystemFont, 14
				pos 8, 5 : mes about_title+" Ver."+about_version+" r"+about_release_number+""
				
				gmode 2
				pos 8, 25  : gcopy 65, 0, 0, 32, 32
				pos 45, 25 : gcopy 72, 0, 0, 32, 32
	
				if config_OS = "macOS" {
					pos 82, 25 : gcopy 64, 0, 0, 32, 32
				}
	
				if click_range(8, 25, 8+32, 25+32) = 1 {
					font config_SystemFont, 10
					
					color 255, 255, 255 : sboxf 200, 8, 25+32, 8+50, 25+32+18
					color 0, 0, 0
					pos 8+2, 25+32+2 : mes "設定"
				}
				if click_range(45, 25, 45+32, 25+32) = 1 {
					font config_SystemFont, 10
					
					color 255, 255, 255 : sboxf 200, 45, 25+32, 45+70, 25+32+18
					color 0, 0, 0
					pos 45+2, 25+32+2 : mes "Addon Maker"
				}
	
				if config_OS = "macOS" {
					if click_range(82, 25, 82+32, 25+32) = 1 {
						font config_SystemFont, 10
						
						color 255, 255, 255 : sboxf 200, 82, 25+32, 82+70, 25+32+18
						color 0, 0, 0
						pos 82+2, 25+32+2 : mes "ReadMe.txt"
					}
				}
				
		} else {
			color 255, 255, 255 : font config_SystemFont, 16
			cmes "Load Map\n\nNew Map\n\nSetting", 0, windowy/2, windowx, windowy

			pos windowy/2, windowy/2+43*selected_number+2 : gmode 2 : gcopy 82, 0, 0, 16, 16

			if cnt \ 2 = 0 {
				getkey keyup, 38
				if keyup = 1 {
					selected_number --
					if selected_number < 0 : selected_number = 2
				}
				getkey keydown, 40
				if keydown = 1 {
					selected_number ++
					if selected_number > 2 : selected_number = 0
				}
			}

			getkey enter, 13
			if enter = 1 {
				if selected_number = 0 { mmstop : gosub *map_dimensions : goto *load_map }
				if selected_number = 1 { mmstop : gosub *map_dimensions : goto *new_map }
				if selected_number = 2 : goto *menu_setting
			}

			font config_SystemFont, 12
			cmes "(C) 2017 2018 YotioSoft All Rights Reserved.", 0, windowy-60, windowx, windowy
		}
			
	
		//アップデートがあった場合
			if (latest_version__Release_number != 1145141919 or Dev_latest_version__Release_number > about_release_number) and config_Ignore_Update = 0 {
				color 0, 162, 232 : sboxf 128, windowx-500-10, windowy-titlebar_h-70+5-10, windowx-10, windowy-titlebar_h-10
				color 255, 255, 255

				if latest_version__Release_number != 1145141919 {
					font config_SystemFont, 14 : pos windowx-500, windowy-titlebar_h-70+3 : mes "アップデートがあります！更新しますか？"
					font config_SystemFont, 11 : pos windowx-500, windowy-titlebar_h-50+3 : mes "Ver."+latest_version__Version+" r"+latest_version__Release_number+"\n"+latest_version__About+""
				} else : if Dev_latest_version__Release_number > about_release_number {
					font config_SystemFont, 14 : pos windowx-500, windowy-titlebar_h-70+3 : mes "開発版にアップデートがあります！更新しますか？"
					font config_SystemFont, 11 : pos windowx-500, windowy-titlebar_h-50+3 : mes "Ver."+Dev_latest_version__Version+"(Dev) r"+Dev_latest_version__Release_number+"\n"+Dev_latest_version__About+""
				}
			}
		redraw 1
		wait 10
	loop
	
*menu_onclick
	/*-------------------------メニュー画面でクリックされたときの動作-----------------------------*/
	if click_range(windowx/2-80, double(300./483)*(windowy-titlebar_h), windowx/2-50-20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20) = 1 and Pacriman_Mode = 0 {
		gosub *map_dimensions
		goto *new_map
	}
	if click_range(windowx/2+10, double(300./483)*(windowy-titlebar_h), windowx/2+20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20) = 1 and Pacriman_Mode = 0 {
		gosub *map_dimensions
		goto *load_map
	}
	
	if click_range(8, 25, 8+32, 25+32) = 1 and Pacriman_Mode = 0 {
		goto *menu_setting
	}
	if click_range(45, 25, 45+32, 25+32) = 1 and Pacriman_Mode = 0 {
		gosub *menu_addon_maker
	}

	if OS = "macOS" {
		if click_range(82, 25, 82+32, 25+32) = 1 {
			exist "ReadMe.txt"
			if strsize = -1 {
				error "F04 : ReadMe.txtが見つかりません\nReadMe.txtが見つからないため、開くことができません。"
			}
			
			exec "ReadMe.txt", 16
		}
	}
	
	return

*set_ignore_update
	config_Ignore_Update = 1
	goto *menu
	
*menu_setting
	/*-------------------------------------設定画面-----------------------------------------------*/
	screen 1, 500, 300
	
	menu_setting__page = "general"

	if config_OS = "macOS" {
		os_num = 1
	} else {
		os_num = 0
	}

*menu_setting_2
	gsel 1, 2
	title "設定"
	
	onclick *menu_setting_onclick
	
	color 50, 50, 50 : boxf 0, 0, 64, 300
	color 75, 75, 75 : boxf 64, 0, 500, 28
	color 90, 90, 90 : boxf 64, 28, 500, 300

	from_menu_setting = 1
	
	//設定メニュー
		gmode 2
		
		pos 16, 28 + 0 + 16   : gcopy 60, 0, 0, 48, 48
		pos 16, 28 + 64 + 16  : gcopy 63, 0, 0, 48, 48
		pos 16, 28 + 128 + 16 : gcopy 61, 0, 0, 48, 48
	
	//設定画面
	
		; 一般設定
			if menu_setting__page = "general" {
				color 0, 162, 232 : boxf 60, 0+28, 64, 64+28
				
				font config_SystemFont, 16 : color 255, 255, 255
				pos 70, 3 : mes "一般設定"
	
				font config_SystemFont, 14 : color 255, 255, 255
	
				; BGMの再生(Set_Play_BGM)
					pos 90, 40 : mes "BGMを再生する"
					if config_Set_Play_BGM = 0 {
						pos 350, 40 : gcopy 14, 0, 0, 16, 16
					} else {
						pos 350, 40 : gcopy 14, 0, 16, 16, 16
					}
	
				; アップデート通知のON/OFF（Ignore_Update）
					pos 90, 70 : mes "アップデートを通知する"
					if config_Ignore_Update = 1 {
						pos 350, 70 : gcopy 14, 0, 0, 16, 16
					} else {
						pos 350, 70 : gcopy 14, 0, 16, 16, 16
					}

				; 開発版のアップデートを受け取る（Get_Dev_Version）
					pos 90, 100 : mes "開発版のアップデートを受け取る"
					if config_Get_Dev_Version = 0 {
						pos 350, 100 : gcopy 14, 0, 0, 16, 16
					} else {
						pos 350, 100 : gcopy 14, 0, 16, 16, 16
					}
	
				; フォント設定(SystemFont)
					pos 90, 130 : mes "フォント"

					gtmp = ginfo(14)
					
					pos 90+gtmp+100, 130 : objsize 150, 20 : input config_SystemFont : SyetmFont__stat = stat
					pos 90+gtmp+250, 130 : objsize 50, 20  : button gosub "参照", *refer_fonts

				; 動作モード設定(OS)
					pos 90, 160 : mes "動作モード"
					
					pos 90+gtmp+200, 160 : objsize 100, 20 : combox os_num, 100, "Windows\nmacOS"

				; 描写間隔（Drow_Interval）
					pos 90, 190 : mes "描写間隔（数値が低いほど間隔が短い）"
					
					pos 90+gtmp+250, 190 : objsize 50, 20 : input config_Drow_Interval : DIinpStat = stat


				repeat
					if os_num != os_num_before and os_num = 0 {
						config_OS = "Windows"

						config_Adjustment_Interval = 2
						config_Drow_Interval = 4
						
						objprm DIinpStat, config_Drow_Interval
					} else : if os_num != os_num_before and os_num = 1 {
						config_OS = "macOS"

						config_Adjustment_Interval = 2
						config_Drow_Interval = 2
						
						objprm DIinpStat, config_Drow_Interval
					}

					os_num_before = os_num

					wait 100
				loop
			}
	
		; バグ・ご要望の送信
			if menu_setting__page = "bug" {
				clrobj
	
				color 0, 162, 232 : boxf 60, 64+28, 64, 128+28
	
				font config_SystemFont, 16 : color 255, 255, 255
				pos 70, 3 : mes "バグ・ご要望の送信"
	
				font config_SystemFont, 14 : color 255, 255, 255
				pos 90, 50 : mes "現在確認されているバグについては、\nReadMe.txtの「14.バグや問題点、今後の予定」をご覧ください。"
				pos ((500-64)/2)-16, 100 : gcopy 64, 0, 0, 32, 32
				pos ((500-64)/2)-16+45, 105 : mes "ReadMe.txtを開く"
	
				ginfo_tmp__bug_ReadMe = ginfo(14)
	
				pos 90, 150 : mes "この他にバグやご要望等がございましたら、\nお気軽にYotioSoft コンタクトフォームまでご一報ください。"
				pos ((500-64)/2)-16-40, 200 : gcopy 63, 0, 0, 32, 32
				pos ((500-64)/2)-16-40+45, 205 : mes "コンタクトフォームをブラウザで開く"
	
				ginfo_tmp__bug_Send = ginfo(14)
	
				
			}
	
		; 情報
			if menu_setting__page = "information" {
				clrobj
				
				color 0, 162, 232 : boxf 60, 128+28, 64, 192+28
				
				font config_SystemFont, 16 : color 255, 255, 255
				pos 70, 3 : mes "情報"
	
				pos 100, 40     : gcopy 2, 0, 0, 110, 110

				if config_OS = "Windows" {
					pos 120+110, 40 : gcopy 62, 0, 0, 230, 110
				} else : config_OS = "macOS" {
					pos 120+110, 40 : gcopy 75, 0, 0, 230, 110
				}
	
				font config_SystemFont, 14 : color 255, 255, 255
				pos 100, 170 : mes ""+about_title+"\nVersion : "+about_version+"\nRelease Number : "+about_release_number+"\nDevelopment Language : HSP 3.5"
				font config_SystemFont, 10 : color 255, 255, 255
				pos 100, 270 : mes "Copyright(C) YotioSoft 2017-2018 All Rights Reserved."
			}
	
	stop
	
*menu_setting_onclick
	//設定上でクリックされたときの動作
	
	//設定メニュー
		if click_range(0, 28, 64, 28+64) = 1 {
			menu_setting__page = "general"
		}
		if click_range(0, 28+64, 64, 28+128) = 1 {
			menu_setting__page = "bug"
		}
		if click_range(0, 28+128, 64, 28+172) = 1 {
			menu_setting__page = "information"
		}
	
	//一般設定
		if menu_setting__page = "general" {
			if click_range(350, 40, 350+16, 40+16) = 1 {
				if config_Set_Play_BGM = 0 {
					config_Set_Play_BGM = 1
				} else {
					config_Set_Play_BGM = 0
				}
			}
			if click_range(350, 70, 350+16, 70+16) = 1 {
				if config_Ignore_Update = 0 {
					config_Ignore_Update = 1
				} else {
					config_Ignore_Update = 0
				}
			}
			if click_range(350, 100, 350+16, 100+16) = 1 {
				if config_Get_Dev_Version = 0 {
					config_Get_Dev_Version = 1
				} else {
					config_Get_Dev_Version = 0
				}
			}
		}
	
	//バグ・ご要望の送信
		if menu_setting__page = "bug" {
			; ReadMe.txtを開く
				if click_range(((500-64)/2)-16, 100, ((500-64)/2)-16+45+ginfo_tmp__bug_ReadMe, 100+32) = 1{
					exist "ReadMe.txt"
					if strsize = -1 {
						error "F04 : ReadMe.txtが見つかりません\nReadMe.txtが見つからないため、開くことができません。"
					}
					
					exec "ReadMe.txt", 16
				}
	
			; コンタクトフォームを開く
				if click_range(((500-64)/2)-16-40, 200, ((500-64)/2)-16-40+45+ginfo_tmp__bug_Send, 200+32) = 1{
					exec "http://yotiosoft.com/contact-form/", 16
				}
		}

	clrobj
	goto *menu_setting_2

*menu_addon_maker
	/*-------------------------------------Addon Makerを開く--------------------------------------*/
	exist "Addon_Maker/Cities_Box_Addon_Maker.exe"

	if strsize = -1 {
		error "F05 : Cities_Box_Addon_Maker.exeがありません\n別途ダウンロードしてください"
	} else {
		exec "Addon_Maker/Cities_Box_Addon_Maker.exe"
	}

	return
/*----------------------------------マップデータの作成・読み込み----------------------------------*/
*map_dimensions
	/*-------------------------------マップデータの配列の確保-------------------------------------*/
	
	dim map, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z, 2					//各座標のアドオン番号
	sdim name, 32, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z, 2			//各座標のアドオン名
	sdim category, 32, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z, 3		//各マスに置かれているアドオンのカテゴリー（road, residentialなど）
	dim obj_type, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z, 2			//座標上にあるオブジェクトのタイプ
	dim obj_dire, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z, 2			//座標上にあるオブジェクトの向き
	dim obj_serial_num, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z			//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトの通し番号（1マスの場合は0）
	dim obj_use_tiles, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z, 2		//ひとつのオブジェクトで複数のタイルを要するときの、必要なタイル数
	dim obj_tiles, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z, 2			//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトを設置した場所からタイルの数
		
	dim residents, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z				//各建築物の住民の数（住宅地のみ）
	dim workers, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z				//商業地区の従業員数
	dim students, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z				//各学校の生徒・学生数
	
	dim land_price, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z				//地価（万円/マス）
	dim crime_rate, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z				//犯罪率
	dim education_rate, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z			//教育度
	dim happiness, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z				//幸福度
	
	sdim crop, 32, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z				//生産物
	dim crop_amount, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z			//生産量
	
	sdim age, 32, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z				//住人の年齢
	sdim gender, 32, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z			//住人の性別
	sdim workplace, 32, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z			//住人が通うの職場の位置
	sdim school, 32, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z			//住人が通う学校の位置
		
	sdim reservation, 32, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z		//地区の予約（地域設定されたがまだ建物が立っていない区域）

	sdim original_name, 64, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z		//建物名（ユーザーがつけた名前）

	map_City_Name = ""
	map_Mayor_Name = ""
	map_Set_Change_Weather = 1

	return

*load_map
	/*----------------------------------マップの読み込み------------------------------------------*/
	dialog "cbd;*.cbx", 16, "Cities Box マップデータ"

	if stat != 1 {
		goto *menu
	}

	clrobj
	
	load_mapdata_name = refstr
	map_Total_Population = 0
	map_total_Residential = 0 : map_total_Commercial = 0 : map_total_Office = 0 : map_total_Industrial = 0 : map_total_Farm = 0
	map_total_Police_Stations = 0 : map_total_Fire_Depertments = 0 : map_total_Post_Offices = 0 : map_total_Education = 0
		
	chdir directory

	//マップ読み込み開始
	notesel load_mapdata
	noteload load_mapdata_name

	//保存バージョン(Version)を読み込み
		map_Saved_Version = int(get_chapter(load_mapdata, "Version", " = ", ";"))
	
	//都市名(City_Name)を読み込み
		map_City_Name = get_chapter(load_mapdata, "City_Name", " = \"", "\"")
	
	//市長名(Mayor_Name)を読み込み
		map_Mayor_Name = get_chapter(load_mapdata, "Mayor_Name", " = \"", "\"")
	
	//日時
		map_time_Year = int(get_chapter(load_mapdata, "time_Year", " = ", ";"))			; ゲーム内の時間の年
		map_time_Month = int(get_chapter(load_mapdata, "time_Month", " = ", ";"))		; ゲーム内の時間の月
		map_time_Date = int(get_chapter(load_mapdata, "time_Date", " = ", ";"))			; ゲーム内の時間の日
		map_time_Hour = int(get_chapter(load_mapdata, "time_Hour", " = ", ";"))			; ゲーム内の時間の時
		map_time_Minutes = int(get_chapter(load_mapdata, "time_Minutes", " = ", ";"))	; ゲーム内の時間の分
	
		if map_time_Year = 0 {
			map_time_Year = gettime(0)
		}
		if map_time_Month = 0 {
			map_time_Month = gettime(1)
		}
		if map_time_Date = 0 {
			map_time_Date = gettime(3)
		}
	
	//需要度(demand_○○)を読み込み
		map_demand_Residential = int( get_chapter(load_mapdata, "demand_Residential", " = ", ";") )
		map_demand_Commercial = int( get_chapter(load_mapdata, "demand_Commercial", " = ", ";") )
		map_demand_Office = int( get_chapter(load_mapdata, "demand_Office", " = ", ";") )
		map_demand_Industrial = int( get_chapter(load_mapdata, "demand_Industrial", " = ", ";") )
		map_demand_Farm = int( get_chapter(load_mapdata, "demand_Farm", " = ", ";") )
	
		if instr(load_mapdata, 0, "demand_Residential") = -1 {
			map_demand_Residential = 100
		}
		if instr(load_mapdata, 0, "demand_Commercial") = -1 {
			map_demand_Commercial = 0
		}
		if instr(load_mapdata, 0, "demand_Office") = -1 {
			map_demand_Office = 0
		}
		if instr(load_mapdata, 0, "demand_Industrial") = -1 {
			map_demand_Industrial = 0
		}
		if instr(load_mapdata, 0, "demand_Farm") = -1 {
			map_demand_Farm = 0
		}
			
	//資金(Money)を読み込み
		map_Money = int( get_chapter(load_mapdata, "Money", " = ", ";") )
	
		if instr(load_mapdata, 0, "Money") = -1 {
			map_Money = 50000
		}
	
	//設定読み込み
		//天候の変化(Set_Change_Weather)
			map_Set_Change_Weather = int( get_chapter(load_mapdata, "Set_Change_Weather", " = ", ";") )
					
		//気温(temperature)
			map_temperature = int( get_chapter(load_mapdata, "Temperature", " = ", ";") )
	
		//夜間は暗くする(Set_Dark_on_Night)
			map_Set_Dark_on_Night = int( get_chapter(load_mapdata, "Set_Dark_on_Night", " = ", ";") )
	
		//予算の読み込み
			if instr(load_mapdata, 0, "budget_of_Police") != -1 {
				map_budget_of_Police = int( get_chapter(load_mapdata, "budget_of_Police", " = ", ";") )
			} else {
				map_budget_of_Police = 100
			}
				
			if instr(load_mapdata, 0, "budget_of_Fire_Depertment") != -1 {
				map_budget_of_Fire_Depertment = int( get_chapter(load_mapdata, "budget_of_Fire_Depertment", " = ", ";") )
			} else {
				map_budget_of_Fire_Depertment = 100
			}
				
			if instr(load_mapdata, 0, "budget_of_Post_Office") != -1 {
				map_budget_of_Post_Office = int( get_chapter(load_mapdata, "budget_of_Post_Office", " = ", ";") )
			} else {
				map_budget_of_Post_Office = 100
			}
				
			if instr(load_mapdata, 0, "budget_of_Education") != -1 {
				map_budget_of_Education = int( get_chapter(load_mapdata, "budget_of_Education", " = ", ";") )
			} else {
				map_budget_of_Education = 100
			}
				
	
			if instr(load_mapdata, 0, "tax_of_Residential") != -1 {
				map_tax_of_Residential = int( get_chapter(load_mapdata, "tax_of_Residential", " = ", ";") )
			} else {
				map_tax_of_Residential = 100
			}
				
			if instr(load_mapdata, 0, "tax_of_Commercial") != -1 {
				map_tax_of_Commercial = int( get_chapter(load_mapdata, "tax_of_Commercial", " = ", ";") )
			} else {
				map_tax_of_Commercial = 100
			}
				
			if instr(load_mapdata, 0, "tax_of_Office") != -1 {
				map_tax_of_Office = int( get_chapter(load_mapdata, "tax_of_Office", " = ", ";") )
			} else {
				map_tax_of_Office = 100
			}
				
			if instr(load_mapdata, 0, "tax_of_Industrial") != -1 {
				map_tax_of_Industrial = int( get_chapter(load_mapdata, "tax_of_Industrial", " = ", ";") )
			} else {
				map_tax_of_Industrial = 100
			}
	
			if instr(load_mapdata, 0, "tax_of_Farm") != -1 {
				map_tax_of_Farm = int( get_chapter(load_mapdata, "tax_of_Farm", " = ", ";") )
			} else {
				map_tax_of_Farm = 100
			}

	//ここでアドオンを読み込む
		gosub *load_addons

	//配列を用いるデータの読み込み
		name_buf				= get_chapter(load_mapdata, "name(x,y)", " {", "}")	
		name2_buf				= get_chapter(load_mapdata, "name2(x,y)", " {", "}")
		
		category_buf			= get_chapter(load_mapdata, "category(x,y)", " {", "}")
		category_2_buf			= get_chapter(load_mapdata, "category_2(x,y)", " {", "}")
		category_3_buf			= get_chapter(load_mapdata, "category_3(x,y)", " {", "}")

		obj_type_buf			= get_chapter(load_mapdata, "obj_type(x,y)", " {", "}")
		obj_type2_buf			= get_chapter(load_mapdata, "obj_type2(x,y)", " {", "}")
		obj_dire_buf			= get_chapter(load_mapdata, "obj_dire(x,y)", " {", "}")
		obj_dire2_buf			= get_chapter(load_mapdata, "obj_dire2(x,y)", " {", "}")

		obj_serial_num_buf		= get_chapter(load_mapdata, "obj_serial_num(x,y)", " {", "}")

		obj_use_tiles_x_buf		= get_chapter(load_mapdata, "obj_use_tiles_x(x,y)", " {", "}")
		obj_use_tiles_y_buf		= get_chapter(load_mapdata, "obj_use_tiles_y(x,y)", " {", "}")

		obj_tiles_x_buf			= get_chapter(load_mapdata, "obj_tiles_x(x,y)", " {", "}")
		obj_tiles_y_buf			= get_chapter(load_mapdata, "obj_tiles_y(x,y)", " {", "}")

		residents_buf			= get_chapter(load_mapdata, "residents(x,y)", " {", "}")

		workers_Commercial_buf	= get_chapter(load_mapdata, "workers_Commercial(x,y)", " {", "}")
		workers_Office_buf		= get_chapter(load_mapdata, "workers_Office(x,y)", " {", "}")
		workers_Industrial_buf	= get_chapter(load_mapdata, "workers_Industrial(x,y)", " {", "}")
		workers_Farm_buf		= get_chapter(load_mapdata, "workers_Farm(x,y)", " {", "}")
		workers_Public_buf		= get_chapter(load_mapdata, "workers_Public(x,y)", " {", "}")

		students_buf			= get_chapter(load_mapdata, "students(x,y)", " {", "}")

		land_price_buf			= get_chapter(load_mapdata, "land_price(x,y)", " {", "}")
		crime_rate_buf			= get_chapter(load_mapdata, "crime_rate(x,y)", " {", "}")
		education_rate_buf		= get_chapter(load_mapdata, "education_rate(x,y)", " {", "}")
		happiness_buf			= get_chapter(load_mapdata, "happiness(x,y)", " {", "}")

		crop_buf				= get_chapter(load_mapdata, "crop(x,y)", " {", "}")
		crop_amount_buf			= get_chapter(load_mapdata, "crop_amount(x,y)", " {", "}")

		age_buf					= get_chapter(load_mapdata, "age(x,y)", " {", "}")
		gender_buf				= get_chapter(load_mapdata, "gender(x,y)", " {", "}")

		workplace_buf			= get_chapter(load_mapdata, "workplace(x,y)", " {", "}")
		school_buf				= get_chapter(load_mapdata, "school(x,y)", " {", "}")

		reservation_buf			= get_chapter(load_mapdata, "reservation(x,y)", " {", "}")

		original_name_buf		= get_chapter(load_mapdata, "original_name(x,y)", " {", "}")

		if name_buf = "" {
			error "M01 : マップデータが故障しています\nセーブファイルにname(x,y)がありません。"
		}

		z = 0
		next_obj_serial_num = 0
			
		repeat MAPSIZE_Y
			y = cnt

			; name(x,y)
			notesel name_buf
			noteget name_buf_a_line, (y+1)
			
			split name_buf_a_line, ", ", name_buf_a_tile

			; name2(x,y)
			notesel name2_buf
			noteget name2_buf_a_line, (y+1)
			
			split name2_buf_a_line, ", ", name2_buf_a_tile

			; category(x,y)
			notesel category_buf
			noteget category_buf_a_line, (y+1)
			
			split category_buf_a_line, ", ", category_buf_a_tile

			; category_2(x,y)
			notesel category_2_buf
			noteget category_2_buf_a_line, (y+1)
			
			split category_2_buf_a_line, ", ", category_2_buf_a_tile

			; category_3(x,y)
			notesel category_3_buf
			noteget category_3_buf_a_line, (y+1)
			
			split category_3_buf_a_line, ", ", category_3_buf_a_tile

			; obj_type(x,y)
			notesel obj_type_buf
			noteget obj_type_buf_a_line, (y+1)
			
			split obj_type_buf_a_line, ", ", obj_type_buf_a_tile

			; obj_type2(x,y)
			notesel obj_type2_buf
			noteget obj_type2_buf_a_line, (y+1)
			
			split obj_type2_buf_a_line, ", ", obj_type2_buf_a_tile

			; obj_dire(x,y)
			notesel obj_dire_buf
			noteget obj_dire_buf_a_line, (y+1)
			
			split obj_dire_buf_a_line, ", ", obj_dire_buf_a_tile

			; obj_dire2(x,y)
			notesel obj_dire2_buf
			noteget obj_dire2_buf_a_line, (y+1)
			
			split obj_dire2_buf_a_line, ", ", obj_dire2_buf_a_tile

			; obj_serial_num(x,y)
			notesel obj_serial_num_buf
			noteget obj_serial_num_buf_a_line, (y+1)
			
			split obj_serial_num_buf_a_line, ", ", obj_serial_num_buf_a_tile

			; obj_use_tiles_x(x,y)
			notesel obj_use_tiles_x_buf
			noteget obj_use_tiles_x_buf_a_line, (y+1)
			
			split obj_use_tiles_x_buf_a_line, ", ", obj_use_tiles_x_buf_a_tile

			; obj_use_tiles_y(x,y)
			notesel obj_use_tiles_y_buf
			noteget obj_use_tiles_y_buf_a_line, (y+1)
			
			split obj_use_tiles_y_buf_a_line, ", ", obj_use_tiles_y_buf_a_tile

			; obj_tiles_x(x,y)
			notesel obj_tiles_x_buf
			noteget obj_tiles_x_buf_a_line, (y+1)
			
			split obj_tiles_x_buf_a_line, ", ", obj_tiles_x_buf_a_tile

			; obj_tiles_y(x,y)
			notesel obj_tiles_y_buf
			noteget obj_tiles_y_buf_a_line, (y+1)
			
			split obj_tiles_y_buf_a_line, ", ", obj_tiles_y_buf_a_tile

			; residents(x,y)
			notesel residents_buf
			noteget residents_buf_a_line, (y+1)
			
			split residents_buf_a_line, ", ", residents_buf_a_tile

			; workers_Commercial(x,y)
			notesel workers_Commercial_buf
			noteget Workers_Commercial_buf_a_line, (y+1)
			
			split workers_Commercial_buf_a_line, ", ", workers_Commercial_buf_a_tile

			; workers_Office(x,y)
			notesel workers_Office_buf
			noteget Workers_Office_buf_a_line, (y+1)
			
			split workers_Office_buf_a_line, ", ", workers_Office_buf_a_tile

			; workers_Industrial(x,y)
			notesel workers_Industrial_buf
			noteget Workers_Industrial_buf_a_line, (y+1)
			
			split workers_Industrial_buf_a_line, ", ", workers_Industrial_buf_a_tile

			; workers_Farm(x,y)
			notesel workers_Farm_buf
			noteget Workers_Farm_buf_a_line, (y+1)
			
			split workers_Farm_buf_a_line, ", ", workers_Farm_buf_a_tile

			; workers_Public(x,y)
			notesel workers_Public_buf
			noteget Workers_Public_buf_a_line, (y+1)
			
			split workers_Public_buf_a_line, ", ", workers_Public_buf_a_tile

			; students(x,y)
			notesel students_buf
			noteget students_buf_a_line, (y+1)
			
			split students_buf_a_line, ", ", students_buf_a_tile

			; land_price(x,y)
			notesel land_price_buf
			noteget land_price_buf_a_line, (y+1)
			
			split land_price_buf_a_line, ", ", land_price_buf_a_tile

			; crime_rate(x,y)
			notesel crime_rate_buf
			noteget crime_rate_buf_a_line, (y+1)
			
			split crime_rate_buf_a_line, ", ", crime_rate_buf_a_tile

			; education_rate(x,y)
			notesel education_rate_buf
			noteget education_rate_buf_a_line, (y+1)
			
			split education_rate_buf_a_line, ", ", education_rate_buf_a_tile

			; happiness(x,y)
			notesel happiness_buf
			noteget happiness_buf_a_line, (y+1)
			
			split happiness_buf_a_line, ", ", happiness_buf_a_tile

			; crop(x,y)
			notesel crop_buf
			noteget crop_buf_a_line, (y+1)
			
			split crop_buf_a_line, ", ", crop_buf_a_tile

			; crop_amount(x,y)
			notesel crop_amount_buf
			noteget crop_amount_buf_a_line, (y+1)
			
			split crop_amount_buf_a_line, ", ", crop_amount_buf_a_tile

			; students(x,y)
			notesel students_buf
			noteget students_buf_a_line, (y+1)
			
			split students_buf_a_line, ", ", students_buf_a_tile

			; age(x,y)
			notesel age_buf
			noteget age_buf_a_line, (y+1)
			
			split age_buf_a_line, ", ", age_buf_a_tile

			; gender(x,y)
			notesel gender_buf
			noteget gender_buf_a_line, (y+1)
			
			split gender_buf_a_line, ", ", gender_buf_a_tile

			; workplace(x,y)
			notesel workplace_buf
			noteget workplace_buf_a_line, (y+1)
			
			split workplace_buf_a_line, ", ", workplace_buf_a_tile

			; school(x,y)
			notesel school_buf
			noteget school_buf_a_line, (y+1)
			
			split school_buf_a_line, ", ", school_buf_a_tile

			; reservation(x,y)
			notesel reservation_buf
			noteget reservation_buf_a_line, (y+1)
			
			split reservation_buf_a_line, ", ", reservation_buf_a_tile

			; original_name(x,y)
			notesel original_name_buf
			noteget original_name_buf_a_line, (y+1)
			
			split original_name_buf_a_line, ", ", original_name_buf_a_tile
			
			; 配列に代入
			repeat MAPSIZE_X
				x = cnt

				; name(x,y)＆map(x,y)
				name(x,y,z,0) = name_buf_a_tile(x)
				notesel addons_list
				map(x,y,z,0) = notefind(name(x,y,z,0), 0)
	
					; 各種の地区の収容可能人数に加算
					if sdnl(addon_type, map(x,y,z,0), 0) = "low_density_residential" or sdnl(addon_type, map(x,y,z,0), 0) = "high_density_residential" {
						map_total_Residential_maximum_capacity += int(sdnl(addon_maximum_capacity, map(x,y,z,0), 0))
					}
					if sdnl(addon_type, map(x,y,z,0), 0) = "low_density_commercial" or sdnl(addon_type, map(x,y,z,0), 0) = "high_density_commercial" {
						map_total_Commercial_maximum_capacity += int(sdnl(addon_maximum_capacity, map(x,y,z,0), 0))
					}
					if sdnl(addon_type, map(x,y,z,0), 0) = "office" {
						map_total_Office_maximum_capacity += int(sdnl(addon_maximum_capacity, map(x,y,z,0), 0))
					}
					if sdnl(addon_type, map(x,y,z,0), 0) = "industrial" {
						map_total_Industrial_maximum_capacity += int(sdnl(addon_maximum_capacity, map(x,y,z,0), 0))
					}
					if sdnl(addon_type, map(x,y,z,0), 0) = "farm" {
						map_total_Farm_maximum_capacity += int(sdnl(addon_maximum_capacity, map(x,y,z,0), 0))
					}
					if sdnl(addon_type, map(x,y,z,0), 0) = "public" {
						map_total_Public_maximum_capacity += int(sdnl(addon_maximum_capacity, map(x,y,z,0), 0))
					}

				; name2(x,y)＆map2(x,y)
				name(x,y,z,1) = name2_buf_a_tile(x)
				if name(x,y,z,1) != "" {
					sdnsearch addon_name, ""+name2_buf_a_tile(x)+"", search_addon_number, tmp
					map(x,y,z,1) = notefind(name(x,y,z,1), 0)
				} else {
					map(x,y,z,1) = -1
				}

				; category(x,y)
				category(x,y,z,0) = category_buf_a_tile(x)

				; category_2(x,y)
				category(x,y,z,1) = category_2_buf_a_tile(x)

					; 建物の総数を取得
					if category(x,y,z,1) = "police_station"  : map_total_Police_Stations ++
					if category(x,y,z,1) = "fire_depertment" : map_total_Fire_Depertments ++
					if category(x,y,z,1) = "post_office"     : map_total_Post_Offices ++
					if category(x,y,z,1) = "education"       : map_total_Education ++
	
					if category(x,y,z,0) = "residential"     : map_total_Residential ++
					if category(x,y,z,0) = "commercial"      : map_total_Commercial ++
					if category(x,y,z,0) = "office"          : map_total_Office ++
					if category(x,y,z,0) = "industrial"      : map_total_Industrial ++
					if category(x,y,z,0) = "farm"            : map_total_Farm ++

				; category_3(x,y)
				category(x,y,z,2) = category_3_buf_a_tile(x)

				; obj_type(x,y)
				obj_type(x,y,z,0) = int(obj_type_buf_a_tile(x))

				; obj_type2(x,y)
				if obj_type2_buf_a_tile(x) != "" : obj_type(x,y,z,1) = int(obj_type2_buf_a_tile(x))

				; obj_dire(x,y)
				obj_dire(x,y,z,0) = int(obj_dire_buf_a_tile(x))

				; obj_dire2(x,y)
				if obj_dire2_buf_a_tile(x) != "" : obj_dire(x,y,z,1) = int(obj_dire2_buf_a_tile(x))

				; obj_serial_num(x,y)
				obj_serial_num(x,y,z) = int(obj_serial_num_buf_a_tile(x))

					; 最大値読み込み
					if obj_serial_num(x,y,z) > next_obj_serial_num : next_obj_serial_num = obj_serial_num(x,y,z)

				; obj_use_tiles_x(x,y)
				obj_use_tiles(x,y,z,0) = int(obj_use_tiles_x_buf_a_tile(x))

				; obj_use_tiles_y(x,y)
				obj_use_tiles(x,y,z,1) = int(obj_use_tiles_y_buf_a_tile(x))

				; obj_tiles_x(x,y)
				obj_tiles(x,y,z,0) = int(obj_tiles_x_buf_a_tile(x))

				; obj_tiles_y(x,y)
				obj_tiles(x,y,z,1) = int(obj_tiles_y_buf_a_tile(x))

				; residents(x,y)
				residents(x,y,z) = int(residents_buf_a_tile(x)) : map_Total_Population += residents(x,y,z)

				; workers_Commercial(x,y)
				workers(x,y,z) = int(workers_Commercial_buf_a_tile(x)) : map_Total_workers_Commercial += int(workers_Commercial_buf_a_tile(x))

				; workers_Office(x,y)
				workers(x,y,z) += int(workers_Office_buf_a_tile(x)) : map_Total_workers_Office += int(workers_Office_buf_a_tile(x))

				; workers_Industrial(x,y)
				workers(x,y,z) += int(workers_Industrial_buf_a_tile(x)) : map_Total_workers_Industrial += int(workers_Industrial_buf_a_tile(x))

				; workers_Farm(x,y)
				workers(x,y,z) += int(workers_Farm_buf_a_tile(x)) : map_Total_workers_Farm += int(workers_Farm_buf_a_tile(x))

				; workers_Public(x,y)
				workers(x,y,z) += int(workers_Public_buf_a_tile(x)) : map_Total_workers_Public += int(workers_Public_buf_a_tile(x))

				; students(x,y,z)
				students(x,y,z) = int(students_buf_a_tile(x))

				; land_price(x,y,z)
				land_price(x,y,z) = int(land_price_buf_a_tile(x))

				; crime_rate(x,y,z)
				crime_rate(x,y,z) = int(crime_rate_buf_a_tile(x))

				; education_rate(x,y,z)
				education_rate(x,y,z) = int(education_rate_buf_a_tile(x))

				; happiness(x,y,z)
				happiness(x,y,z) = int(happiness_buf_a_tile(x))

				; crop(x,y,z)
				crop(x,y,z) = crop_buf_a_tile(x)

				; crop_amount(x,y,z)
				crop_amount(x,y,z) = int(crop_amount_buf_a_tile(x))

				; age(x,y,z)
				age(x,y,z) = age_buf_a_tile(x)

				; gender(x,y,z)
				gender(x,y,z) = gender_buf_a_tile(x)

				; workplace(x,y,z)
				workplace(x,y,z) = workplace_buf_a_tile(x)

				; school(x,y,z)
				school(x,y,z) = school_buf_a_tile(x)

				; reservation(x,y,z)
				reservation(x,y,z) = reservation_buf_a_tile(x)

				; original_name(x,y,z)
				original_name(x,y,z) = original_name_buf_a_tile(x)
				
			loop
			
			await 1
		loop

		before_map_Total_Population = map_Total_Population

	chdir directory
	goto *initialization

/*-------------------------------------------アドオンの読み込み-----------------------------------*/
*load_addons
	//アドオンのリストを取得
	chdir "addons"
		
	dirlist2h 1, ','
	dirlist2 buf_addons, "*.adat*", 1, '\\'
						
	sdim filelist, buf_addons
	dirlist2r filelist
						
	notesel filelist
	total_addons = notemax
		
	addon_number = 0
		
	//アドオン用の疑似配列の宣言
	tmp = ""
	
	sdns addon_name, 0, 0, tmp, total_addons, 2							; アドオン名（英語名(x,0), 日本語名(x,1)）
	sdns addon_author, 0, 0, tmp, total_addons, 1						; アドオンの作者名
	sdns addon_summary, 0, 0, tmp, total_addons, 1						; アドオンの説明
	sdns addon_type, 0, 0, tmp, total_addons, 3							; アドオンのタイプ
	sdns addon_maker_version, 0, 0, tmp, total_addons, 1				; アドオンを作成したAddon Makerのアドオンバージョン
	sdns addon_maximum_capacity, 0, 0, tmp, total_addons, 1				; アドオンの収容人数
	sdns addon_land_price_influence, 0, 0, tmp, total_addons, 2			; アドオンが地価に及ぼす影響
	sdns addon_crime_rate_influence, 0, 0, tmp, total_addons, 2			; アドオンの犯罪率に及ぼす影響
	sdns addon_education_rate_influence, 0, 0, tmp, total_addons, 2		; アドオンの教育度に及ぼす影響
	sdns addon_crop, 0, 0, tmp, total_addons, 2							; アドオンが生産する生産物
	sdns addon_use_type_names, 0, 0, tmp, total_addons, 12				; アドオン内のタイプの名前
	sdns addon_build_limit, 0, 0, tmp, total_addons, 0					; アドオンの建設可能回数
	sdns addon_icon_number, 0, 0, tmp, total_addons, 1					; アドオンのアイコンのバッファ番号
	sdns3 addon_image, 0, 0, 0,tmp, total_addons, 12, 2					; アドオンで使う画像
	sdns3 addon_night_mask_image, 0, 0, 0,tmp, total_addons, 12, 2		; アドオンで使う夜間のマスク画像
	sdns3 addon_image_size, 0, 0, 0, tmp, total_addons, 12, 2			; アドオンで使う画像の全体のサイズ 
	sdns3 addon_dire_names, 0, 0, 0, tmp, total_addons, 12, 4			; アドオンのそれぞれのタイプ内の向きの名前
	sdns3 addon_size_x, 0, 0, 0, tmp, total_addons, 12, 4				; アドオンのサイズx
	sdns3 addon_size_y, 0, 0, 0, tmp, total_addons, 12, 4				; アドオンのサイズy
	sdns3 addon_chip_x, 0, 0, 0, tmp, total_addons, 12, 4				; アドオンが専有するマスの数x
	sdns3 addon_chip_y, 0, 0, 0, tmp, total_addons, 12, 4				; アドオンが専有するマスの数y
	sdns3 addon_top_left_x, 0, 0, 0, tmp, total_addons, 12, 4			; アドオンの絵が描写されている左上の座標x
	sdns3 addon_top_left_y, 0, 0, 0, tmp, total_addons, 12, 4			; アドオンの絵が描写されている左上の座標y
	sdns3 addon_bottom_right_x, 0, 0, 0, tmp, total_addons, 12, 4		; アドオンの絵が描写されている右下の座標x
	sdns3 addon_bottom_right_y, 0, 0, 0, tmp, total_addons, 12, 4		; アドオンの絵が描写されている右下の座標y

	//adat（アドオンデータファイル）と画像ファイル読み込み

	next_image_num = BEGIN_ADDON_BUFFER_ID

	repeat total_addons
		addon_number = cnt

		chdir ""+directory+"\\addons"

		; ファイルリストから読み込むadatファイル名を取得
		notesel filelist
		noteget adat_name, addon_number
		
		; 読み込むadatファイルの内容をadat_tmpに代入
		notesel adat_tmp
		noteload adat_name

		; adatファイル（アドオンの画像ファイル含む）があるディレクトリを取得
		addon_path = getpath(adat_name, 32)

		; ディレクトリ変更（あとで画像を読み込むため）
		chdir addon_path

		/*-------------------------------adatファイルの内容読み込み-------------------------------*/
		; addon_name（アドオン名）
			; 英語名
			addon_name_tmp = get_chapter(adat_tmp, "addon_name", " = \"", "\"")
			sdns addon_name, addon_number, 0, addon_name_tmp

			; addons_listに書き込み
			notesel addons_list
			noteadd addon_name_tmp, addon_number, 1

			; 日本語名
			tmp = get_chapter(adat_tmp, "addon_jp_name", " = \"", "\"")
			sdns addon_name, addon_number, 1, tmp

		; addon_author（アドオンの作者名）
			tmp = get_chapter(adat_tmp, "addon_author", " = \"", "\"")
			sdns addon_author, addon_number, 0,tmp

		; addon_summary（アドオンの説明）
			tmp = get_chapter(adat_tmp, "addon_summary", " = \"", "\"")
			sdns addon_summary, addon_number, 0, tmp

		; addon_icon_number（アドオンのアイコン画像のバッファ番号）
			tmp = get_chapter(adat_tmp, "addon_icon", " = \"", "\"")

			; アイコン画像読み込み
				celload tmp, next_image_num
				next_image_icon_num_str = str(next_image_num)
				sdns addon_icon_number, addon_number, 0, next_image_icon_num_str

				next_image_num ++

		; addon_type（アドオンのタイプ）
			tmp1 = get_chapter(adat_tmp, "addon_type", " = \"", "\"")
			sdns addon_type, addon_number, 0, tmp1
			tmp2 = get_chapter(adat_tmp, "addon_type_2", " = \"", "\"")
			sdns addon_type, addon_number, 1, tmp2
			tmp3 = get_chapter(adat_tmp, "addon_type_3", " = \"", "\"")
			sdns addon_type, addon_number, 2, tmp3

			; カテゴリ分け
			ct_done = 0
			
			if tmp1 = "Two_lane_road" or tmp1 = "Two_lane_Road" {
				notesel type_Two_lane_road : noteadd addon_name_tmp, -1
				notesel type_number_Two_lane_road : noteadd str(addon_number), -1
				ct_done = 1
			}
			if tmp1 = "Promenade" or tmp1 = "promenade" {
				notesel type_Promenade : noteadd addon_name_tmp, -1
				notesel type_number_Promenade : noteadd str(addon_number), -1
				ct_done = 1
			}
			if tmp1 = "Two_lane_railroad" or tmp1 = "Two_lane_Railroad" or tmp1 = "station" or tmp1 = "Station" {
				notesel type_Two_lane_railroad : noteadd addon_name_tmp, -1
				notesel type_number_Two_lane_railroad : noteadd str(addon_number), -1
				ct_done = 1
			}
			if tmp1 = "low_density_residential" or tmp1 = "low_density_Residential" or tmp1 = "Low_density_Residential" {
				notesel type_low_density_residential : noteadd addon_name_tmp, -1
				notesel type_number_low_density_residential : noteadd str(addon_number), -1
				ct_done = 1
			}
			if tmp1 = "high_density_residential" or tmp1 = "high_density_Residential" or tmp1 = "High_density_Residential" {
				notesel type_high_density_residential : noteadd addon_name_tmp, -1
				notesel type_number_high_density_residential : noteadd str(addon_number), -1
				ct_done = 1
			}
			if tmp1 = "low_density_commercial" or tmp1 = "low_density_Commercial" or tmp1 = "Low_density_Commercial" {
				notesel type_low_density_commercial : noteadd addon_name_tmp, -1
				notesel type_number_low_density_commercial : noteadd str(addon_number), -1
				ct_done = 1
			}
			if tmp1 = "high_density_commercial" or tmp1 = "high_density_Commercial" or tmp1 = "High_density_Commercial" {
				notesel type_high_density_commercial : noteadd addon_name_tmp, -1
				notesel type_number_high_density_commercial : noteadd str(addon_number), -1
				ct_done = 1
			}
			if tmp1 = "office" or tmp1 = "Office" {
				notesel type_office : noteadd addon_name_tmp, -1
				notesel type_number_office : noteadd str(addon_number), -1
				ct_done = 1
			}
			if tmp1 = "industrial" or tmp1 = "Industrial" {
				notesel type_industrial : noteadd addon_name_tmp, -1
				notesel type_number_industrial : noteadd str(addon_number), -1
				ct_done = 1
			}
			if tmp1 = "farm" or tmp1 = "Farm" {
				notesel type_farm : noteadd addon_name_tmp, -1
				notesel type_number_farm : noteadd str(addon_number), -1
				ct_done = 1
			}
			if tmp1 = "public" or tmp1 = "Public" {
				notesel type_public : noteadd addon_name_tmp, -1
				notesel type_number_public : noteadd str(addon_number), -1
				ct_done = 1
			}
			if tmp1 = "park" or tmp1 = "Park" {
				notesel type_park : noteadd addon_name_tmp, -1
				notesel type_number_park : noteadd str(addon_number), -1
				ct_done = 1
			}
			if tmp1 = "waterway" or tmp1 = "Waterway" or tmp1 = "port" or tmp1 = "Port" {
				notesel type_waterway : noteadd addon_name_tmp, -1
				notesel type_number_waterway : noteadd str(addon_number), -1
				ct_done = 1
			}
			if tmp1 = "tile" or tmp1 = "Tile" {
				tile_addon_number = addon_number
				ct_done = 1
			}
			
			if ct_done = 0 {
				error "A01 : アドオンをカテゴリ分けできません\n"+addon_name(cnt)+"を規定のカテゴリーに区別できないため、このアドオンは利用できません。\nアドオンファイル(*.adat)のaddon_type要素をご確認ください。"
			}

		; addon_maker_version（アドオンを作成したAddon Makerのバージョン）
			tmp = get_chapter(adat_tmp, "addon_maker_version", " = \"", "\"")
			sdns addon_maker_version, addon_number, 0, tmp

		; addon_maximum_capacity（アドオンの収容人数）
			tmp = get_chapter(adat_tmp, "maximum_capacity", " = \"", "\"")
			sdns addon_maximum_capacity, addon_number, 0, tmp

		; addon_land_price_influence（アドオンが地価に及ぼす影響）
			tmp = get_chapter(adat_tmp, "land_price_influence", " = \"", "\"")
			sdns addon_land_price_influence, addon_number, 0, tmp

		; addon_land_price_influence_grid（アドオンの設置により地価が影響する範囲）
			tmp = get_chapter(adat_tmp, "land_price_influence_grid", " = \"", "\"")
			sdns addon_land_price_influence, addon_number, 1, tmp

		; addon_crime_rate_influence（アドオンが犯罪率に及ぼす影響）
			tmp = get_chapter(adat_tmp, "crime_rate_influence", " = \"", "\"")
			sdns addon_crime_rate_influence, addon_number, 0, tmp

		; addon_crime_rate_influence_grid（アドオンの設置により犯罪率が影響する範囲）
			tmp = get_chapter(adat_tmp, "crime_rate_influence_grid", " = \"", "\"")
			sdns addon_crime_rate_influence, addon_number, 1, tmp

		; addon_education_rate_influence（アドオンが教育度に及ぼす影響）
			tmp = get_chapter(adat_tmp, "education_rate_influence", " = \"", "\"")
			sdns addon_education_rate_influence, addon_number, 0, tmp

		; addon_education_rate_influence_grid（アドオンの設置により教育度が影響する範囲）
			tmp = get_chapter(adat_tmp, "education_rate_influence_grid", " = \"", "\"")
			sdns addon_education_rate_influence, addon_number, 1, tmp

		; addon_crop（アドオンが生産する生産物名）
			tmp = get_chapter(adat_tmp, "addon_crop", " = \"", "\"")
			sdns addon_crop, addon_number, 0, tmp
			tmp = get_chapter(adat_tmp, "addon_crop_amount", " = \"", "\"")
			sdns addon_crop, addon_number, 1, tmp

		; addon_use_type_names（アドオン内のタイプの名前）
			tmp = get_chapter(adat_tmp, "use_types", " = \"", "\"")

			sdim tmps, 32, 12
			split tmp, ", ", tmps : stat_tmp = stat

			i = 0

			repeat stat_tmp
				sdns addon_use_types_name, addon_number, cnt, tmps(cnt), total_addons, 12
				
				if i > 12 {
					break
				}
			loop

		; addon_crop（アドオンが生産する生産物名）
			tmp = get_chapter(adat_tmp, "build_limit", " = \"", "\"")
			sdns addon_build_limit, addon_number, 0, tmp

		; 各タイプの内容を切り抜く
			total_types = sdnsize(addon_use_types_name, addon_number)
			
			repeat total_types
				searching_type_name = sdnl(addon_use_types_name, addon_number, cnt)
				addon_a_type_tmp = get_chapter(adat_tmp, searching_type_name, " {", "};")

				tcnt = cnt

				; addon_dire_names（アドオンのそれぞれのタイプ内の向きの名前）&各方向の内容を切り抜く
					addon_direction_tmp = get_chapter(addon_a_type_tmp, "direction", " = \"", "\"")
					split addon_direction_tmp, ", ", addon_directions : split_stat = stat

					repeat split_stat
						sdns3 addon_dire_names, addon_number, tcnt, cnt, addon_directions(cnt), total_addons, 12, 4

						addon_a_direction_tmp = get_chapter(addon_a_type_tmp, ""+addon_directions(cnt)+" ", "{", "}")

						; addon_size_x, addon_size_y（アドオンのサイズ）
							addon_size_tmp = get_chapter(addon_a_direction_tmp, "size_x", " = \"", "\"")
							sdns3 addon_size_x, addon_number, tcnt, cnt, addon_size_tmp, total_addons, 12, 4

							addon_size_tmp = get_chapter(addon_a_direction_tmp, "size_y", " = \"", "\"")
							sdns3 addon_size_y, addon_number, tcnt, cnt, addon_size_tmp, total_addons, 12, 4

						; addon_chip_x, addon_chip_y（アドオンが専有するマスの数）
							addon_chip_tmp = get_chapter(addon_a_direction_tmp, "chip_x", " = \"", "\"")
							sdns3 addon_chip_x, addon_number, tcnt, cnt, addon_chip_tmp, total_addons, 12, 4

							addon_chip_tmp = get_chapter(addon_a_direction_tmp, "chip_y", " = \"", "\"")
							sdns3 addon_chip_y, addon_number, tcnt, cnt, addon_chip_tmp, total_addons, 12, 4

						; addon_top_left_x, addon_top_left_y（アドオンの絵が描写されている左上の座標）
							addon_top_left_tmp = get_chapter(addon_a_direction_tmp, "top_left_x", " = \"", "\"")
							sdns3 addon_top_left_x, addon_number, tcnt, cnt, addon_top_left_tmp, total_addons, 12, 4

							addon_top_left_tmp = get_chapter(addon_a_direction_tmp, "top_left_y", " = \"", "\"")
							sdns3 addon_top_left_y, addon_number, tcnt, cnt, addon_top_left_tmp, total_addons, 12, 4

						; addon_bottom_right_x, addon_bottom_right_y（アドオンの絵が描写されている右下の座標）
							addon_bottom_right_tmp = get_chapter(addon_a_direction_tmp, "bottom_right_x", " = \"", "\"")
							sdns3 addon_bottom_right_x, addon_number, tcnt, cnt, addon_bottom_right_tmp, total_addons, 12, 4

							addon_bottom_right_tmp = get_chapter(addon_a_direction_tmp, "bottom_right_y", " = \"", "\"")
							sdns3 addon_bottom_right_y, addon_number, tcnt, cnt, addon_bottom_right_tmp, total_addons, 12, 4
					loop

				; addon_image（アドオンで使う画像）
					load_image = get_chapter(addon_a_type_tmp, "image", " = \"", "\"")
					sdns3 addon_image, addon_number, tcnt, 0, load_image, total_addons, 12, 2

				; addon_night_mask_image（アドオンで使う夜間のマスク画像）
					load_night_mask_image = get_chapter(addon_a_type_tmp, "night_mask", " = \"", "\"")
					sdns3 addon_night_mask_image, addon_number, tcnt, 0, load_image, total_addons, 12, 2


				/*-----------------------------アドオン画像の読み込み-----------------------------*/
				; 通常時
					exist load_image
				
					if strsize = -1 {
						error "A02 : アドオンの画像ファイルが見つかりません\n"+sdnl(addon_name, addon_number, 0)+"で利用する"+load_image+"が見つかりません。\nアドオンファイル(*.adat)と同じ場所に画像があることをご確認ください。"
					}
				
					celload load_image, next_image_num
					next_image_num_str = str(next_image_num)
					sdns3 addon_image, addon_number, tcnt, 1, next_image_num_str, total_addons, 12, 2

					; 画像全体のサイズを取得してaddon_image_sizeに保存
					gsel next_image_num
					imgx = ginfo(12) : imgy = ginfo(13)

					imgx_str = str(imgx)
					imgy_str = str(imgy)
					
					sdns3 addon_image_size, addon_number, tcnt, 0, imgx_str, total_addons, 12, 2
					sdns3 addon_image_size, addon_number, tcnt, 1, imgy_str, total_addons, 12, 2
				
					next_image_num ++
			
				; 夜間バージョン
					if load_night_mask_image != "" {
						exist load_night_mask_image
				
						if strsize = -1 {
							error "A03 : アドオンの夜間マスク画像ファイルが見つかりません\n"+sdnl(addon_name, addon_number, 0)+"で利用する"+load_night_mask_image+"が見つかりません。\nアドオンファイル(*.adat)と同じ場所に画像があることをご確認ください。"
						}
				
						celload load_night_mask_image, 99
					}
			
					buffer next_image_num, imgx, imgy
						pos 0, 0 : gcopy next_image_num-1, 0, 0, imgx, imgy
			
						color 0, 0, 0 : sboxf 200, 0, 0, imgx, imgy
			
						if load_night_mask_image != "" {
							gmode 2
							pos 0, 0 : gcopy 99, 0, 0, imgx, imgy
						}
			
					next_image_num_str = str(next_image_num)
					sdns3 addon_night_mask_image, addon_number, tcnt, 1, next_image_num_str, total_addons, 12, 2
			
					next_image_num ++
			
				; 夕方バージョン
					buffer next_image_num, imgx, imgy
						pos 0, 0 : gcopy next_image_num-2, 0, 0, imgx, imgy
			
						color 0, 0, 0 : sboxf 128, 0, 0, imgx, imgy
			
						if load_night_mask_image != "" and rnd(2) = 1 {
							gmode 2
							pos 0, 0 : gcopy 99, 0, 0, imgx, imgy
						}
			
					next_image_num ++
			
				; 停電バージョン
					buffer 99, imgx/4, imgy/4
						pos 0, 0 : gzoom imgx/4, imgy/4, next_image_num-3, 0, 0, imgx, imgy
						
					buffer next_image_num, imgx, imgy
						if config_Pacriman_Mode = 0 {
							pos 0, 0 : gcopy next_image_num-3, 0, 0, imgx, imgy
						} else {
							pos 0, 0 : gzoom imgx, imgy, 99, 0, 0, imgx/4, imgy/4
						}
			
						color 0, 0, 0 : sboxf 200, 0, 0, imgx, imgy
			
					next_image_num ++
				
				gsel 0
				
			loop
	loop

	return

*new_map
	/*----------------------------------新しいマップの作成----------------------------------------*/
	//マップ設定
	screen 1, 400, 300
	
	gsel 1
	title "新規マップ作成"
	
	onclick gosub *new_map_setting_onclick
	
	color 95, 95, 95 : boxf
	
	color 255, 255, 255
	font config_SystemFont, 16
	
	//都市名(City_Name)
		pos 10, 10 : mes "都市名"
		
		objsize 280, 20
		pos 80, 10 : input map_City_Name
	
	//市長名(Mayor_Name)
		pos 10, 40 : mes "市長名"
		
		objsize 280, 20
		pos 80, 40 : input map_Mayor_Name
	
	//天候の変化(Set_Change_Weather)
		if map_Set_Change_Weather = 0 {
			pos 10, 73 : gcopy 14, 0, 0, 16, 16
		} else {
			pos 10, 73 : gcopy 14, 0, 16, 16, 16
		}
		
		pos 35, 70 : mes "天候の変化"
	
	//OKボタン
		color 255, 255, 255 : boxf 150, 260, 250, 290
		color 95, 95, 95 : boxf 151, 261, 249, 289
	
		color 255, 255, 255 : font config_SystemFont, 20
		cmes "OK", 150, 260, 250, 290
		
	stop

*new_map_setting_onclick
	gsel 1
	
	from_setting_onclick = 1
	
	//天候の変化(Set_Change_Weather)
		//チェックボックス
			if click_range(10, 73, 10+16, 73+16) = 1 {
				if map_Set_Change_Weather = 0 {
					map_Set_Change_Weather = 1
				} else {
					map_Set_Change_Weather = 0
				}
			}
	
	//OKボタン
		if click_range(150, 260, 250, 290) = 1 {
	
		// マップ作成時の初期設定
			gsel 1, -1
			gsel 0

			onclick 0
			
			goto *new_map_preparation
		}
	
	clrobj
	
	goto *new_map

*new_map_preparation
	//マップデータ初期化
	map_Saved_Version = about_release_number
	
	map_time_Year = gettime(0)
	map_time_Month = gettime(1)
	map_time_Date = gettime(3)
	map_time_Hour = 0
	map_time_Minutes = 0
	
	map_demand_Residential = 100
	map_demand_Commercial = 0
	map_demand_Office = 0
	map_demand_Industrial = 0
	map_demand_Farm = 0
			
	map_Money = 50000
	
	map_temperature = 0
	map_Set_Dark_on_Night = 1
	
	map_budget_of_Police = 100
	map_budget_of_Fire_Depertment = 100
	map_budget_of_Post_Office = 100
	map_budget_of_Education = 100

	map_tax_of_Residential = 100
	map_tax_of_Commercial = 100
	map_tax_of_Office = 100
	map_tax_of_Industrial = 100
	map_tax_of_Farm = 100

	not_displayed_news_new_map = 1

	z = 0

	gosub *load_addons

	notesel addons_list
	tile_addon_number = notefind ("tile_greenfield", 0)
	
	repeat MAPSIZE_X
		x = cnt

		repeat MAPSIZE_Y
			y = cnt

			name(x,y,z,0) = "tile_greenfield"
			name(x,y,z,1) = ""
			
			map(x,y,z,0) = tile_addon_number
			map(x,y,z,1) = -1

			category(x,y,z,0) = "tile"
			category(x,y,z,1) = ""
			category(x,y,z,2) = ""

			obj_type(x,y,z,0) = 0
			obj_type(x,y,z,1) = 0

			obj_dire(x,y,z,0) = 0
			obj_dire(x,y,z,1) = 0

			obj_serial_num(x,y,z) = 0

			obj_use_tiles(x,y,z,0) = 0
			obj_use_tiles(x,y,z,1) = 0

			obj_tiles(x,y,z,0) = 0
			obj_tiles(x,y,z,1) = 0

			residents(x,y,z) = 0
			workers(x,y,z) = 0
			students(x,y,z) = 0

			land_price(x,y,z) = 20
			crime_rate(x,y,z) = 0
			education_rate(x,y,z) = 0
			happiness(x,y,z) = 0

			crop(x,y,z) = ""
			crop_amount(x,y,z) = 0

			age(x,y,z) = ""
			gender(x,y,z) = ""

			workplace(x,y,z) = ""
			school(x,y,z) = ""

			reservation(x,y,z) = "none"

			original_name(x,y,z) = ""
		loop
	loop

	chdir directory
	goto *initialization


*initialization
	/*-----------------------------------各変数の初期化-------------------------------------------*/
	camx=-300 : camy=-150				; カメラの位置
	menu_line_y = 400					; メニューとの境界線
	cursor_mode = "normal"				; カーソルのモード
	pointer_icon = -1					; ポインタのアイコン（-1で四角形）
	before_mousex = -1
	before_mousey = -1
	before_camx = 0
	before_camy = 0
	put_addon_name = "tile_greenfield"
	stat_mode = ""
	nx = 0
	ny = 0
	showing_detail_x = -1
	showing_detail_y = -1
	speed = 2
	pause = 0
	before_windowx = -1
	before_windowy = -1
	opening_menu = ""

	; 初期カメラ位置
	intial_camx = camx
	intial_camy = camy

	; 雨粒の初期位置
	randomize
	repeat 50
		rain(cnt) = 0
		rain_x(cnt) = rnd(windowx) : rain_y(cnt) = -rnd(windowy)
	loop

	gosub *get_coordinates
	goto *get_addon_drow_position

*get_coordinates
	//表示範囲の座標を取得
			
	; MAPSIZE_X, MAPSIZE_Yのうち大きい方の値
		if MAPSIZE_X >= MAPSIZE_Y {
			mapsize_max = MAPSIZE_X
		} else {
			mapsize_max = MAPSIZE_Y
		}

	; 画面中央の座標
		x_=(windowx/2)+camx-chip_size/2
		y_=(windowy/2)+camy
		middle_x=(y_+x_/2)/(chip_size/2)
		middle_y=(-x_+y_*2)/chip_size
			
	; 画面中央を中心とした描写範囲
		if windowx != before_windowx or windowy != before_windowy {
			draw_area = (sqrt(powf(windowx, 2)+powf(windowy, 2))/sqrt(powf(CHIP_SIZE/2, 2)+powf(CHIP_SIZE/4, 2)))
		}

		before_windowx = windowx
		before_windowy = windowy

	; 初期値x, y, z
		intial_x = middle_x-int(draw_area)/2 - 3
		intial_y = middle_y-int(draw_area)/2 - 3
		intial_z = 0

		if intial_x < 0 {
			intial_x = 0
		}
		if intial_y < 0 {
			intial_y = 0
		}
		if intial_z < 0 {
			intial_z = 0
		}

	; 初期値mx, my, mz（カーソル位置）
		mx = intial_x
		my = intial_y
		mz = intial_z

	return

*get_addon_drow_position
	//各マスのアドオンの初期カメラ位置での表示位置を取得
	dim addons_drow_position_x, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z, 2
	dim addons_drow_position_y, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z, 2

	dim addons_top_left_x, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z, 2
	dim addons_top_left_y, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z, 2
	
	dim addons_size_x, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z, 2
	dim addons_size_y, MAPSIZE_X, MAPSIZE_Y, MAPSIZE_Z, 2
	
	sz = 0

	repeat MAPSIZE_X
		sx = cnt

		repeat MAPSIZE_Y
			sy = cnt

			*get_addon_drow_position_new

			if map(sx,sy,sz,1) = -1 : rmax = 1 : else : rmax = 2
			repeat rmax
				; アドオン画像の左上の座標
				top_left_x = int(sdnl3(addon_top_left_x, map(sx,sy,sz,cnt), obj_type(sx,sy,sz,cnt), obj_dire(sx,sy,sz,cnt)))
				top_left_y = int(sdnl3(addon_top_left_y, map(sx,sy,sz,cnt), obj_type(sx,sy,sz,cnt), obj_dire(sx,sy,sz,cnt)))

				; アドオン画像の右下の座標
				bottom_right_x = int(sdnl3(addon_bottom_right_x, map(sx,sy,sz,cnt), obj_type(sx,sy,sz,cnt), obj_dire(sx,sy,sz,cnt)))
				bottom_right_y = int(sdnl3(addon_bottom_right_y, map(sx,sy,sz,cnt), obj_type(sx,sy,sz,cnt), obj_dire(sx,sy,sz,cnt)))

				; アドオンのサイズ
				size_x = int(sdnl3(addon_size_x, map(sx,sy,sz,cnt), obj_type(sx,sy,sz,cnt), obj_dire(sx,sy,sz,cnt)))
				size_y = int(sdnl3(addon_size_y, map(sx,sy,sz,cnt), obj_type(sx,sy,sz,cnt), obj_dire(sx,sy,sz,cnt)))

				; アドオンが占有するマスの数
				chip_x = int(sdnl3(addon_chip_x, map(sx,sy,sz,cnt), obj_type(sx,sy,sz,cnt), obj_dire(sx,sy,sz,cnt)))
				chip_y = int(sdnl3(addon_chip_y, map(sx,sy,sz,cnt), obj_type(sx,sy,sz,cnt), obj_dire(sx,sy,sz,cnt)))

				; 相対的な座標の算出
				position_x = sx * CHIP_SIZE/2 - sy * CHIP_SIZE/2 - intial_camx
				position_y = sy * CHIP_SIZE/4 + sx * CHIP_SIZE/4 - intial_camy

				; アドオンごとの例外的な座標のズレを算出
				px = 0
				py = 0

				if obj_dire(sx,sy,sz,cnt) = 1 or obj_dire(sx,sy,sz,cnt) = 3 {
					originally_top_of_a_dire_x = size_x / 2
				} else {
					originally_top_of_a_dire_x = 0
				}
				
				originally_top_of_a_dire_y = size_y * int(obj_dire(sx,sy,sz,cnt)/2)

				if originally_top_of_a_dire_x >= sdnl3(addon_image_size, map(sx,sy,sz,cnt), obj_type(sx,sy,sz,cnt), 0) or originally_top_of_a_dire_y >= sdnl3(addon_image_size, map(sx,sy,sz,cnt), obj_type(sx,sy,sz,cnt), 1) {
					originally_top_of_a_dire_y = 0
				}
				
				py += top_left_y - originally_top_of_a_dire_y + CHIP_SIZE/4 * (int(sdnl3(addon_chip_x, map(sx,sy,sz,cnt), obj_type(sx,sy,sz,cnt), obj_dire(sx,sy,sz,cnt))) - 1)

				if size_y > 64 {
					py -= size_y - CHIP_SIZE
				}

				; 左上からの占有するマスの数
				obj_use_tiles_from_left_top_x = 0
				obj_use_tiles_from_left_top_y = 0

				if obj_use_tiles(sx,sy,sz,0) > 0 and obj_use_tiles(sx,sy,sz,1) <= 0 {
					if obj_dire(sx,sy,sz,cnt) = 0 {
						obj_use_tiles_from_left_top_x = obj_tiles(sx,sy,sz,0)
						obj_use_tiles_from_left_top_y = obj_tiles(sx,sy,sz,1)

						addons_drow_position_x(sx,sy,sz,cnt) = position_x + px + CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0)
						addons_drow_position_y(sx,sy,sz,cnt) = position_y + py - CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * obj_tiles(sx,sy,sz,0)
	
						addons_top_left_x(sx,sy,sz,cnt) = top_left_x + (chip_y - 1 - obj_use_tiles_from_left_top_y) * CHIP_SIZE
						addons_top_left_y(sx,sy,sz,cnt) = top_left_y
	
						addons_size_x(sx,sy,sz,cnt) = size_x - obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_size_y(sx,sy,sz,cnt) = size_y
					}
					if obj_dire(sx,sy,sz,cnt) = 0 or obj_dire(sx,sy,sz,cnt) = 1 {
						obj_use_tiles_from_left_top_x = obj_tiles(sx,sy,sz,0)
						obj_use_tiles_from_left_top_y = obj_tiles(sx,sy,sz,1)

						addons_drow_position_x(sx,sy,sz,cnt) = position_x + px + CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0)
						addons_drow_position_y(sx,sy,sz,cnt) = position_y + py - CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * obj_tiles(sx,sy,sz,0)
	
						addons_top_left_x(sx,sy,sz,cnt) = top_left_x + obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_top_left_y(sx,sy,sz,cnt) = top_left_y
	
						addons_size_x(sx,sy,sz,cnt) = size_x - obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_size_y(sx,sy,sz,cnt) = size_y - obj_use_tiles_from_left_top_y * CHIP_SIZE/4
					}
					if obj_dire(sx,sy,sz,cnt) = 2 {
						obj_use_tiles_from_left_top_x = obj_tiles(sx,sy,sz,0)
						obj_use_tiles_from_left_top_y = obj_use_tiles(sx,sy,sz,1) - 1 - abs(obj_tiles(sx,sy,sz,1))

						addons_drow_position_x(sx,sy,sz,cnt) = position_x + px + CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0)
						addons_drow_position_y(sx,sy,sz,cnt) = position_y + py - CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * obj_tiles(sx,sy,sz,0)
	
						addons_top_left_x(sx,sy,sz,cnt) = top_left_x + obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_top_left_y(sx,sy,sz,cnt) = top_left_y
	
						addons_size_x(sx,sy,sz,cnt) = size_x - obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_size_y(sx,sy,sz,cnt) = size_y - obj_use_tiles_from_left_top_y * CHIP_SIZE/4
					}
					if obj_dire(sx,sy,sz,cnt) = 3 {
						obj_use_tiles_from_left_top_x = obj_use_tiles(sx,sy,sz,0) - 1 - abs(obj_tiles(sx,sy,sz,0))
						obj_use_tiles_from_left_top_y = obj_tiles(sx,sy,sz,1)

						addons_drow_position_x(sx,sy,sz,cnt) = position_x + px + CHIP_SIZE/2 * (obj_use_tiles(sx,sy,sz,0) - 1 - abs(obj_tiles(sx,sy,sz,0)))
						addons_drow_position_y(sx,sy,sz,cnt) = position_y + py - CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * obj_tiles(sx,sy,sz,0) - CHIP_SIZE/4
	
						addons_top_left_x(sx,sy,sz,cnt) = top_left_x + obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_top_left_y(sx,sy,sz,cnt) = top_left_y
	
						addons_size_x(sx,sy,sz,cnt) = size_x - obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_size_y(sx,sy,sz,cnt) = size_y - obj_use_tiles_from_left_top_y * CHIP_SIZE/4
					}
					
				} else : if obj_use_tiles(sx,sy,sz,0) <= 0 and obj_use_tiles(sx,sy,sz,1) > 0 {
					if obj_dire(sx,sy,sz,cnt) = 0 {
						obj_use_tiles_from_left_top_x = obj_tiles(sx,sy,sz,0)
						obj_use_tiles_from_left_top_y = obj_tiles(sx,sy,sz,1)

						addons_drow_position_x(sx,sy,sz,cnt) = position_x + px + CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + (chip_y - 1 - obj_use_tiles_from_left_top_y) * CHIP_SIZE/2
						addons_drow_position_y(sx,sy,sz,cnt) = position_y + py - CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * obj_tiles(sx,sy,sz,0) + (chip_y - 1 - obj_use_tiles_from_left_top_y) * CHIP_SIZE/4
						
						addons_top_left_x(sx,sy,sz,cnt) = top_left_x + (chip_y - 1 - obj_use_tiles_from_left_top_y) * CHIP_SIZE
						addons_top_left_y(sx,sy,sz,cnt) = top_left_y
	
						addons_size_x(sx,sy,sz,cnt) = size_x - (chip_y - 1 - obj_use_tiles_from_left_top_y) * CHIP_SIZE
						addons_size_y(sx,sy,sz,cnt) = size_y
					}
					if obj_dire(sx,sy,sz,cnt) = 1 {
						obj_use_tiles_from_left_top_x = obj_tiles(sx,sy,sz,0)
						obj_use_tiles_from_left_top_y = obj_tiles(sx,sy,sz,1)

						addons_drow_position_x(sx,sy,sz,cnt) = position_x + px + CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/2 * (obj_use_tiles(sx,sy,sz,1) - 1 - obj_tiles(sx,sy,sz,1))
						addons_drow_position_y(sx,sy,sz,cnt) = position_y + py - CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * (obj_use_tiles(sx,sy,sz,1) - 1 - obj_tiles(sx,sy,sz,1))
						
						addons_top_left_x(sx,sy,sz,cnt) = top_left_x + (obj_use_tiles(sx,sy,sz,1) - 1 - obj_use_tiles_from_left_top_y) * CHIP_SIZE
						addons_top_left_y(sx,sy,sz,cnt) = top_left_y
	
						addons_size_x(sx,sy,sz,cnt) = size_x - obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_size_y(sx,sy,sz,cnt) = size_y - obj_use_tiles_from_left_top_y * CHIP_SIZE/4 + obj_use_tiles_from_left_top_y * CHIP_SIZE/4
					}
					if obj_dire(sx,sy,sz,cnt) = 2 {
						obj_use_tiles_from_left_top_x = obj_tiles(sx,sy,sz,0)
						obj_use_tiles_from_left_top_y = obj_use_tiles(sx,sy,sz,1) - 1 - abs(obj_tiles(sx,sy,sz,1))

						addons_drow_position_x(sx,sy,sz,cnt) = position_x + px + CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/2 * abs(obj_tiles(sx,sy,sz,1))
						addons_drow_position_y(sx,sy,sz,cnt) = position_y + py - CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * abs(obj_tiles(sx,sy,sz,1))
	
						addons_top_left_x(sx,sy,sz,cnt) = top_left_x + (obj_use_tiles(sx,sy,sz,1) - 1 - obj_use_tiles_from_left_top_y) * CHIP_SIZE
						addons_top_left_y(sx,sy,sz,cnt) = top_left_y
	
						addons_size_x(sx,sy,sz,cnt) = size_x - abs(obj_tiles(sx,sy,sz,1)) * CHIP_SIZE
						addons_size_y(sx,sy,sz,cnt) = size_y - obj_use_tiles_from_left_top_y * CHIP_SIZE/4 + obj_use_tiles_from_left_top_y * CHIP_SIZE
					}
					if obj_dire(sx,sy,sz,cnt) = 3 {
						obj_use_tiles_from_left_top_x = obj_tiles(sx,sy,sz,0)
						obj_use_tiles_from_left_top_y = obj_tiles(sx,sy,sz,1)

						addons_drow_position_x(sx,sy,sz,cnt) = position_x + px + CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + (obj_use_tiles(sx,sy,sz,1) - 1 - abs(obj_tiles(sx,sy,sz,1))) * CHIP_SIZE/2
						addons_drow_position_y(sx,sy,sz,cnt) = position_y + py - CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * obj_tiles(sx,sy,sz,0) + (obj_use_tiles(sx,sy,sz,1) - 1 - abs(obj_tiles(sx,sy,sz,1))) * CHIP_SIZE/4
						
						addons_top_left_x(sx,sy,sz,cnt) = top_left_x + (obj_use_tiles(sx,sy,sz,1) - 1 - obj_use_tiles_from_left_top_y) * CHIP_SIZE
						addons_top_left_y(sx,sy,sz,cnt) = top_left_y
	
						addons_size_x(sx,sy,sz,cnt) = size_x - obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_size_y(sx,sy,sz,cnt) = size_y - obj_use_tiles_from_left_top_y * CHIP_SIZE/4 + obj_use_tiles_from_left_top_y * CHIP_SIZE/2
					}

				} else : if obj_use_tiles(sx,sy,sz,0) > 0 and obj_use_tiles(sx,sy,sz,1) > 0 {
					if obj_dire(sx,sy,sz,cnt) = 0 {
						obj_use_tiles_from_left_top_x = obj_tiles(sx,sy,sz,0)
						obj_use_tiles_from_left_top_y = obj_tiles(sx,sy,sz,1)

						addons_drow_position_x(sx,sy,sz,cnt) = position_x + px + CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0)
						addons_drow_position_y(sx,sy,sz,cnt) = position_y + py - CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * obj_tiles(sx,sy,sz,0)
						if obj_use_tiles_from_left_top_y = 0 : addons_drow_position_y(sx,sy,sz,cnt) = -100
	
						addons_top_left_x(sx,sy,sz,cnt) = top_left_x + obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_top_left_y(sx,sy,sz,cnt) = top_left_y
	
						addons_size_x(sx,sy,sz,cnt) = size_x - obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_size_y(sx,sy,sz,cnt) = size_y
					}
					if obj_dire(sx,sy,sz,cnt) = 1 {
						obj_use_tiles_from_left_top_x = obj_tiles(sx,sy,sz,0)
						obj_use_tiles_from_left_top_y = obj_tiles(sx,sy,sz,1)

						addons_drow_position_x(sx,sy,sz,cnt) = position_x + px + CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0)
						addons_drow_position_y(sx,sy,sz,cnt) = position_y + py - CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * obj_tiles(sx,sy,sz,0)
						if obj_use_tiles_from_left_top_y = 0 : addons_drow_position_y(sx,sy,sz,cnt) = -100
	
						addons_top_left_x(sx,sy,sz,cnt) = top_left_x + obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_top_left_y(sx,sy,sz,cnt) = top_left_y
	
						addons_size_x(sx,sy,sz,cnt) = size_x - obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_size_y(sx,sy,sz,cnt) = size_y
					}
					if obj_dire(sx,sy,sz,cnt) = 2 {
						obj_use_tiles_from_left_top_x = obj_tiles(sx,sy,sz,0)
						obj_use_tiles_from_left_top_y = obj_tiles(sx,sy,sz,1)

						addons_drow_position_x(sx,sy,sz,cnt) = position_x + px + CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) - CHIP_SIZE/2
						addons_drow_position_y(sx,sy,sz,cnt) = position_y + py - CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4
						if obj_use_tiles_from_left_top_y = 0 : addons_drow_position_y(sx,sy,sz,cnt) = -100
	
						addons_top_left_x(sx,sy,sz,cnt) = top_left_x + obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_top_left_y(sx,sy,sz,cnt) = top_left_y
	
						addons_size_x(sx,sy,sz,cnt) = size_x - obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_size_y(sx,sy,sz,cnt) = size_y
					}
					if obj_dire(sx,sy,sz,cnt) = 3 {
						obj_use_tiles_from_left_top_x = obj_use_tiles(sx,sy,sz,0) - 1 - abs(obj_tiles(sx,sy,sz,0))
						obj_use_tiles_from_left_top_y = obj_use_tiles(sx,sy,sz,1) - 1 - abs(obj_tiles(sx,sy,sz,1))

						addons_drow_position_x(sx,sy,sz,cnt) = position_x + px + CHIP_SIZE/2 * (obj_use_tiles(sx,sy,sz,0) - 1 - abs(obj_tiles(sx,sy,sz,0)))
						addons_drow_position_y(sx,sy,sz,cnt) = position_y + py - CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * obj_tiles(sx,sy,sz,0) - CHIP_SIZE/4
						if obj_use_tiles_from_left_top_y = 1 : addons_drow_position_y(sx,sy,sz,cnt) = -100
						
						addons_top_left_x(sx,sy,sz,cnt) = top_left_x + obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_top_left_y(sx,sy,sz,cnt) = top_left_y + obj_use_tiles_from_left_top_y * CHIP_SIZE/2
	
						addons_size_x(sx,sy,sz,cnt) = size_x - obj_use_tiles_from_left_top_x * CHIP_SIZE
						addons_size_y(sx,sy,sz,cnt) = size_y - obj_use_tiles_from_left_top_y * CHIP_SIZE/4
					}
					
				} else {
					addons_drow_position_x(sx,sy,sz,cnt) = position_x + px + CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0)
					addons_drow_position_y(sx,sy,sz,cnt) = position_y + py - CHIP_SIZE/2 * obj_tiles(sx,sy,sz,0) + CHIP_SIZE/4 * obj_tiles(sx,sy,sz,0)
					
					addons_top_left_x(sx,sy,sz,cnt) = top_left_x
					addons_top_left_y(sx,sy,sz,cnt) = top_left_y

					addons_size_x(sx,sy,sz,cnt) = size_x - obj_use_tiles_from_left_top_x * CHIP_SIZE
					addons_size_y(sx,sy,sz,cnt) = size_y - obj_use_tiles_from_left_top_y * CHIP_SIZE/4

					; タイルのときだけ例外処理
					if category(sx,sy,sz,cnt) = "tile" {
						if map_time_Month = 12 or (map_time_Month >= 1 and map_time_Month <= 2) : addons_top_left_y(sx,sy,sz,cnt) = int(sdnl3(addon_top_left_y, map(sx,sy,sz,cnt), element2(tile_addon_number,addon_use_types_name,"snow"), 0))
						if map_time_Month >= 3 and map_time_Month <= 9 : addons_top_left_y(sx,sy,sz,cnt) = int(sdnl3(addon_top_left_y, map(sx,sy,sz,cnt), element2(tile_addon_number,addon_use_types_name,"null"), 0))
						if map_time_Month >= 10 and map_time_Month <= 11 : addons_top_left_y(sx,sy,sz,cnt) = int(sdnl3(addon_top_left_y, map(sx,sy,sz,cnt), element2(tile_addon_number,addon_use_types_name,"autumn"), 0))
					}
				}

				if addons_size_x(sx,sy,sz,cnt) > 64 {
					addons_size_x(sx,sy,sz,cnt) = 64
				}
			loop
			if from_build = 1 {
				from_build = 0
				return
			}
		loop
	loop

*pacriman_preparating
	/*-----------------------------------Pacrimanの準備-------------------------------------------*/
	if config_Pacriman_Mode = 0 : goto *main

	; パックリマンの初期位置
	pacriman_position_x = -1 : pacriman_position_y = -1
	repeat mapsize_x
		x = cnt
		repeat mapsize_y
			y = cnt

			if category(x,y,z) = "road" {
				pacriman_position_x = x : pacriman_position_y = y
				break_ = 1 : break
			}
		loop
		if break_ = 1 : break
	loop

	break_ = 0

	if pacriman_position_x = -1 and pacriman_position_y = -1 {
		dialog "道路が引かれていないマップではPacrimanをプレイすることはできません。\nほかのマップを選んでね"
		goto *menu
	}
	
	pacriman_direction = 3
	
	; 餌を配置＆おばけの配置・向きを決定
	dim pacriman_feed, mapsize_x, mapsize_y, mapsize_z
	dim pacriman_ghost_position_x, mapsize_x, mapsize_y, mapsize_z
	dim pacriman_ghost_position_y, mapsize_x, mapsize_y, mapsize_z
	dim pacriman_ghost_direction, mapsize_x, mapsize_y, mapsize_z
	
	next_ghost_num = 0
	pacriman_total_feeds = 0
	pacriman_point = 0

	randomize

	while (next_ghost_num < TOTAL_GHOSTS)
		repeat mapsize_x
			x = cnt
			repeat mapsize_y
				y = cnt
	
				if category(x,y,z) != "road" : continue
	
				if rnd(30) = 29 { pacriman_feed(x,y,z) = 2 : pacriman_total_feeds ++ } else { pacriman_feed(x,y,z) = 1 : pacriman_total_feeds ++ }

				if rnd(100) = 99 and next_ghost_num < TOTAL_GHOSTS {
					if x = pacriman_position_x and y = pacriman_position_y {
					} else {
						pacriman_ghost_position_x(next_ghost_num) = x
						pacriman_ghost_position_y(next_ghost_num) = y
	
						pacriman_ghost_direction(next_ghost_num) = rnd(4)
	
						next_ghost_num ++
					}
				}
			loop
		loop
	wend

	; 無敵状態OFF
	pacriman_invincible = -1

/*-----------------------------------------描写処理-----------------------------------------------*/
*main
	gsel 0

	return_from_exit = "main"
	
	repeat
		; カメラ操作
		before_camx = camx
		before_camy = camy
		
		getkey key_left, 37
		if key_left = 1 {
			if config_Pacriman_Mode = 0 : camx -= 20
			if config_Pacriman_Mode = 1 and safesearch_str(category, pacriman_position_x-1, pacriman_position_y, 0, 0, mapsize_x, mapsize_y) = "road" : pacriman_direction = 0
		}
			
		getkey key_up, 38
		if key_up = 1 {
			if config_Pacriman_Mode = 0 : camy -= 10
			if config_Pacriman_Mode = 1 and safesearch_str(category, pacriman_position_x, pacriman_position_y-1, 0, 0, mapsize_x, mapsize_y) = "road" : pacriman_direction = 1
		}
			
		getkey key_right, 39
		if key_right = 1 {
			if config_Pacriman_Mode = 0 : camx += 20
			if config_Pacriman_Mode = 1 and safesearch_str(category, pacriman_position_x+1, pacriman_position_y, 0, 0, mapsize_x, mapsize_y) = "road" : pacriman_direction = 3
		}
			
		getkey key_down, 40
		if key_down = 1 {
			if config_Pacriman_Mode = 0 : camy += 10
			if config_Pacriman_Mode = 1 and safesearch_str(category, pacriman_position_x, pacriman_position_y+1, 0, 0, mapsize_x, mapsize_y) = "road" : pacriman_direction = 2
		}

		if config_Pacriman_Mode = 1 {
			camx = pacriman_position_x * CHIP_SIZE/2 - pacriman_position_y * CHIP_SIZE/2 - windowx/2 + CHIP_SIZE/2
			camy = pacriman_position_y * CHIP_SIZE/4 + pacriman_position_x * CHIP_SIZE/4 - windowy/2 + CHIP_SIZE/2
		}

		; カメラが操作されたら描写範囲の計算をする
		if camx != before_camx or camy != before_camy {
			gosub *get_coordinates
		}

		; mx,myにマウス座標取得
		if mousex != before_mousex or mousey != before_mousey or camx != before_camx or camy != before_camy {
			mousex_ = mousex+camx-(CHIP_SIZE/2)
			mousey_ = mousey+camy
			mx = (mousey_+mousex_/2)/(CHIP_SIZE/2) - 1
			my = (-mousex_+mousey_*2)/CHIP_SIZE - 1

			if mx < 0 {
				mx = 0
			}
			if my < 0 {
				my = 0
			}
			if mx >= MAPSIZE_X {
				mx = MAPSIZE_X - 1
			}
			if my >= MAPSIZE_Y {
				my = MAPSIZE_Y - 1
			}
	
			before_mousex = mousex
			before_mousey = mousey
		}

		; 夜間/夕方ならナイトマスク付きアドオンの表示準備
		night_mask_drow = 0
		
		if map_set_Dark_on_Night = 1 {
			if map_time_Hour = 6 or (map_time_Hour >= 16 and map_time_Hour <= 17) {
				night_mask_drow = 2
			} else : if (map_time_Hour >= 18) or (map_time_Hour >= 0 and map_time_Hour <= 5) {
				night_mask_drow = 1
			} else {
				night_mask_drow = 0
			}
		}
		
		if config_Pacriman_Mode = 1 : night_mask_drow = 3

		; 描写＆地区設定された地区に建設
		redraw 0
		color 0, 0, 0 : boxf

		x = intial_x
		z = intial_z

		tcnt = cnt
		
		repeat draw_area + 5
			y = intial_y

			if x >= MAPSIZE_X {
				break
			}
			
			repeat draw_area + 5
				if y >= MAPSIZE_Y {
					break
				}

				; アドオンの描写（yの値が-100以下なら表示しない）
				; 下地
				if addons_drow_position_y(x,y,z,1) > -100 and map(x,y,z,1) != -1 {
					pos addons_drow_position_x(x,y,z,1)+intial_camx-camx, addons_drow_position_y(x,y,z,1)+intial_camy-camy
					gmode 2 : gcopy int(sdnl3(addon_image, map(x,y,z,1), obj_type(x,y,z,1), 1))+night_mask_drow, addons_top_left_x(x,y,z,1), addons_top_left_y(x,y,z,1), addons_size_x(x,y,z,1), addons_size_y(x,y,z,1)
				}
				; 上地
				if addons_drow_position_y(x,y,z,0) > -100 {
					pos addons_drow_position_x(x,y,z,0)+intial_camx-camx, addons_drow_position_y(x,y,z,0)+intial_camy-camy
					gmode 2 : gcopy int(sdnl3(addon_image, map(x,y,z,0), obj_type(x,y,z,0), 1))+night_mask_drow, addons_top_left_x(x,y,z,0), addons_top_left_y(x,y,z,0), addons_size_x(x,y,z,0), addons_size_y(x,y,z,0)
				}

				; Pacrimanの餌の当たり判定＆表示
				if config_Pacriman_Mode = 1 {
					if pacriman_feed(x,y,z) != 0 {
						if pacriman_position_x = x and pacriman_position_y = y {
							if pacriman_feed(x,y,z) = 2 : pacriman_invincible = tcnt
							
							pacriman_point += pacriman_feed(x,y,z)
							pacriman_feed(x,y,z) = 0
							pacriman_total_feeds --

							if pacriman_total_feeds = 0 : pacriman_clear = 1
						}
						
						position_x = x * CHIP_SIZE/2 - y * CHIP_SIZE/2 - camx
						position_y = y * CHIP_SIZE/4 + x * CHIP_SIZE/4 - camy
						
						if pacriman_feed(x,y,z) = 1 { pos position_x, position_y : gcopy 80, 0, 0, 64, 64 }
						if pacriman_feed(x,y,z) = 2 { pos position_x, position_y : gcopy 81, 0, 0, 64, 64 }
					}
				}
				
				; 統計モードが選択されている場合
				if stat_mode != "" {
					; 相対的な座標の算出
					position_x = x * CHIP_SIZE/2 - y * CHIP_SIZE/2 - camx
					position_y = y * CHIP_SIZE/4 + x * CHIP_SIZE/4 - camy
					pos position_x, position_y+32
					gmode 4,,,128

					; 色タイルの表示
						; 建物の種類
						if stat_mode = "type" {
							if category(x,y,z,0) = "residential" or instr(reservation(x,y,z), 0, "residential") != -1 {
								gcopy 22, 0, 0, 64, 32	
							} else : if category(x,y,z,0) = "commercial" or instr(reservation(x,y,z), 0, "commercial") != -1 {
								gcopy 23, 0, 0, 64, 32
							} else : if category(x,y,z,0) = "office" or reservation(x,y,z) = "office" {
								gcopy 24, 0, 0, 64, 32
							} else : if category(x,y,z,0) = "industrial" or reservation(x,y,z) = "industrial" {
								gcopy 25, 0, 0, 64, 32
							} else : if category(x,y,z,0) = "farm" or reservation(x,y,z) = "farm" {
								gcopy 59, 0, 0, 64, 32
							} else : if category(x,y,z,0) = "public" {
								gcopy 26, 0, 0, 64, 32
							}
						}
	
						; 地価
						if stat_mode = "land_price" {
							if land_price(x,y,z) > 200 {
								gcopy 34, 0, 0, 64, 32
							} else : if land_price(x,y,z) > 150 {
								gcopy 35, 0, 0, 64, 32
							} else : if land_price(x,y,z) > 80 {
								gcopy 36, 0, 0, 64, 32
							} else : if land_price(x,y,z) = 50 {
								gcopy 48, 0, 0, 64, 32
							} else : if land_price(x,y,z) > 30 {
								gcopy 37, 0, 0, 64, 32
							} else : if land_price(x,y,z) > 15 {
								gcopy 38, 0, 0, 64, 32
							} else {
								gcopy 39, 0, 0, 64, 32
							}
						}
	
						; 犯罪率
						if stat_mode = "crime_rate" {
							if crime_rate(x,y,z) <= -100 {
								gcopy 34, 0, 0, 64, 32
							} else : if crime_rate(x,y,z) <= -50 {
								gcopy 35, 0, 0, 64, 32
							} else : if crime_rate(x,y,z) = 0 {
								gcopy 48, 0, 0, 64, 32
							} else : if crime_rate(x,y,z) < 0 {
								gcopy 36, 0, 0, 64, 32
							} else : if crime_rate(x,y,z) <= 30 {
								gcopy 37, 0, 0, 64, 32
							} else : if crime_rate(x,y,z) <= 60 {
								gcopy 38, 0, 0, 64, 32
							} else {
								gcopy 39, 0, 0, 64, 32
							}
						}
	
						; 教育度
						if stat_mode = "education_rate" {
							if education_rate(x,y,z) <= 0 {
								gcopy 39, 0, 0, 64, 32
							} else : if education_rate(x,y,z) <= 15 {
								gcopy 38, 0, 0, 64, 32
							} else : if education_rate(x,y,z) <= 30 {
								gcopy 48, 0, 0, 64, 32
							} else : if education_rate(x,y,z) <= 45 {
								gcopy 37, 0, 0, 64, 32
							} else : if education_rate(x,y,z) <= 60 {
								gcopy 36, 0, 0, 64, 32
							} else : if education_rate(x,y,z) <= 75 {
								gcopy 35, 0, 0, 64, 32
							} else {
								gcopy 34, 0, 0, 64, 32
							}
						}
	
						; 幸福度
						if stat_mode = "happiness" {
							if happiness(x,y,z) <= 15 {
								gcopy 39, 0, 0, 64, 32
							} else : if happiness(x,y,z) <= 30 {
								gcopy 38, 0, 0, 64, 32
							} else : if happiness(x,y,z) <= 45 {
								gcopy 48, 0, 0, 64, 32
							} else : if happiness(x,y,z) <= 60 {
								gcopy 37, 0, 0, 64, 32
							} else : if happiness(x,y,z) <= 75 {
								gcopy 36, 0, 0, 64, 32
							} else : if happiness(x,y,z) <= 90 {
								gcopy 35, 0, 0, 64, 32
							} else {
								gcopy 34, 0, 0, 64, 32
							}
						}
				}

				; 地区設定された地区に建物を建設
				if cursor_mode = "normal" or cursor_mode = "delete" {
					if reservation(x,y,z) != "none" and rnd(100) = 99 {
						gosub *build_on_reserved_area
					}
				}

				; 幸福度に反映
				happiness(x,y,z) = (int(((double(land_price(x,y,z))/200)*100)*0.50) - int((double(crime_rate(x,y,z)/50)*0.30)) + int(((double(education_rate(x,y,z))/60)*100)*0.20))
				
				y++
			loop
			x++

			await 1
		loop

		; マウス座標にポインターを表示
		mx_position = (mx+1) * CHIP_SIZE/2 - (my+1) * CHIP_SIZE/2 - camx
		my_position = (my+1) * CHIP_SIZE/4 + (mx+1) * CHIP_SIZE/4 - camy

		if cursor_mode = "delete" : cursor_icon = 18 : else : cursor_icon = 17

		color 0, 0, 0 : gmode 4, CHIP_SIZE, CHIP_SIZE/2, 128
		pos mx_position, my_position : gcopy cursor_icon, 0, 0, CHIP_SIZE, CHIP_SIZE/2

		; Pacrimanの表示
		if config_Pacriman_Mode = 1 {
			; パックリマンの表示
			position_x = pacriman_position_x * CHIP_SIZE/2 - pacriman_position_y * CHIP_SIZE/2 - camx
			position_y = pacriman_position_y * CHIP_SIZE/4 + pacriman_position_x * CHIP_SIZE/4 - camy

			if pacriman_direction = 0 : pacriman_tly = 0
			if pacriman_direction = 1 : pacriman_tly = 64
			if pacriman_direction = 2 : pacriman_tly = 128
			if pacriman_direction = 3 : pacriman_tly = 192
			pos position_x, position_y : gmode 2 : gcopy 78, 0, pacriman_tly, 64, 64

			if tcnt \ 10 = 0 and tcnt != 0 {
				if pacriman_position_x < 0 or pacriman_position_x >= mapsize_x {
					if pacriman_direction = 0 {
						pacriman_direction = 3
					} else {
						pacriman_direction = 0
					}
				}
				if pacriman_position_y < 0 or pacriman_position_y >= mapsize_y {
					if pacriman_direction = 1 {
						pacriman_direction = 2
					} else {
						pacriman_direction = 1
					}
				}
				if pacriman_position_x >= 0 and pacriman_position_x < mapsize_x and pacriman_position_y >= 0 and pacriman_position_y < mapsize_y and safesearch_str(category, pacriman_position_x, pacriman_position_y, 0, 0, mapsize_x, mapsize_y) != "road" {
					if pacriman_direction = 0 {
						pacriman_direction = 3
					} else : if pacriman_direction = 1 {
						pacriman_direction = 2
					} else : if pacriman_direction = 2 {
						pacriman_direction = 1
					} else : if pacriman_direction = 3 {
						pacriman_direction = 0
					}
				}

				if pacriman_direction = 0 : pacriman_position_x --
				if pacriman_direction = 1 : pacriman_position_y --
				if pacriman_direction = 2 : pacriman_position_y ++
				if pacriman_direction = 3 : pacriman_position_x ++
			}

			; 無敵状態から200回ループされたら無敵状態を解除
			if tcnt > pacriman_invincible+10*20 : pacriman_invincible = -1
			
			; おばけの表示
			repeat TOTAL_GHOSTS
				if pacriman_position_x = pacriman_ghost_position_x(cnt) and pacriman_position_y = pacriman_ghost_position_y(cnt) {
					if pacriman_invincible = -1 {
						pacriman_crash = 1
					} else {
						pacriman_point += 100
						pacriman_ghost_position_x(cnt) = -100 : pacriman_ghost_position_y(cnt) = -100
					}
				}

				if pacriman_ghost_position_x(cnt) <= -100 and pacriman_ghost_position_y(cnt) <= -100 : continue
				
				sx = pacriman_ghost_position_x(cnt) : sy = pacriman_ghost_position_y(cnt)
				position_x = sx * CHIP_SIZE/2 - sy * CHIP_SIZE/2 - camx
				position_y = sy * CHIP_SIZE/4 + sx * CHIP_SIZE/4 - camy

				if pacriman_ghost_direction(cnt) = 0 : pacriman_ghost_tly = 0
				if pacriman_ghost_direction(cnt) = 1 : pacriman_ghost_tly = 64
				if pacriman_ghost_direction(cnt) = 2 : pacriman_ghost_tly = 128
				if pacriman_ghost_direction(cnt) = 3 : pacriman_ghost_tly = 192

				if position_x >= 0 or position_y >= 0 or position_x <= windowx or position_y <= windowy {
					pos position_x, position_y : gmode 2
					if pacriman_invincible = -1 : gcopy 79, 0, pacriman_ghost_tly, 64, 64 : else : gcopy 83, 0, pacriman_ghost_tly, 64, 64
				}

				if tcnt \ 10 = 0 and tcnt != 0 {
					if safesearch_str(category, pacriman_ghost_position_x(cnt), pacriman_ghost_position_y(cnt), 0, 0, mapsize_x, mapsize_y) != "road" {
						if pacriman_ghost_direction(cnt) = 0 { 
							pacriman_ghost_position_x(cnt)++
							if safesearch_str(category, pacriman_ghost_position_x(cnt), pacriman_ghost_position_y(cnt)-1, 0, 0, mapsize_x, mapsize_y) = "road" {
								pacriman_ghost_direction(cnt) = 1
							} else : if safesearch_str(category, pacriman_ghost_position_x(cnt), pacriman_ghost_position_y(cnt)+1, 0, 0, mapsize_x, mapsize_y) = "road" {
								pacriman_ghost_direction(cnt) = 2
							} else {
								pacriman_ghost_direction(cnt) = 3
							}
						}
						if pacriman_ghost_direction(cnt) = 1 { 
							pacriman_ghost_position_y(cnt)--
							if safesearch_str(category, pacriman_ghost_position_x(cnt)-1, pacriman_ghost_position_y(cnt), 0, 0, mapsize_x, mapsize_y) = "road" {
								pacriman_ghost_direction(cnt) = 0
							} else : if safesearch_str(category, pacriman_ghost_position_x(cnt)+1, pacriman_ghost_position_y(cnt), 0, 0, mapsize_x, mapsize_y) = "road" {
								pacriman_ghost_direction(cnt) = 3
							} else {
								pacriman_ghost_direction(cnt) = 2
							}
						}
						if pacriman_ghost_direction(cnt) = 2 { 
							pacriman_ghost_position_y(cnt)++
							if safesearch_str(category, pacriman_ghost_position_x(cnt)-1, pacriman_ghost_position_y(cnt), 0, 0, mapsize_x, mapsize_y) = "road" {
								pacriman_ghost_direction(cnt) = 0
							} else : if safesearch_str(category, pacriman_ghost_position_x(cnt)+1, pacriman_ghost_position_y(cnt), 0, 0, mapsize_x, mapsize_y) = "road" {
								pacriman_ghost_direction(cnt) = 3
							} else {
								pacriman_ghost_direction(cnt) = 1
							}
						}
						if pacriman_ghost_direction(cnt) = 3 { 
							pacriman_ghost_position_x(cnt)--
							if safesearch_str(category, pacriman_ghost_position_x(cnt), pacriman_ghost_position_y(cnt)-1, 0, 0, mapsize_x, mapsize_y) = "road" {
								pacriman_ghost_direction(cnt) = 1
							} else : if safesearch_str(category, pacriman_ghost_position_x(cnt), pacriman_ghost_position_y(cnt)+1, 0, 0, mapsize_x, mapsize_y) = "road" {
								pacriman_ghost_direction(cnt) = 2
							} else {
								pacriman_ghost_direction(cnt) = 0
							}
						}
					}

					if pacriman_ghost_position_x(cnt) < 0 or pacriman_ghost_position_x(cnt) >= mapsize_x {
						if pacriman_ghost_direction(cnt) = 0 {
							pacriman_ghost_direction(cnt) = 3
						} else {
							pacriman_ghost_direction(cnt) = 0
						}
					}
					if pacriman_ghost_position_y(cnt) < 0 or pacriman_ghost_position_y(cnt) >= mapsize_y {
						if pacriman_ghost_direction(cnt) = 1 {
							pacriman_ghost_direction(cnt) = 2
						} else {
							pacriman_ghost_direction(cnt) = 1
						}
					}

					if pacriman_ghost_direction(cnt) = 0 : pacriman_ghost_position_x(cnt) --
					if pacriman_ghost_direction(cnt) = 1 : pacriman_ghost_position_y(cnt) --
					if pacriman_ghost_direction(cnt) = 2 : pacriman_ghost_position_y(cnt) ++
					if pacriman_ghost_direction(cnt) = 3 : pacriman_ghost_position_x(cnt) ++
				}

				if safesearch_str(category, pacriman_ghost_position_x(cnt), pacriman_ghost_position_y(cnt), 0, 0, mapsize_x, mapsize_y) = "road" and rnd(10) = 9 {
					if obj_type(pacriman_ghost_position_x(cnt), pacriman_ghost_position_y(cnt), 0, 0) = element2(map(pacriman_ghost_position_x(cnt), pacriman_ghost_position_y(cnt), 0, 0), addon_use_types_name, "intersection_cross")  {
						pacriman_ghost_direction(cnt) = rnd(4)
					}
				}
			loop

			; 点数の表示
			color 255, 255, 255 : font config_SystemFont, 14
			pos 10, 10 : mes "SCORE "+pacriman_point+""
		}

		; 天候の変動
		gosub *climate

		; 各種ボタン表示
		color 0, 0, 0 : sboxf 200, 0, windowy-70-titlebar_h, windowx, windowy

			; 何らかのメニューが開かれている場合はメニューの背景色を表示
			if cursor_mode != "normal" and cursor_mode != "delete" {
				color 0, 162, 232 : sboxf 200, 0, windowy-70-titlebar_h-32-40, windowx, windowy-70-titlebar_h
			}

			gmode 2

			; 標準カーソルボタン
			if cursor_mode = "normal" {
				pos 20, windowy-70-titlebar_h : gcopy 3, 0, 32, 32, 32
			} else {
				pos 20, windowy-70-titlebar_h : gcopy 3, 0, 0, 32, 32
			}
	
			; 道路ボタン
			if cursor_mode = "put_Road" {
				pos 60, windowy-70-titlebar_h : gcopy 4, 0, 32, 32, 32
			} else {
				pos 60, windowy-70-titlebar_h : gcopy 4, 0, 0, 32, 32
			}
	
			; 線路ボタン
			if cursor_mode = "put_Railroad" {
				pos 92, windowy-70-titlebar_h : gcopy 50, 0, 32, 32, 32
			} else {
				pos 92, windowy-70-titlebar_h : gcopy 50, 0, 0, 32, 32
			}
	
			; 建物（住居地区）ボタン
			if cursor_mode = "put_Residential" {
				pos 124, windowy-70-titlebar_h : gcopy 5, 0, 32, 32, 32
			} else {
				pos 124, windowy-70-titlebar_h : gcopy 5, 0, 0, 32, 32
			}
	
			; 建物（商業地区）ボタン
			if cursor_mode = "put_Commercial" {
				pos 156, windowy-70-titlebar_h : gcopy 12, 0, 32, 32, 32
			} else {
				pos 156, windowy-70-titlebar_h : gcopy 12, 0, 0, 32, 32
			}
	
			; 建物（オフィス）ボタン
			if cursor_mode = "put_Office" {
				pos 188, windowy-70-titlebar_h : gcopy 6, 0, 32, 32, 32
			} else {
				pos 188, windowy-70-titlebar_h : gcopy 6, 0, 0, 32, 32
			}
	
			; 建物（工業地区）ボタン
			if cursor_mode = "put_Industrial" {
				pos 220, windowy-70-titlebar_h : gcopy 19, 0, 32, 32, 32
			} else {
				pos 220, windowy-70-titlebar_h : gcopy 19, 0, 0, 32, 32
			}
	
			; 建物（農業地区）ボタン
			if cursor_mode = "put_Farm" {
				pos 252, windowy-70-titlebar_h : gcopy 57, 0, 32, 32, 32
			} else {
				pos 252, windowy-70-titlebar_h : gcopy 57, 0, 0, 32, 32
			}
	
			; 建物（公共施設）ボタン
			if cursor_mode = "put_Public" {
				pos 284, windowy-70-titlebar_h : gcopy 7, 0, 32, 32, 32
			} else {
				pos 284, windowy-70-titlebar_h : gcopy 7, 0, 0, 32, 32
			}
	
			; 公園ボタン
			if cursor_mode = "put_Park" {
				pos 316, windowy-70-titlebar_h : gcopy 29, 0, 32, 32, 32
			} else {
				pos 316, windowy-70-titlebar_h : gcopy 29, 0, 0, 32, 32
			}

			; 水路ボタン
			if cursor_mode = "put_Waterway" {
				pos 348, windowy-70-titlebar_h : gcopy 76, 0, 32, 32, 32
			} else {
				pos 348, windowy-70-titlebar_h : gcopy 76, 0, 0, 32, 32
			}
	
			; 情報ボタン
			pos windowx-54-64, windowy-70-titlebar_h : gcopy 52, 0, 0, 32, 32
	
			; 予算ボタン
			pos windowx-54-64, windowy-40-titlebar_h : gcopy 49, 0, 0, 32, 32
	
			; 撤去ボタン
			if cursor_mode = "delete" {
				pos windowx-54, windowy-70-titlebar_h : gcopy 10, 0, 32, 32, 32
			} else {
				pos windowx-54, windowy-70-titlebar_h : gcopy 10, 0, 0, 32, 32
			}
	
			; 設定ボタン
			pos windowx-54-32, windowy-40-titlebar_h : gcopy 13, 0, 0, 32, 32
	
			; 保存ボタン
			pos windowx-54, windowy-40-titlebar_h : gcopy 11, 0, 0, 32, 32
	
			; 統計ボタン
			pos windowx-54-32, windowy-70-titlebar_h : gcopy 30, 0, 0, 32, 32
	
			; 統計メニュー（oepn_stat_menu = 1のとき）
			if open_stat_menu = 1 {
				sboxf 128, windowx-92-32-1, windowy-70-titlebar_h-20-1, windowx-92-32-1+(20*5)+1, windowy-70-titlebar_h
				if stat_mode = "type" {
					pos windowx-92-32, windowy-70-titlebar_h-20 : gcopy 31, 0, 20, 20, 20
				} else {
					pos windowx-92-32, windowy-70-titlebar_h-20 : gcopy 31, 0, 0, 20, 20
				}
				if stat_mode = "land_price" {
					pos windowx-92-32+20, windowy-70-titlebar_h-20 : gcopy 32, 0, 20, 20, 20
				} else {
					pos windowx-92-32+20, windowy-70-titlebar_h-20 : gcopy 32, 0, 0, 20, 20
				}
				if stat_mode = "crime_rate" {
					pos windowx-92-32+40, windowy-70-titlebar_h-20 : gcopy 33, 0, 20, 20, 20
				} else {
					pos windowx-92-32+40, windowy-70-titlebar_h-20 : gcopy 33, 0, 0, 20, 20
				}
				if stat_mode = "education_rate" {
					pos windowx-92-32+60, windowy-70-titlebar_h-20 : gcopy 47, 0, 20, 20, 20
				} else {
					pos windowx-92-32+60, windowy-70-titlebar_h-20 : gcopy 47, 0, 0, 20, 20
				}
				if stat_mode = "happiness" {
					pos windowx-92-32+80, windowy-70-titlebar_h-20 : gcopy 51, 0, 20, 20, 20
				} else {
					pos windowx-92-32+80, windowy-70-titlebar_h-20 : gcopy 51, 0, 0, 20, 20
				}
			}	

			; 速さ
			pos 20, windowy-45-titlebar_h+10
			if speed = 1 : gcopy 73, 0, 0, 32, 32	; 遅い
			if speed = 2 : gcopy 68, 0, 0, 32, 32	; 普通
			if speed = 3 : gcopy 69, 0, 0, 32, 32	; 早い
			if speed = 4 : gcopy 74, 0, 0, 32, 32	; とても早い

			pos 52, windowy-45-titlebar_h+10
			if pause = 1 : gcopy 70, 0, 32, 32, 32 : else : gcopy 70, 0, 0, 32, 32		; 一時停止ボタン
	
			; 人口、日付・気温を表示
			color 255, 255, 255 : font config_SystemFont, 11
			pos 90, windowy-45-titlebar_h+10 : mes ""+map_time_Year+"年"+map_time_Month+"月"+map_time_Date+"日 "+strf("%02d",map_time_Hour)+":"+strf("%02d",map_time_Minutes)+"   人口 "+map_Total_Population+"人   § "+map_Money+"   気温 "+map_temperature+"℃"
	
			color 255, 255, 255 : font "Yu Gothic UI", 10
			pos 90, windowy-30-titlebar_h+10 : mes "News : "+news_content+""
				
			; RCOI需要メータ
			if map_demand_Residential < 0 : map_demand_Residential = 1
			if map_demand_Commercial < 0  : map_demand_Commercial = 1
			if map_demand_Office < 0      : map_demand_Office = 1
			if map_demand_Industrial < 0  : map_demand_Industrial = 1
			if map_demand_Farm < 0        : map_demand_Farm = 1
					
			font config_SystemFont, 10
				; R - 住居区画
				color 34, 177, 76 : boxf windowx-180, windowy-titlebar_h-20-(map_demand_Residential/3), windowx-180+10, windowy-titlebar_h-20
				cmes "R", windowx-180, windowy-titlebar_h-20, windowx-180+10, windowy-titlebar_h-10, 1
				; C - 商業区画
				color 63, 72, 204 : boxf windowx-170, windowy-titlebar_h-20-(map_demand_Commercial/3), windowx-170+10, windowy-titlebar_h-20
				cmes "C", windowx-170, windowy-titlebar_h-20, windowx-170+10, windowy-titlebar_h-10, 1
				; O - オフィス区画
				color 0, 162, 232 : boxf windowx-160, windowy-titlebar_h-20-(map_demand_Office/3), windowx-160+10, windowy-titlebar_h-20
				cmes "O", windowx-160, windowy-titlebar_h-20, windowx-160+10, windowy-titlebar_h-10, 1
				; I - 工業区画
				color 255, 242, 0 : boxf windowx-150, windowy-titlebar_h-20-(map_demand_Industrial/3), windowx-150+10, windowy-titlebar_h-20
				cmes "I", windowx-150, windowy-titlebar_h-20, windowx-150+10, windowy-titlebar_h-10, 1
				; F - 農業区画
				color 185, 122, 87 : boxf windowx-140, windowy-titlebar_h-20-(map_demand_Farm/3), windowx-140+10, windowy-titlebar_h-20
				cmes "F", windowx-140, windowy-titlebar_h-20, windowx-140+10, windowy-titlebar_h-10, 1

		; 左クリックされてるなら*main_mouse_left_clickingへ（*main_onclickとは別で、押し続けているときの処理）
		getkey mouse_left, 1
			; 左クリックが離されたときの処理
				if mouse_left = 0 and before_mouse_left_clicking = 1 : gosub *main_mouse_left_release
				
		if mouse_left = 1 : gosub *main_mouse_left_clicking
		
		; クリックされたら*main_onclickへ（*main_mouse_left_clickingとは別で、一瞬だけ押されたときの処理）
		onclick gosub *main_onclick

		; 時間の変動
			; Speed=2のとき、1回のループで1分とする
			if pause = 0 {
				if speed = 1 {
					if cnt \ 4 = 0 : map_time_Minutes += 1
				} else {
					map_time_Minutes += speed - 1
				}
			}
			
			; map_time_Minutes=60で1時間とする
			if map_time_Minutes > 59 {
				map_time_Minutes = 0
				map_time_Hour ++
			}
		
			; map_time_Hour=24で1日とする
			if map_time_Hour= 24 {
				map_time_Date ++
				map_time_Hour = 0 : map_time_Minutes = 0
		
				if map_time_Date > 28 and map_time_Month = 2 and map_time_Year\4 != 0 {
					map_time_Date = 1
					map_time_Month ++
				}
				if map_time_Date > 29 and map_time_Month = 2 and map_time_Year\4 = 0 {
					map_time_Date = 1
					map_time_Month ++
				}
				if map_time_Date > 30 and (map_time_Month = 4 or map_time_Month = 6 or map_time_Month = 9 or map_time_Month = 11) {
					map_time_Date = 1
					map_time_Month ++
				}
				if map_time_Date > 31 and (map_time_Month = 1 or map_time_Month = 3 or map_time_Month = 5 or map_time_Month = 7 or map_time_Month = 8 or map_time_Month = 10 or map_time_Month = 12) {
					map_time_Date = 1
					map_time_Month ++
				}
				if map_time_Month > 12 {
					map_time_Year ++
					map_time_Month = 1
					map_time_Date = 1
				}
			}

		; ニュースの表示（0時0分、6時0分、12時0分、18時0分 あるいは マップ読み込み直後に新しいニュースを取得）	
		if (map_time_Hour = 0 and map_time_Minutes = 0) or (map_time_Hour = 6 and map_time_Minutes = 0) or (map_time_Hour = 12 and map_time_Minutes = 0) or (map_time_Hour = 18 and map_time_Minutes = 0) or cnt = 0 {
			gosub *get_news
		}

		; BGMの再生
		; 現在再生しているBGMの現在の再生位置と曲の長さを取得
		if cnt \ 10 = 0 {
			mci"status Cities-Box position" : BGM_Position = stat		; 現在の再生位置	
			mci "status Cities-Box length"  : BGM_Length = stat			; 曲の長さ

			; 現在の再生位置と曲の長さが同じなら次の曲を選曲
			if BGM_Position = BGM_Length : gosub *play_BGM

			; BGMの再生が無効なら音量0にする
			if config_Set_Play_BGM = 0 : mci "setaudio Cities-Box volume to 0" : else : mci "setaudio Cities-Box volume to 1000"
		}

		; タイルの詳細を表示している場合
		if showing_detail = 1 : gosub *show_detail

		; アドオン選択メニューが開かれているなら*addon_select_menuへ
		if cursor_mode != "normal" and cursor_mode != "delete" : gosub *addon_select_menu

		; ボタンの説明の表示
		gosub *main_drow_summary

		; 現在のウィンドウサイズを取得
		windowx = ginfo_sizex
		windowy = ginfo_sizey
	
		; ウィンドウ左枠の横幅とタイトルバーの高さを取得
		dim rc, 2 : rc(0) = 0 : rc(1) = 0
		ClientToScreen hwnd, varptr(rc)
		window_left_breadth = rc(0) - ginfo_wx1
		titlebar_h = rc(1) - ginfo_wy1

		; 一日の最初の処理
		if map_time_Hour = 0 and map_time_Minutes = 0 : gosub *processing_start_of_day

		redraw 1

		; Pacriman : ゲームオーバー
		if pacriman_crash = 1 {
			pacriman_crash = 0
			goto *pacriman_game_over
		}

		; Pacriman : ゲームクリア
		if pacriman_clear = 1 {
			pacriman_clear = 0
			goto *pacriman_game_clear
		}
		
		await config_Drow_Interval
	loop

*pacriman_game_over
	color 0, 0, 0 : sboxf 128, 0, 0, windowx, windowy
	color 255, 255, 255 : font config_SystemFont, 22
	cmes "GAME OVER\n\nSCORE : "+pacriman_point+"", 0, windowy/2-100, windowx, windowy/2+50

	pos windowx/2-40, windowy/2+30 : gmode 2 : gcopy 82, 0, 0, 16, 16
	font config_SystemFont, 14 : cmes "Replay", 0, windowy/2+30, windowx, windowy/2+50

	repeat
		getkey enter, 13
		if enter = 1 : goto *pacriman_preparating

		wait 10
	loop

	stop

*pacriman_game_clear
	color 0, 0, 0 : sboxf 128, 0, 0, windowx, windowy
	color 255, 255, 255 : font config_SystemFont, 22
	cmes "GAME CLEAR\n\nSCORE : "+pacriman_point+"\n\nCONGRATULATION! HAPPY APRIL FOOL!!!!!!", 0, windowy/2-100, windowx, windowy/2+50

	pos windowx/2-40, windowy/2+40 : gmode 2 : gcopy 82, 0, 0, 16, 16
	font config_SystemFont, 14 : cmes "Replay", 0, windowy/2+40, windowx, windowy/2+60

	repeat
		getkey enter, 13
		if enter = 1 : goto *pacriman_preparating

		wait 10
	loop

	stop

*main_drow_summary
	/*---------------------------------各種ボタンの説明の表示-------------------------------------*/
	font config_SystemFont, 10
	
	; 通常のカーソル
	if click_range(20, windowy-70-titlebar_h, 20+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, 20, windowy-70-titlebar_h-18, 20+60, windowy-70-titlebar_h
		color 0, 0, 0 : pos 20+2, windowy-70-titlebar_h-18+2 : mes "カーソル"
	}

	; 道路
	if click_range(0, windowy-70-titlebar_h-2-32, 0+16, windowy-70-titlebar_h-2-32+16) = 1 and cursor_mode = "put_Road" {
		color 255, 255, 255 : sboxf 200, 0, windowy-70-titlebar_h-2-32-18, 16+40, windowy-70-titlebar_h-2-32
		color 0, 0, 0 : pos 0+2, windowy-70-titlebar_h-2-32-18+2 : mes "車道"
	}
	if click_range(0, windowy-70-titlebar_h-2-16, 0+16, windowy-70-titlebar_h-2-16+16) = 1 and cursor_mode = "put_Road" {
		color 255, 255, 255 : sboxf 200, 0, windowy-70-titlebar_h-2-16-18, 16+40, windowy-70-titlebar_h-2-16
		color 0, 0, 0 : pos 0+2, windowy-70-titlebar_h-2-16-18+2 : mes "歩道"
	}
	if click_range(60, windowy-70-titlebar_h, 60+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, 60, windowy-70-titlebar_h-18, 60+50, windowy-70-titlebar_h
		color 0, 0, 0 : pos 60+2, windowy-70-titlebar_h-18+2 : mes "道路・歩道"
	}

	; 線路
	if click_range(92, windowy-70-titlebar_h, 92+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, 92, windowy-70-titlebar_h-18, 92+50, windowy-70-titlebar_h
		color 0, 0, 0 : pos 92+2, windowy-70-titlebar_h-18+2 : mes "線路・駅"
	}

	; 住居
	if click_range(0, windowy-70-titlebar_h-2-32, 0+16, windowy-70-titlebar_h-2-32+16) = 1 and cursor_mode = "put_Residential" {
		color 255, 255, 255 : sboxf 200, 0, windowy-70-titlebar_h-2-32-18, 16+40, windowy-70-titlebar_h-2-32
		color 0, 0, 0 : pos 0+2, windowy-70-titlebar_h-2-32-18+2 : mes "低密度"
	}
	if click_range(0, windowy-70-titlebar_h-2-16, 0+16, windowy-70-titlebar_h-2-16+16) = 1 and cursor_mode = "put_Residential" {
		color 255, 255, 255 : sboxf 200, 0, windowy-70-titlebar_h-2-16-18, 16+40, windowy-70-titlebar_h-2-16
		color 0, 0, 0 : pos 0+2, windowy-70-titlebar_h-2-16-18+2 : mes "高密度"
	}
	if click_range(124, windowy-70-titlebar_h, 124+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, 124, windowy-70-titlebar_h-18, 124+50, windowy-70-titlebar_h
		color 0, 0, 0 : pos 124+2, windowy-70-titlebar_h-18+2 : mes "住居区画"
	}

	; 商業
	if click_range(0, windowy-70-titlebar_h-2-32, 0+16, windowy-70-titlebar_h-2-32+16) = 1 and cursor_mode = "put_Commercial" {
		color 255, 255, 255 : sboxf 200, 0, windowy-70-titlebar_h-2-32-18, 16+40, windowy-70-titlebar_h-2-32
		color 0, 0, 0 : pos 0+2, windowy-70-titlebar_h-2-32-18+2 : mes "低密度"
	}
	if click_range(0, windowy-70-titlebar_h-2-16, 0+16, windowy-70-titlebar_h-2-16+16) = 1 and cursor_mode = "put_Commercial" {
		color 255, 255, 255 : sboxf 200, 0, windowy-70-titlebar_h-2-16-18, 16+40, windowy-70-titlebar_h-2-16
		color 0, 0, 0 : pos 0+2, windowy-70-titlebar_h-2-16-18+2 : mes "高密度"
	}
	if click_range(156, windowy-70-titlebar_h, 156+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, 156, windowy-70-titlebar_h-18, 156+50, windowy-70-titlebar_h
		color 0, 0, 0 : pos 156+2, windowy-70-titlebar_h-18+2 : mes "商業区画"
	}

	; オフィス
	if click_range(188, windowy-70-titlebar_h, 188+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, 188, windowy-70-titlebar_h-18, 188+60, windowy-70-titlebar_h
		color 0, 0, 0 : pos 188+2, windowy-70-titlebar_h-18+2 : mes "オフィス区画"
	}

	; 工業
	if click_range(220, windowy-70-titlebar_h, 220+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, 220, windowy-70-titlebar_h-18, 220+50, windowy-70-titlebar_h
		color 0, 0, 0 : pos 220+2, windowy-70-titlebar_h-18+2 : mes "工業区画"
	}

	; 農業
	if click_range(252, windowy-70-titlebar_h, 252+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, 252, windowy-70-titlebar_h-18, 252+50, windowy-70-titlebar_h
		color 0, 0, 0 : pos 252+2, windowy-70-titlebar_h-18+2 : mes "農業区画"
	}

	; 公共施設
	if click_range(284, windowy-70-titlebar_h, 284+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, 284, windowy-70-titlebar_h-18, 284+50, windowy-70-titlebar_h
		color 0, 0, 0 : pos 284+2, windowy-70-titlebar_h-18+2 : mes "公共施設"
	}

	; 公園
	if click_range(316, windowy-70-titlebar_h, 316+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, 316, windowy-70-titlebar_h-18, 316+50, windowy-70-titlebar_h
		color 0, 0, 0 : pos 316+2, windowy-70-titlebar_h-18+2 : mes "公園"
	}

	; 水路
	if click_range(348, windowy-70-titlebar_h, 348+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, 348, windowy-70-titlebar_h-18, 348+50, windowy-70-titlebar_h
		color 0, 0, 0 : pos 348+2, windowy-70-titlebar_h-18+2 : mes "水路"
	}

	; 情報
	if click_range(windowx-54-64, windowy-70-titlebar_h, windowx-54-64+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, windowx-54-64, windowy-70-titlebar_h-18, windowx-54-64+50, windowy-70-titlebar_h
		color 0, 0, 0 : pos windowx-54-64+2, windowy-70-titlebar_h-18+2 : mes "情報"
	}

	; 予算
	if click_range(windowx-54-64, windowy-40-titlebar_h, windowx-54-64+32, windowy-40-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 200, windowx-54-64, windowy-40-titlebar_h-18, windowx-54-64+50, windowy-40-titlebar_h
		color 0, 0, 0
		pos windowx-54-64+2, windowy-40-titlebar_h-18+2 : mes "予算"
	}

	; 撤去
	if click_range(windowx-54, windowy-70-titlebar_h, windowx-54+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, windowx-54, windowy-70-titlebar_h-18, windowx-54+50, windowy-70-titlebar_h
		color 0, 0, 0 : pos windowx-54+2, windowy-70-titlebar_h-18+2 : mes "撤去"
	}

	; 設定
	if click_range(windowx-54-32, windowy-40-titlebar_h, windowx-54-32+32, windowy-40-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 200, windowx-54-32, windowy-40-titlebar_h-18, windowx-54-32+50, windowy-40-titlebar_h
		color 0, 0, 0 : pos windowx-54-32+2, windowy-40-titlebar_h-18+2 : mes "設定"
	}

	; 保存
	if click_range(windowx-54, windowy-40-titlebar_h, windowx-54+32, windowy-40-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 200, windowx-54, windowy-40-titlebar_h-18, windowx-54+50, windowy-40-titlebar_h
		color 0, 0, 0 : pos windowx-54+2, windowy-40-titlebar_h-18+2 : mes "保存"
	}

	; 統計
	if click_range(windowx-54-32, windowy-70-titlebar_h, windowx-54-32+32, windowy-70-titlebar_h+32) = 1 {
		color 255, 255, 255 : sboxf 128, windowx-32-54, windowy-70-titlebar_h-18, windowx-32-54+50, windowy-70-titlebar_h
		color 0, 0, 0 : pos windowx-32-54+2, windowy-70-titlebar_h-18+2 : mes "統計"
	}

	; 統計メニュー
	if open_stat_menu = 1 {
		if click_range(windowx-92-32, windowy-70-titlebar_h-20, windowx-92-32+20, windowy-70-titlebar_h-20+20) = 1 {
			color 255, 255, 255 : sboxf 128, windowx-92-32, windowy-70-titlebar_h-20-18, windowx-92-32+50, windowy-70-titlebar_h-20
			color 0, 0, 0 : pos windowx-92-32+2, windowy-70-titlebar_h-20-18+2 : mes "種類"
		}
		if click_range(windowx-92-32+20, windowy-70-titlebar_h-20, windowx-92-32+20+20, windowy-70-titlebar_h-20+20) = 1 {
			color 255, 255, 255 : sboxf 128, windowx-92-32+20, windowy-70-titlebar_h-20-18, windowx-92-32+20+50, windowy-70-titlebar_h-20
			color 0, 0, 0 : pos windowx-92-32+20+2, windowy-70-titlebar_h-20-18+2 : mes "地価"
		}
		if click_range(windowx-92-32+40, windowy-70-titlebar_h-20, windowx-92-32+40+20, windowy-70-titlebar_h-20+20) = 1 {
			color 255, 255, 255 : sboxf 128, windowx-92-32+40, windowy-70-titlebar_h-20-18, windowx-92-32+40+50, windowy-70-titlebar_h-20
			color 0, 0, 0 : pos windowx-92-32+40+2, windowy-70-titlebar_h-20-18+2 : mes "犯罪率"
		}
		if click_range(windowx-92-32+60, windowy-70-titlebar_h-20, windowx-92-32+60+20, windowy-70-titlebar_h-20+20) = 1 {
			color 255, 255, 255 : sboxf 128, windowx-92-32+60, windowy-70-titlebar_h-20-18, windowx-92-32+60+50, windowy-70-titlebar_h-20
			color 0, 0, 0 : pos windowx-92-32+60+2, windowy-70-titlebar_h-20-18+2 : mes "教育度"
		}
		if click_range(windowx-92-32+80, windowy-70-titlebar_h-20, windowx-92-32+80+20, windowy-70-titlebar_h-20+20) = 1 {
			color 255, 255, 255 : sboxf 128, windowx-92-32+80, windowy-70-titlebar_h-20-18, windowx-92-32+80+50, windowy-70-titlebar_h-20
			color 0, 0, 0 : pos windowx-92-32+80+2, windowy-70-titlebar_h-20-18+2 : mes "幸福度"
		}
	}

	; 早さ / 一時停止
	if click_range(20, windowy-45-titlebar_h+10, 20+32, windowy-45-titlebar_h+10+32) = 1 {
		color 255, 255, 255 : sboxf 200, 20, windowy-45-titlebar_h+10-18, 20+50, windowy-45-titlebar_h+10
		color 0, 0, 0 : pos 20+2, windowy-45-titlebar_h+10-18+2 : mes "時間の早さ"
	}
	if click_range(52, windowy-45-titlebar_h+10, 52+32, windowy-45-titlebar_h+10+32) = 1 {
		color 255, 255, 255 : sboxf 200, 52, windowy-45-titlebar_h+10-18, 52+50, windowy-45-titlebar_h+10
		color 0, 0, 0 : pos 52+2, windowy-45-titlebar_h+10-18+2 : mes "一時停止"
	}

	; 高密度/低密度などのメニューのタイプの表示
	if cursor_mode != "normal" and cursor_mode != "delete" and addon_menu_categories > 1 {
		if click_range(0, windowy-70-titlebar_h-2-32, 0+16, windowy-70-titlebar_h-2-32+16) = 1 {
			color 255, 255, 255 : sboxf 128, 0, windowy-70-titlebar_h-2-32-18, 16+40, windowy-70-titlebar_h-2-32
			color 0, 0, 0 : pos 0+2, windowy-70-titlebar_h-2-32-18+2
			if addon_menu_categories_name(0) = "low" : mes "低密度" : else : mes "車道"
		}
		if click_range(0, windowy-70-titlebar_h-2-16, 0+16, windowy-70-titlebar_h-2-16+16) = 1 {
			color 255, 255, 255 : sboxf 128, 0, windowy-70-titlebar_h-2-16-18, 16+40, windowy-70-titlebar_h-2-16
			color 0, 0, 0 : pos 0+2, windowy-70-titlebar_h-2-16-18+2
			if addon_menu_categories_name(1) = "high" : mes "高密度" : else : mes "歩道"
		}
	}

	; 建物名変更の説明表示
	if showing_detail = 1 and click_range( show_detail_position_x+32+15+diax+25-20, show_detail_position_y-100-(diay1+5+diay2+5), show_detail_position_x+32+15+diax+25, show_detail_position_y-100-(diay1+5+diay2+5)+20 ) = 1 {
		color 255, 255, 255 : sboxf 200, show_detail_position_x+32+15+diax+25+3, show_detail_position_y-100-(diay1+5+diay2+5)-2, show_detail_position_x+32+15+diax+25+80, show_detail_position_y-100-(diay1+5+diay2+5)+17
		color 0, 0, 0 : pos show_detail_position_x+32+15+diax+25+5, show_detail_position_y-100-(diay1+5+diay2+5) : mes "建物名を変更"
	}

	return

*main_mouse_left_clicking
	/*-------------------------画面上で左クリックされ続けているときの処理-------------------------*/
	; アドオンの設置（*build）
	if cursor_mode != "normal" and cursor_mode != "delete" and addon_menu_categories >= 1 {
		if click_range( 0, 0, windowx, windowy-70-titlebar_h-32 ) = 1 {
			gosub *build
		}
	}

	before_mouse_left_clicking = 1

	return

*main_mouse_left_release
	/*----------------------------画面上で左クリックから離されたの処理----------------------------*/
	; アドオンの車道/線路/水路のタイプと向きを指定（*build_roadtypes）
	if (cursor_mode = "put_Road" or cursor_mode = "put_Railroad" or cursor_mode = "put_Waterway") and under_construction_tiles >= 1 {
		gosub *build_roadtypes
	}

	before_mouse_left_clicking = 0

	return

*main_onclick
	/*------------------------------画面上でクリックされたときの処理------------------------------*/
	; 通常のカーソル
	if click_range( 20, windowy-70-titlebar_h, 20+32, windowy-70-titlebar_h+32 ) = 1 {
		cursor_mode = "normal"
		addon_menu_categories = 0
		stat_mode = ""
	}

	; 道路
	if click_range( 60, windowy-70-titlebar_h, 60+32, windowy-70-titlebar_h+32 ) = 1 {
		if cursor_mode != "put_Road" {
			category_mode = "roadway"
			addon_menu_categories = 2
			addon_menu_categories_name(0) = "roadway"   : addon_menu_categories_icon(0) = 66
			addon_menu_categories_name(1) = "promenade" : addon_menu_categories_icon(1) = 67
		}
		cursor_mode = "put_Road"
	}

	; 線路
	if click_range( 92, windowy-70-titlebar_h, 92+32, windowy-70-titlebar_h+32 ) = 1 {
		cursor_mode = "put_Railroad"
		addon_menu_categories = 1
	}

	; 住居
	if click_range( 124, windowy-70-titlebar_h, 124+32, windowy-70-titlebar_h+32 ) = 1 {
		if cursor_mode != "put_Residential" {
			category_mode = "low"
			addon_menu_categories = 2
			addon_menu_categories_name(0) = "low"  : addon_menu_categories_icon(0) = 8
			addon_menu_categories_name(1) = "high" : addon_menu_categories_icon(1) = 9
		}
		cursor_mode = "put_Residential"
	}

	; 商業
	if click_range( 156, windowy-70-titlebar_h, 156+32, windowy-70-titlebar_h+32 ) = 1 {
		if cursor_mode != "put_Commercial" {
			category_mode = "low"
			addon_menu_categories = 2
			addon_menu_categories_name(0) = "low"  : addon_menu_categories_icon(0) = 20
			addon_menu_categories_name(1) = "high" : addon_menu_categories_icon(1) = 21
		}
		cursor_mode = "put_Commercial"
	}

	; オフィス
	if click_range( 188, windowy-70-titlebar_h, 188+32, windowy-70-titlebar_h+32 ) = 1 {
		cursor_mode = "put_Office"
		addon_menu_categories = 1
	}

	; 工業
	if click_range( 220, windowy-70-titlebar_h, 220+32, windowy-70-titlebar_h+32 ) = 1 {
		cursor_mode = "put_Industrial"
		addon_menu_categories = 1
	}

	; 農業
	if click_range( 252, windowy-70-titlebar_h, 252+32, windowy-70-titlebar_h+32 ) = 1 {
		cursor_mode = "put_Farm"
		addon_menu_categories = 1
	}

	; 公共施設
	if click_range( 284, windowy-70-titlebar_h, 284+32, windowy-70-titlebar_h+32 ) = 1 {
		cursor_mode = "put_Public"
		addon_menu_categories = 1
	}

	; 公園
	if click_range( 316, windowy-70-titlebar_h, 316+32, windowy-70-titlebar_h+32 ) = 1 {
		cursor_mode = "put_Park"
		addon_menu_categories = 1
	}

	; 水路
	if click_range( 348, windowy-70-titlebar_h, 348+32, windowy-70-titlebar_h+32 ) = 1 {
		cursor_mode = "put_Waterway"
		addon_menu_categories = 1
	}

	; 情報パネル
	if click_range( windowx-54-64, windowy-70-titlebar_h, windowx-54-32, windowy-70-titlebar_h+32 ) = 1 {
		gosub *information_panel
		addon_menu_categories = 0
		return
	}

	; 予算パネル
	if click_range( windowx-54-64, windowy-40-titlebar_h, windowx-54-32, windowy-40-titlebar_h+32 ) = 1 {
		gosub *budget_panel
		addon_menu_categories = 0
		return
	}
				
	; 統計
	if click_range( windowx-54-32, windowy-70-titlebar_h, windowx-54, windowy-70-titlebar_h+32 ) = 1 {
		if open_stat_menu = 0 {
			open_stat_menu = 1
			stat_mode = ""
		} else {
			open_stat_menu = 0
			stat_mode = ""
		}
		addon_menu_categories = 0
	}
			
	; 撤去
	if click_range( windowx-54, windowy-70-titlebar_h, windowx-54+32, windowy-70-titlebar_h+32 ) = 1 {
		cursor_mode = "delete"
		addon_menu_categories = 0
		stat_mode = "type"
	}
			
	; 設定
	if click_range( windowx-54-32, windowy-40-titlebar_h, windowx-54, windowy-40-titlebar_h+32 ) = 1 {
		gosub *setting
		addon_menu_categories = 0
	}
			
	; 保存
	if click_range( windowx-54, windowy-40-titlebar_h, windowx-54+32, windowy-40-titlebar_h+32 ) = 1 {
		gosub *save
		addon_menu_categories = 0
	}
			
	; 統計メニュー
	if open_stat_menu = 1 and click_range( windowx-92-32, windowy-70-titlebar_h-20, windowx-92-32+19, windowy-70-titlebar_h ) = 1 {
		if stat_mode != "type" {
			stat_mode = "type"
		} else {
			stat_mode = ""
		}
		return
	}
	if open_stat_menu = 1 and click_range( windowx-92-32+20, windowy-70-titlebar_h-20, windowx-92-32+39, windowy-70-titlebar_h ) = 1 {
		if stat_mode != "land_price" {
			stat_mode = "land_price"
		} else {
			stat_mode = ""
		}
		return
	}
	if open_stat_menu = 1 and click_range( windowx-92-32+40, windowy-70-titlebar_h-20, windowx-92-32+59, windowy-70-titlebar_h ) = 1 {
		if stat_mode != "crime_rate" {
			stat_mode = "crime_rate"
		} else {
			stat_mode = ""
		}
		return
	}
	if open_stat_menu = 1 and click_range( windowx-92-32+60, windowy-70-titlebar_h-20, windowx-92-32+79, windowy-70-titlebar_h ) = 1 {
		if stat_mode != "education_rate" {
			stat_mode = "education_rate"
		} else {
			stat_mode = ""
		}
		return
	}
	if open_stat_menu = 1 and click_range( windowx-92-32+80, windowy-70-titlebar_h-20, windowx-92-32+100, windowy-70-titlebar_h ) = 1 {
		if stat_mode != "happiness" {
			stat_mode = "happiness"
		} else {
			stat_mode = ""
		}
		return
	}

	; 時間の早さ切り替え / 一時停止
	if click_range(20, windowy-45-titlebar_h+10, 20+32, windowy-45-titlebar+10+32) = 1 and abs(cnt-changed_speed_cnt) > 2 {
		speed++
		if speed > 4 : speed = 1
		changed_speed_cnt = cnt
		return
	}
	if click_range(52, windowy-45-titlebar_h+10, 52+32, windowy-45-titlebar+10+32) = 1 and abs(cnt-changed_speed_cnt) > 2 {
		if pause = 0 : pause = 1 : else : pause = 0
		changed_speed_cnt = cnt
		return
	}

	; アドオン選択（*addon_select_menu）
	if cursor_mode != "normal" and cursor_mode != "delete" {
		if click_range( 10+35, windowy-70-titlebar_h-32, total_addons_on_menu*35+10+35, windowy-70-titlebar_h ) = 1 {
			selected_addon_number_on_menu = mousex/35-1
		}
	}

	; 高密度/低密度などのメニューのタイプ選択（*addon_select_menu）
	if cursor_mode != "normal" and cursor_mode != "delete" and addon_menu_categories > 1 {
		if click_range( 0, windowy-70-titlebar_h-32, 16, windowy-70-titlebar_h-16 ) = 1 {
			category_mode = addon_menu_categories_name(0)
			selected_addon_number_on_menu = 0
		}
		if click_range( 0, windowy-70-titlebar_h-16, 16, windowy-70-titlebar_h ) = 1 {
			category_mode = addon_menu_categories_name(1)
			selected_addon_number_on_menu = 0
		}
	}

	; カーソルモードが変更されたときの処理
	if before_cursor_mode != cursor_mode {
		selected_addon_number_on_menu = 0
	}

	; アドオンの削除（*delete_obj）
	if cursor_mode = "delete" and click_range( 0, 0, windowx, windowy-70-titlebar_h-32 ) = 1 {
		gosub *delete_obj
	}

	; 建物名変更（*show_detail, *fix_new_name）
	if showing_detail = 1 and click_range( show_detail_position_x+32+15+diax+25-20, show_detail_position_y-100-(diay1+5+diay2+5), show_detail_position_x+32+15+diax+25, show_detail_position_y-100-(diay1+5+diay2+5)+20 ) = 1 {
		objsize 200, 16 : new_name = "新しい建物名"
		pos windowx-255, 7 : input new_name : new_name_stat = stat

		objsize 40, 16
		pos windowx-255+200, 7 : button gosub "OK", *fix_new_name

		showing_new_name_input = 1
	}

	before_cursor_mode = cursor_mode

	; タイルの詳細を表示（*show_detail）
	if cursor_mode = "normal" and click_range( 0, 0, windowx, windowy-70-titlebar_h-32 ) = 1 and showing_new_name_input = 0 {
		if showing_detail = 0 {
			showing_detail = 1
			clicked_mx = mx : clicked_my = my
		} else {
			if mx != clicked_mx or my != clicked_my {
				clicked_mx = mx : clicked_my = my
			} else {
				showing_detail = 0
			}
		}
	}

	return

*addon_select_menu
	/*--------------------------------------アドオン選択メニュー----------------------------------*/
	if addon_menu_categories = 0 {
		return
	}

	stat_mode = "type"
	
	; 道路
	if cursor_mode = "put_Road" {
		if category_mode = "roadway" {
			category_addons = type_Two_lane_road
			category_addons_number = type_number_Two_lane_road
		}
		if category_mode = "promenade" {
			category_addons = type_Promenade
			category_addons_number = type_number_Promenade
		}
	}
	; 線路
	if cursor_mode = "put_Railroad" {
		category_addons = type_Two_lane_railroad
		category_addons_number = type_number_Two_lane_railroad
	}
	; 住居
	if cursor_mode = "put_Residential" {
		if category_mode = "low" {
			category_addons = type_low_density_residential
			category_addons_number = type_number_low_density_residential
		}
		if category_mode = "high" {
			category_addons = type_high_density_residential
			category_addons_number = type_number_high_density_residential
		}
	}
	; 商業
	if cursor_mode = "put_Commercial" {
		if category_mode = "low" {
			category_addons = type_low_density_commercial
			category_addons_number = type_number_low_density_commercial
		}
		if category_mode = "high" {
			category_addons = type_high_density_commercial
			category_addons_number = type_number_high_density_commercial
		}
	}
	; オフィス
	if cursor_mode = "put_Office" {
		category_addons = type_Office
		category_addons_number = type_number_Office
	}
	; 工業
	if cursor_mode = "put_Industrial" {
		category_addons = type_Industrial
		category_addons_number = type_number_Industrial
	}
	; 農業
	if cursor_mode = "put_Farm" {
		category_addons = type_Farm
		category_addons_number = type_number_Farm
	}
	; 公共施設
	if cursor_mode = "put_Public" {
		category_addons = type_Public
		category_addons_number = type_number_Public
	}
	; 公園
	if cursor_mode = "put_Park" {
		category_addons = type_Park
		category_addons_number = type_number_Park
	}
	; 水路
	if cursor_mode = "put_Waterway" {
		category_addons = type_Waterway
		category_addons_number = type_number_Waterway
	}

	; メニューにタイプが2つ以上ある場合、それぞれのタイプのアイコンを表示（高密度/低密度 など）
	if addon_menu_categories > 1 {
		color 127,127,127 : sboxf 200, 0, windowy-70-titlebar_h-32-40, 16, windowy-70-titlebar_h
		
		repeat addon_menu_categories
			gmode 2
			pos 0, windowy-70-titlebar_h-2-32+(16*cnt)
			if category_mode = addon_menu_categories_name(cnt) {
				gcopy addon_menu_categories_icon(cnt), 0, 16, 16, 16
			} else {
				gcopy addon_menu_categories_icon(cnt), 0, 0, 16, 16
			}
		loop
	}

	; 地区設定のアイコンと説明を用意
	area_addon_icon = -1
	if cursor_mode = "put_Residential" {
		area_addon_summary = "市民が住む場所を提供します。住居地区を設定すると住居建築物が建設されます。"
		area_addon_icon = 40
		if category_name = "low" {
			area_addon_number = -1 :  area_addon_name_JP = "低密度な住居地区"
		} else {
			area_addon_number = -2 :  area_addon_name_JP = "高密度な住居地区"
		}
	}
	if cursor_mode = "put_Commercial" {
		area_addon_summary = "市民が商業を営む場所を提供します。商業地区を設定すると商業建築物が建設されます。"
		area_addon_icon = 41
		if category_name = "low" {
			area_addon_number = -3 :  area_addon_name_JP = "低密度な商業地区"
		} else {
			area_addon_number = -4 :  area_addon_name_JP = "高密度な商業地区"
		}
	}
	if cursor_mode = "put_Office" {
		area_addon_summary = "市民が仕事する場を提供します。オフィス地区を設定するとオフィス建築物が建設されます。"
		area_addon_icon = 42
		area_addon_number = -5 :  area_addon_name_JP = "オフィス地区"
	}
	if cursor_mode = "put_Industrial" {
		area_addon_summary = "市民がモノを生産する場を提供します。工業地区を設定すると工業建築物が建設されます。"
		area_addon_icon = 43
		area_addon_number = -6 :  area_addon_name_JP = "工業地区"
	}
	if cursor_mode = "put_Farm" {
		area_addon_summary = "市民が農作物を生産する場を提供します。農業地区を設定すると畑や田、牧場が建設されます。"
		area_addon_icon = 43
		area_addon_number = -7 :  area_addon_name_JP = "農業地区"
	}

	; アドオン一覧を表示
	total_addons_on_menu = notemax

	if area_addon_icon != -1 : total_addons_on_menu += 1

	repeat total_addons_on_menu
		if area_addon_icon != -1 and cnt != 0 {
			notesel category_addons
			noteget cnt_addon_name, cnt-1
		} else : if area_addon_icon = -1 {
			notesel category_addons
			noteget cnt_addon_name, cnt
		} else : if cnt = 0 {
			cnt_addon_name = "area"
		}

		if cnt_addon_name = "" {
			break
		}

		if area_addon_icon != -1 and cnt != 0 {
			notesel category_addons_number
			noteget cnt_addon_number, cnt-1
		} else : if area_addon_icon = -1 {
			notesel category_addons_number
			noteget cnt_addon_number, cnt
		}
		
		if area_addon_icon != -1 and cnt = 0 {
			addon_icon_number_on_menu = area_addon_icon
		} else {
			addon_icon_number_on_menu = int(sdnl(addon_icon_number, int(cnt_addon_number), 0))
		}
		gmode 2 : pos 40+cnt*35, windowy-70-titlebar_h-32

		if cnt = selected_addon_number_on_menu {
			gcopy addon_icon_number_on_menu, 0, 32, 32, 32
		} else {
			gcopy addon_icon_number_on_menu, 0, 0, 32, 32
		}

		await 1
	loop

	; 選択されているアドオンの名前と説明を表示
	if area_addon_icon != -1 and clicked_addon_number = 0 {
		color 255,255,255 : font config_SystemFont, 14
		pos 40, windowy-70-titlebar_h-32-40+5 : mes area_addon_name_JP
					
		color 255,255,255 : font config_SystemFont, 10
		pos 40, windowy-70-titlebar_h-32-40+22 : mes area_addon_summary

		selected_addon_number = area_addon_number
		
	} else {
		if area_addon_icon != -1 and cnt != 0 {
			notesel category_addons_number
			noteget selected_addon_number, selected_addon_number_on_menu-1
		} else : if area_addon_icon = -1 {
			notesel category_addons_number
			noteget selected_addon_number, selected_addon_number_on_menu
		}
		
		selected_addon_number = int(selected_addon_number)
	
		selected_addon_name_jp = sdnl(addon_name, selected_addon_number, 1)
		selected_addon_summary = sdnl(addon_summary, selected_addon_number, 0)
	
		color 255, 255, 255 : font config_SystemFont, 14
		pos 40, windowy-70-titlebar_h-32-40+5 : mes selected_addon_name_jp
	
		color 255, 255, 255 : font config_SystemFont, 10
		pos 40, windowy-70-titlebar_h-32-40+22 : mes selected_addon_summary
	}

	return

*build_on_reserved_area
	/*----------------------------地区設定された地区にアドオンを設置------------------------------*/
	mx_tmp = mx : my_tmp = my : mz_tmp = z
	mx = x : my = y : mz = z
	cursor_mode_tmp = cursor_mode
	cursor_mode = ""

	; 住居
	if reservation(mx,my,mz) = "low_density_residential" {
		category_addons = type_low_density_residential
		category_addons_number = type_number_low_density_residential
		cursor_mode = "put_Residential"
	}
	if reservation(mx,my,mz) = "high_density_residential" {
		category_addons = type_high_density_residential
		category_addons_number = type_number_high_density_residential
		cursor_mode = "put_Residential"
	}
	
	; 商業
	if reservation(mx,my,mz) = "low_density_commercial" {
		category_addons = type_low_density_commercial
		category_addons_number = type_number_low_density_commercial
		cursor_mode = "put_Commercial"
	}
	if reservation(mx,my,mz) = "high_density_commercial" {
		category_addons = type_high_density_commercial
		category_addons_number = type_number_high_density_commercial
		cursor_mode = "put_Commercial"
	}
	
	; オフィス
	if reservation(mx,my,mz) = "office" {
		category_addons = type_office
		category_addons_number = type_number_office
		cursor_mode = "put_Office"
	}
	
	; 工業
	if reservation(mx,my,mz) = "industrial" {
		category_addons = type_industrial
		category_addons_number = type_number_industrial
		cursor_mode = "put_Industrial"
	}
	
	; 農業
	if reservation(mx,my,mz) = "farm" {
		category_addons = type_farm
		category_addons_number = type_number_farm
		cursor_mode = "put_Farm"
	}

	if cursor_mode = "" : return

	notesel category_addons_number
	noteget selected_addon_number, rnd(notemax)
	selected_addon_number = int(selected_addon_number)

	gosub *build

	; 問題なく建設できた場合は予約取り消し
	if category(mx,my,mz,0) != "tile" {
		reservation(mx,my,mz) = "none"
	}

	mx = mx_tmp : my = my_tmp : mz = mz_tmp
	cursor_mode = cursor_mode_tmp

	return

*build
	/*----------------------------------アドオンの設置--------------------------------------------*/
	if selected_addon_number = map(mx,my,mz,0) : return
	
	; 地区設定
	if selected_addon_number < 0 {
		if category(mx,my,mz,0) = "road" or category(mx,my,mz,0) = "railroad" or category(mx,my,mz) = "station" or category(mx,my,mz) = "waterway" or category(mx,my,mz,0) = "port" {
			return
		}
		
		gosub *delete_obj

		if selected_addon_number = -1 : reservation(mx,my,mz) = "low_density_residential"
		if selected_addon_number = -2 : reservation(mx,my,mz) = "high_density_residential"
		if selected_addon_number = -3 : reservation(mx,my,mz) = "low_density_commercial"
		if selected_addon_number = -4 : reservation(mx,my,mz) = "high_density_commercial"
		if selected_addon_number = -5 : reservation(mx,my,mz) = "office"
		if selected_addon_number = -6 : reservation(mx,my,mz) = "industrial"
		if selected_addon_number = -7 : reservation(mx,my,mz) = "farm"

		return
	}
	
	; 道路/線路/水路
	if cursor_mode = "put_Road" or cursor_mode = "put_Railroad" or cursor_mode = "put_Waterway" {
		; 障害物があれば削除
		name_before = name(mx,my,mz,0) : map_before = map(mx,my,mz,0)
		obj_type_before = obj_type(mx,my,mz,0) : obj_dire_before = obj_dire(mx,my,mz,0)
		category_before = category(mx,my,mz,0)
		
		if map(mx,my,mz) != tile_addon_number : gosub *delete_obj

		; 線路または水路と交差する場合
		if category_before = "railroad" and cursor_mode = "put_Road" {
			category(mx,my,mz,1) = "train_crossing"
		}
		if category_before = "road" and cursor_mode = "put_Railroad" {
			category(mx,my,mz,1) = "train_crossing"
		}
		if category_before = "waterway" and (cursor_mode = "put_Road" or cursor_mode = "put_Railroad") {
			name(mx,my,mz,1) = name_before
			map(mx,my,mz,1) = map_before
			obj_type(mx,my,mz,1) = obj_type_before
			obj_dire(mx,my,mz,1) = obj_dire_before
			category(mx,my,mz,1) = "bridge"
		}

		; とりあえず工事中のタイプに指定
		map(mx,my,mz) = selected_addon_number
		name(mx,my,mz) = sdnl(addon_name, selected_addon_number, 0)

		if cursor_mode = "put_Road"     : category(mx,my,mz,0) = "road"
		if cursor_mode = "put_Railroad" {
			if sdnl(addon_type, selected_addon_number, 0) = "station" {
				category(mx,my,mz,0) = "station"
			} else {
				category(mx,my,mz,0) = "railroad"
			}
		}
		if cursor_mode = "put_Waterway" {
			if sdnl(addon_type, selected_addon_number, 0) = "port" {
				category(mx,my,mz,0) = "port"
			} else {
				category(mx,my,mz,0) = "waterway"
			}
		}

		if obj_type(mx,my,mz) != element2(selected_addon_number, addon_use_types_name, "under_construction")  {
			new_roadtype_x(under_construction_tiles) = mx
			new_roadtype_y(under_construction_tiles) = my
			under_construction_tiles ++
		}

		obj_type(mx,my,mz) = element2(selected_addon_number, addon_use_types_name, "under_construction")
		obj_dire(mx,my,mz) = 0
		
		return
	}

	; 住居/商業/オフィス/工業/農業/公共施設/公園
	if cursor_mode = "put_Residential" or cursor_mode = "put_Commercial" or cursor_mode = "put_Office" or cursor_mode = "put_Industrial" or cursor_mode = "put_Farm" or cursor_mode = "put_Public" or cursor_mode = "put_Park" {
		; 周囲のアドオンのカテゴリを取得
		left_chip_category   = safesearch_str(category, mx-1, my, mz, 0, mapsize_x, mapsize_y)
		top_chip_category    = safesearch_str(category, mx, my-1, mz, 0, mapsize_x, mapsize_y)
		bottom_chip_category = safesearch_str(category, mx, my+1, mz, 0, mapsize_x, mapsize_y)
		right_chip_category  = safesearch_str(category, mx+1, my, mz, 0, mapsize_x, mapsize_y)
	
		left_chip_category_2   = safesearch_str(category, mx-1, my, mz, 1, mapsize_x, mapsize_y)
		top_chip_category_2    = safesearch_str(category, mx, my-1, mz, 1, mapsize_x, mapsize_y)
		bottom_chip_category_2 = safesearch_str(category, mx, my+1, mz, 1, mapsize_x, mapsize_y)
		right_chip_category_2  = safesearch_str(category, mx+1, my, mz, 1, mapsize_x, mapsize_y)

		; アドオンに建設可能回数が設けられている場合
		if int(sdnl(addon_build_limit, selected_addon_number, 0)) >= 1 {
			s = 0
			sz = 0
			repeat mapsize_x
				sx = cnt
				repeat mapsize_y
					sy = cnt
					if map(sx,sy,sz,0) = selected_addon_number : s ++
				loop
			loop
			wait 10		; ←waitを入れないと誤作動を起こすため
			
			if s + 1 > addon_build_limit(addon_num_buf) {
				dialog "この建物は既に建設可能回数を超えています！"
				return
			}
		}
		
		; 建設地に道路などの障害物がある場合
		if (category(mx,my,mz,0) = "road" or category(mx,my,mz,0) = "railroad" or category(mx,my,mz,0) = "waterway") {
			return
		}

		; adatファイル内でのタイプのIDを取得
		build_type_number = element2(selected_addon_number, addon_use_types_name, "null")

		; 道路に接続されていない場所に建設しようとしている場合
		if left_chip_category != "road" and top_chip_category != "road" and bottom_chip_category != "road" and right_chip_category != "road" {
			; 農業地区と公園は除外とし、下向きに設定する
			if cursor_mode = "put_Farm" or cursor_mode = "put_Park" {
				build_direction_number = 2
			} else {
				return
			}
			
		} else {		; 道路に接続されている場合
			; 向きを決定（左上下右の順）
			done = 0
			cant_build_left = 0 : cant_build_top = 0 : cant_build_bottom = 0 : cant_build_right = 0

			while (done = 0)
				if left_chip_category = "road" and cant_build_left = 0 {
					build_direction_number = 0
				} else : if top_chip_category = "road" and cant_build_top = 0 {
					build_direction_number = 1
				} else : if bottom_chip_category = "road" and cant_build_bottom = 0 {
					build_direction_number = 2
				} else : if right_chip_category = "road" and cant_build_right = 0 {
					build_direction_number = 3
				} else {
					return
				}

				; 2マス以上の建築物の場合、建設する方向にほかの建築物がないか確認
				sx = mx : sy = my : sz = 0
				cant_build = 0
				repeat int(sdnl3(addon_chip_x, selected_addon_number, build_type_number, build_direction_number))
					repeat int(sdnl3(addon_chip_y, selected_addon_number, build_type_number, build_direction_number))
						if category(sx,sy,sz,0) != "tile" {
							if build_direction_number = 0 : cant_build_left = 1
							if build_direction_number = 1 : cant_build_top = 1
							if build_direction_number = 2 : cant_build_bottom = 1
							if build_direction_number = 3 : cant_build_right = 1
							cant_build = 1
						}

						//sx_position = sx * CHIP_SIZE/2 - sy * CHIP_SIZE/2 - camx
						//sy_position = sy * CHIP_SIZE/4 + sx * CHIP_SIZE/4 - camy
						//redraw 1 : color 155, 0, 0 : boxf sx_position, sy_position, sx_position+64, sy_position+32 : wait 50		; 現在処理しているマスの表示

						if int(sdnl3(addon_chip_x, selected_addon_number, build_type_number, build_direction_number)) > 1 and int(sdnl3(addon_chip_y, selected_addon_number, build_type_number, build_direction_number)) > 1 and (build_direction_number = 0 or build_direction_number = 3) {
							if cnt = int(sdnl3(addon_chip_y, selected_addon_number, build_type_number, build_direction_number))-1 {
								sy = my
							} else {
								sy ++
							}
						} else : if int(sdnl3(addon_chip_y, selected_addon_number, build_type_number, build_direction_number)) > 1 {
							if build_direction_number = 2 {
								sy --
							} else {
								sy ++
							}
						}
					loop

					if int(sdnl3(addon_chip_x, selected_addon_number, build_type_number, build_direction_number)) > 1 and int(sdnl3(addon_chip_y, selected_addon_number, build_type_number, build_direction_number)) > 1 and int(sdnl3(addon_chip_y, selected_addon_number, build_type_number, build_direction_number)) > 1 and (build_direction_number = 1 or build_direction_number = 2) {
						sy = my
						sx ++
					} else : if int(sdnl3(addon_chip_x, selected_addon_number, build_type_number, build_direction_number)) > 1 {
						if build_direction_number = 3 {
							sx --
						} else {
							sx ++
						}
					}
				loop

				if cant_build = 0 : done = 1
			wend
		}

		; adatファイル内での向きのIDを取得
		if build_direction_number = 0  : tmp = "left"
		if build_direction_number = 1  : tmp = "top"
		if build_direction_number = 2  : tmp = "bottom"
		if build_direction_number = 3  : tmp = "right"
		
		build_direction_number_ID = element3(selected_addon_number, build_type_number, addon_dire_names, tmp)

		; アドオンを設置することによって影響される地価、犯罪率、教育度とその影響範囲
		addon_land_price_influence__tmp = int(sdnl(addon_land_price_influence, selected_addon_number, 0))
		addon_land_price_influence_grid__tmp = int(sdnl(addon_land_price_influence, selected_addon_number, 1))

		addon_crime_rate_influence__tmp = int(sdnl(addon_crime_rate_influence, selected_addon_number, 0))
		addon_crime_rate_influence_grid__tmp = int(sdnl(addon_crime_rate_influence, selected_addon_number, 1))

		addon_education_rate_influence__tmp = int(sdnl(addon_education_rate_influence, selected_addon_number, 0))
		addon_education_rate_influence_grid__tmp = int(sdnl(addon_education_rate_influence, selected_addon_number, 1))

		p = 1

		; アドオン情報の書き込み時にrepeatする回数
		repeat_x = int(sdnl3(addon_chip_x, selected_addon_number, build_type_number, build_direction_number_ID))
		repeat_y = int(sdnl3(addon_chip_y, selected_addon_number, build_type_number, build_direction_number_ID))

		; タイルにアドオンの情報を書き込み
		sx = mx : sy = my : sz = 0
		
		repeat repeat_x
			repeat repeat_y
				map(sx,sy,sz,0)				= int(selected_addon_number)
				name(sx,sy,sz,0)			= sdnl(addon_name, selected_addon_number, 0)
				
				category(sx,sy,sz,0)		= sdnl(addon_type, selected_addon_number, 0)
				category(sx,sy,sz,1)		= sdnl(addon_type, selected_addon_number, 1)
				category(sx,sy,sz,2)		= sdnl(addon_type, selected_addon_number, 2)

				obj_type(sx,sy,sz,0)		= build_type_number
				obj_dire(sx,sy,sz,0)		= build_direction_number_ID

				obj_serial_num(sx,sy,sz)	= next_obj_serial_num : next_obj_serial_num ++

				if repeat_x > 1 {
					obj_use_tiles(sx,sy,sz,0)	= repeat_x
				} else {
					obj_use_tiles(sx,sy,sz,0)	= 0
				}
				if repeat_y > 1 {
					obj_use_tiles(sx,sy,sz,1)	= repeat_y
				} else {
					obj_use_tiles(sx,sy,sz,1)	= 0
				}
				
				obj_tiles(sx,sy,sz,0)		= sx-mx
				obj_tiles(sx,sy,sz,1)		= sy-my

				crop(sx,sy,sz)				= sdnl(addon_crop, selected_addon_number, 0)
				crop_amount(sx,sy,sz)		= int(sdnl(addon_crop, selected_addon_number, 1))

				reservation(sx,sy,sz)		= "none"

				original_name(sx,sy,sz)		= ""

				from_build = 1 : gosub *get_addon_drow_position_new
				
				if repeat_x > 1 and repeat_y > 1 and (build_direction_number = 0 or build_direction_number = 3) {
					if cnt = repeat_y-1 {
						sy = my
					} else {
						sy ++
					}
				} else : if repeat_y > 1 {
					if build_direction_number = 2 {
						sy --
					} else {
						sy ++
					}
				}
			loop

			if repeat_x > 1 and repeat_y > 1 and (build_direction_number = 1 or build_direction_number = 2) {
				sy = my
				sx ++
			} else : if repeat_x > 1 {
				if build_direction_number = 3 {
					sx --
				} else {
					sx ++
				}
			}
		loop

		; 地価の変動
		if addon_land_price_influence__tmp != 0 {
			if addon_land_price_influence_grid__tmp != 0 {
				add_value = addon_land_price_influence__tmp / addon_land_price_influence_grid__tmp * p
			} else : if addon_land_price_influence_grid__tmp = 0 {
				add_value = 0
			}
									
			round = 0						
			for round, 1, addon_land_price_influence_grid__tmp+1, 1							
				repeat (round*2-1)
					if mx+cnt-(round-1)>0 and mx+cnt-(round-1)<mapsize_x and my+round-1>0 and my+round-1<mapsize_y {
						land_price(mx+cnt-(round-1),my+round-1,mz) += int( addon_land_price_influence__tmp - (add_value*(round-1)) )
					}
				loop			
				repeat (round*2-1)
					if mx+cnt-(round-1)>0 and mx+cnt-(round-1)<mapsize_x and my-round+1>0 and my-round+1<mapsize_y {
						land_price(mx+cnt-(round-1),my-round+1,mz) += int( addon_land_price_influence__tmp - (add_value*(round-1)) )
					}
				loop
				repeat (round*2-1)
					if mx+round-1>0 and mx+round-1<mapsize_x and my+cnt-(round-1)>0 and my+cnt-(round-1)<mapsize_y {
						land_price(mx+round-1,my+cnt-(round-1),mz) += int( addon_land_price_influence__tmp - (add_value*(round-1)) )
					}
				loop
				repeat (round*2-1)
					if mx-round+1>0 and mx-round+1<mapsize_x and my+cnt-(round-1)>0 and my+cnt-(round-1)<mapsize_y {
						land_price(mx-round+1,my+cnt-(round-1),mz) += int( addon_land_price_influence__tmp - (add_value*(round-1)) )
					}
				loop
			next
		}
	
		; 犯罪率の変動
		if addon_crime_rate_influence__tmp != 0 {
			add_value = addon_crime_rate_influence__tmp / addon_crime_rate_influence_grid__tmp * p
				
			round = 0	
			for round, 1, addon_crime_rate_influence_grid__tmp+1, 1
				repeat (round*2-1)
					if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize_x and (my+round-1) >= 0 and (my+round-1) <= mapsize_y {
						crime_rate(mx+cnt-(round-1),my+round-1,mz) += int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
						if crime_rate(mx+cnt-(round-1),my+round-1,mz) > 100  : crime_rate(mx+cnt-(round-1),my+round-1) = 100
						if crime_rate(mx+cnt-(round-1),my+round-1,mz) < -100 : crime_rate(mx+cnt-(round-1),my+round-1) = -100
					}
				loop
				repeat (round*2-1)
					if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize_x and (my-round+1) >= 0 and (my-round+1) <= mapsize_y {
						crime_rate(mx+cnt-(round-1),my-round+1,mz) += int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
						if crime_rate(mx+cnt-(round-1),my-round+1,mz) > 100  : crime_rate(mx+cnt-(round-1),my-round+1) = 100
						if crime_rate(mx+cnt-(round-1),my-round+1,mz) < -100 : crime_rate(mx+cnt-(round-1),my-round+1) = -100
					}
				loop
				repeat (round*2-1)
					if (mx+round-1) >= 0 and (mx+round-1) <= mapsize_x and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize_y {
						crime_rate(mx+round-1,my+cnt-(round-1),mz) += int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
						if crime_rate(mx+round-1,my+cnt-(round-1),mz) > 100  : crime_rate(mx+round-1,my+cnt-(round-1)) = 100
						if crime_rate(mx+round-1,my+cnt-(round-1),mz) < -100 : crime_rate(mx+round-1,my+cnt-(round-1)) = -100
					}
				loop
				repeat (round*2-1)
					if (mx-round-1) >= 0 and (mx-round-1) <= mapsize_x and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize_y {
						crime_rate(mx-round+1,my+cnt-(round-1),mz) += int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
						if crime_rate(mx-round+1,my+cnt-(round-1),mz) > 100  : crime_rate(mx-round+1,my+cnt-(round-1)) = 100
						if crime_rate(mx-round+1,my+cnt-(round-1),mz) < -100 : crime_rate(mx-round+1,my+cnt-(round-1)) = -100
					}
				loop
			next
		}
	
		; 教育度の変動
		if addon_education_rate_influence__tmp != 0 {
			add_value = addon_education_rate_influence__tmp / addon_education_rate_influence_grid__tmp * p
			round = 0
			for round, 1, addon_education_rate_influence_grid__tmp+1, 1
				repeat (round*2-1)
					if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize_x and (my+round-1) >= 0 and (my+round-1) <= mapsize_y {
						education_rate(mx+cnt-(round-1),my+round-1,mz) += int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
					}
				loop
				repeat (round*2-1)
					if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize_x and (my-round+1) >= 0 and (my-round+1) <= mapsize_y {
						education_rate(mx+cnt-(round-1),my-round+1,mz) += int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
					}
				loop
				repeat (round*2-1)
					if (mx+round-1) >= 0 and (mx+round-1) <= mapsize_x and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize_y {
						education_rate(mx+round-1,my+cnt-(round-1),mz) += int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
					}
				loop
				repeat (round*2-1)
					if (mx-round-1) >= 0 and (mx-round-1) <= mapsize_x and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize_y {
						education_rate(mx-round+1,my+cnt-(round-1),mz) += int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
					}
				loop
			next
		}

		; 都市全体の収容可能人数或いは求人数を増やし、RCOIFメーターを変動
		if category(mx,my,mz,0) = "residential" {
			map_total_Residential_maximum_capacity += int(sdnl(addon_maximum_capacity, selected_addon_number, 0))
			Vacancies += int(sdnl(addon_maximum_capacity, selected_addon_number, 0))
			map_demand_Residential -= 1
		}
		if category(mx,my,mz,0) = "commercial" {
			map_total_Commercial_maximum_capacity += int(sdnl(addon_maximum_capacity, selected_addon_number, 0))
			Vacancies += int(sdnl(addon_maximum_capacity, selected_addon_number, 0))
			map_demand_Commercial -= 1
		}
		if category(mx,my,mz,0) = "office" {
			map_total_Office_maximum_capacity += int(sdnl(addon_maximum_capacity, selected_addon_number, 0))
			Vacancies += int(sdnl(addon_maximum_capacity, selected_addon_number, 0))
			map_demand_Office -= 1
		}
		if category(mx,my,mz,0) = "industrial" {
			map_total_Industrial_maximum_capacity += int(sdnl(addon_maximum_capacity, selected_addon_number, 0))
			Vacancies += int(sdnl(addon_maximum_capacity, selected_addon_number, 0))
			map_demand_Industrial -= 1
		}
		if category(mx,my,mz,0) = "farm" {
			map_total_Farm_maximum_capacity += int(sdnl(addon_maximum_capacity, selected_addon_number, 0))
			Vacancies += int(sdnl(addon_maximum_capacity, selected_addon_number, 0))
			map_demand_Farm -= 1
		}
		if category(mx,my,mz,0) = "public" {
			map_total_Public_maximum_capacity += int(sdnl(addon_maximum_capacity, selected_addon_number, 0))
			Vacancies += int(sdnl(addon_maximum_capacity, selected_addon_number, 0))
		}
	}
	
	return

*build_roadtypes
	/*----------------------------------道路のタイプと向きを設定----------------------------------*/
	if from_Delete_obj = 1 {
		new_roadtype_x(under_construction_tiles) = mx : new_roadtype_y(under_construction_tiles) = my
		under_construction_tiles ++
	}
	
	repeat under_construction_tiles
		sx = new_roadtype_x(cnt) : sy = new_roadtype_y(cnt) : sz = 0
		center_x = sx : center_y = sy

		repeat 5
			if from_Delete_obj = 1 { from_Delete_obj = 0 : continue }
			if cnt = 1 { sx = center_x - 1 : sy = center_y }
			if cnt = 2 { sx = center_x     : sy = center_y - 1 }
			if cnt = 3 { sx = center_x     : sy = center_y + 1 }
			if cnt = 4 { sx = center_x + 1 : sy = center_y }
			
			obj_type_tmp  = "" : obj_dire_tmp = ""
	
			; 周囲のアドオンのカテゴリを取得
			left_chip_category   = safesearch_str(category, sx-1, sy, sz, 0, mapsize_x, mapsize_y)
			top_chip_category    = safesearch_str(category, sx, sy-1, sz, 0, mapsize_x, mapsize_y)
			bottom_chip_category = safesearch_str(category, sx, sy+1, sz, 0, mapsize_x, mapsize_y)
			right_chip_category  = safesearch_str(category, sx+1, sy, sz, 0, mapsize_x, mapsize_y)
			
			left_chip_category_2   = safesearch_str(category, sx-1, sy, sz, 1, mapsize_x, mapsize_y)
			top_chip_category_2    = safesearch_str(category, sx, sy-1, sz, 1, mapsize_x, mapsize_y)
			bottom_chip_category_2 = safesearch_str(category, sx, sy+1, sz, 1, mapsize_x, mapsize_y)
			right_chip_category_2  = safesearch_str(category, sx+1, sy, sz, 1, mapsize_x, mapsize_y)
				
			; 道路
			if category(sx,sy,sz,0) = "road" {
				correct = iforandcorrect_3(left_chip_category, left_chip_category_2, top_chip_category, top_chip_category_2, bottom_chip_category, bottom_chip_category_2, right_chip_category, right_chip_category_2, "road", "bridge", "train_crossing")
				
				; 周囲の道路接続が1つ（行き止まり）
				if correct = 1 {
					obj_type_tmp = "dead_end"
					if left_chip_category = "road" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing"       : obj_dire_tmp = "left"
					if top_chip_category = "road" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing"          : obj_dire_tmp = "top"
					if bottom_chip_category = "road" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing" : obj_dire_tmp = "bottom"
					if right_chip_category = "road" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing"    : obj_dire_tmp = "right"
				}
	
				; 周囲の道路接続が1つ（曲がり角or直線）
				if correct = 2 {
					; 曲がり角
					if (left_chip_category = "road" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing") and (top_chip_category = "road" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing") {
						obj_type_tmp = "turn" : obj_dire_tmp = "left-top"
					}
					if (top_chip_category = "road" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing") and (right_chip_category = "road" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing") {
						obj_type_tmp = "turn" : obj_dire_tmp = "right-top"
					}
					if (left_chip_category = "road" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing") and (bottom_chip_category = "road" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing") {
						obj_type_tmp = "turn" : obj_dire_tmp = "left-bottom"
					}
					if (bottom_chip_category = "road" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing") and (right_chip_category = "road" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing") {
						obj_type_tmp = "turn" : obj_dire_tmp = "right-bottom"
					}
	
					; 直線
					if (left_chip_category = "road" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing") and (right_chip_category = "road" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing") {
						obj_type_tmp = "default" : obj_dire_tmp = "depth"
					}
					if (top_chip_category = "road" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing") and (bottom_chip_category = "road" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing") {
						obj_type_tmp = "default" : obj_dire_tmp = "width"
					}
				}

				; 周囲の道路接続が3つ（T字型交差点）
				if correct = 3 {
					obj_type_tmp = "intersection_T"
					if (left_chip_category = "road" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing") and (top_chip_category = "road" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing") and (bottom_chip_category = "road" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing") {
						obj_dire_tmp = "left-top-bottom"
					}
					if (left_chip_category = "road" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing") and (right_chip_category = "road" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing") and (top_chip_category = "road" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing") {
						obj_dire_tmp = "left-right-top"
					}
					if (left_chip_category = "road" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing") and (right_chip_category = "road" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing") and (bottom_chip_category = "road" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing") {
						obj_dire_tmp = "left-right-bottom"
					}
					if (right_chip_category = "road" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing") and (top_chip_category = "road" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing") and (bottom_chip_category = "road" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing") {
						obj_dire_tmp = "right-top-bottom"
					}
				}

				; 周囲の道路接続が4つ（十字型交差点）または周りに接続する道路がない場合
				if correct = 4 or correct = 0 {
					obj_type_tmp = "intersection_cross" : obj_dire_tmp = "null"
				}
			}

			; 線路/駅
			if category(sx,sy,sz,0) = "railroad" or category(sx,sy,sz,0) = "station" {
				correct = iforandcorrect_4(left_chip_category, left_chip_category_2, top_chip_category, top_chip_category_2, bottom_chip_category, bottom_chip_category_2, right_chip_category, right_chip_category_2, "railroad", "station", "bridge", "train_crossing")
				
				; 周囲の道路接続が1つ（行き止まり）
				if correct = 1 {
					obj_type_tmp = "dead_end"
					if left_chip_category = "railroad" or left_chip_category = "station" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing"         : obj_dire_tmp = "left"
					if top_chip_category = "railroad" or top_chip_category = "station" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing"             : obj_dire_tmp = "top"
					if bottom_chip_category = "railroad" or bottom_chip_category = "station" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing" : obj_dire_tmp = "bottom"
					if right_chip_category = "railroad" or right_chip_category = "station" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing"     : obj_dire_tmp = "right"
				}
	
				; 周囲の道路接続が1つ（曲がり角or直線）
				if correct = 2 {
					; 曲がり角（線路のみ）
					if category(sx,sy,sz,0) = "railroad" {
						if (left_chip_category = "railroad" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing") and (top_chip_category = "railroad" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing") {
							obj_type_tmp = "turn" : obj_dire_tmp = "left-top"
						}
						if (top_chip_category = "railroad" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing") and (right_chip_category = "railroad" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing") {
							obj_type_tmp = "turn" : obj_dire_tmp = "right-top"
						}
						if (left_chip_category = "railroad" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing") and (bottom_chip_category = "railroad" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing") {
							obj_type_tmp = "turn" : obj_dire_tmp = "left-bottom"
						}
						if (bottom_chip_category = "railroad" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing") and (right_chip_category = "railroad" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing") {
							obj_type_tmp = "turn" : obj_dire_tmp = "right-bottom"
						}
					}
	
					; 直線
					if (left_chip_category = "railroad" or left_chip_category = "station" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing") and (right_chip_category = "railroad" or right_chip_category = "station" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing") {
						obj_type_tmp = "default" : obj_dire_tmp = "depth"
					}
					if (top_chip_category = "railroad" or top_chip_category = "station" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing") and (bottom_chip_category = "railroad" or bottom_chip_category = "station" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing") {
						obj_type_tmp = "default" : obj_dire_tmp = "width"
					}
				}

				; 周囲の道路接続が3つ（T字型交差点、線路のみ）
				if correct = 3 and category(sx,sy,sz,0) = "railroad" {
					obj_type_tmp = "intersection_T"
					if (left_chip_category = "railroad" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing") and (top_chip_category = "railroad" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing") and (bottom_chip_category = "railroad" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing") {
						obj_dire_tmp = "left-top-bottom"
					}
					if (left_chip_category = "railroad" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing") and (right_chip_category = "railroad" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing") and (top_chip_category = "railroad" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing") {
						obj_dire_tmp = "left-right-top"
					}
					if (left_chip_category = "railroad" or left_chip_category_2 = "bridge" or left_chip_category_2 = "train_crossing") and (right_chip_category = "railroad" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing") and (bottom_chip_category = "railroad" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing") {
						obj_dire_tmp = "left-right-bottom"
					}
					if (right_chip_category = "railroad" or right_chip_category_2 = "bridge" or right_chip_category_2 = "train_crossing") and (top_chip_category = "railroad" or top_chip_category_2 = "bridge" or top_chip_category_2 = "train_crossing") and (bottom_chip_category = "railroad" or bottom_chip_category_2 = "bridge" or bottom_chip_category_2 = "train_crossing") {
						obj_dire_tmp = "right-top-bottom"
					}
				}

				; 周囲の道路接続が4つ（十字型交差点）または周りに接続する道路がない場合（線路のみ）
				if (correct = 4 or correct = 0) and category(sx,sy,sz,0) = "railroad" {
					obj_type_tmp = "intersection_cross" : obj_dire_tmp = "null"
				}
			}

			; 水路/港
			if category(sx,sy,sz,0) = "waterway" or category(sx,sy,sz,0) = "port" {
				; 周囲のアドオンのカテゴリを取得
				left_top_chip_category     = safesearch_str(category, sx-1, sy-1, sz, 0, mapsize_x, mapsize_y)
				right_top_chip_category    = safesearch_str(category, sx+1, sy-1, sz, 0, mapsize_x, mapsize_y)
				left_bottom_chip_category  = safesearch_str(category, sx-1, sy+1, sz, 0, mapsize_x, mapsize_y)
				right_bottom_chip_category = safesearch_str(category, sx+1, sy+1, sz, 0, mapsize_x, mapsize_y)

				left_top_chip_category_2     = safesearch_str(category, sx-1, sy-1, sz, 1, mapsize_x, mapsize_y)
				right_top_chip_category_2    = safesearch_str(category, sx+1, sy-1, sz, 1, mapsize_x, mapsize_y)
				left_bottom_chip_category_2  = safesearch_str(category, sx-1, sy+1, sz, 1, mapsize_x, mapsize_y)
				right_bottom_chip_category_2 = safesearch_str(category, sx+1, sy+1, sz, 1, mapsize_x, mapsize_y)
				
				correct = iforandcorrect_2(left_chip_category, left_chip_category_2, top_chip_category, top_chip_category_2, bottom_chip_category, bottom_chip_category_2, right_chip_category, right_chip_category_2, "waterway", "bridge")

				; 周囲の道路接続が1つ（行き止まり）
				if correct = 1 {
					obj_type_tmp = "river_dead_end"
					if left_chip_category = "waterway" or left_chip_category = "port" or left_chip_category = "port" or left_chip_category_2 = "bridge"     : obj_dire_tmp = "left"
					if top_chip_category = "waterway" or left_chip_category = "port" or top_chip_category = "port" or top_chip_category_2 = "bridge"       : obj_dire_tmp = "top"
					if bottom_chip_category = "waterway" or left_chip_category = "port" or bottom_chip_category = "port" or bottom_chip_category_2 = "bridge" : obj_dire_tmp = "bottom"
					if right_chip_category = "waterway" or right_chip_category = "port" or right_chip_category = "port" or bottom_chip_category_2 = "bridge"   : obj_dire_tmp = "right"
				}

				; 周囲の道路接続が2つ（直線or曲がり角）
				if correct = 2 {
					; 曲がり角
					if (left_chip_category = "waterway" or left_chip_category = "port" or left_chip_category_2 = "bridge") and (top_chip_category = "waterway" or top_chip_category = "port" or top_chip_category_2 = "bridge") {
						if left_top_chip_category = "waterway" or left_top_chip_category = "port" or left_top_chip_category_2 = "bridge" : obj_type_tmp = "turn" :  else : obj_type_tmp = "river_turn"
						obj_dire_tmp = "left-top"
					}
					if (top_chip_category = "waterway" or top_chip_category = "port" or top_chip_category_2 = "bridge") and (right_chip_category = "waterway" or right_chip_category = "port" or right_chip_category_2 = "bridge") {
						if right_top_chip_category = "waterway" or right_top_chip_category = "port" or right_top_chip_category_2 = "bridge" : obj_type_tmp = "turn" :  else : obj_type_tmp = "river_turn"
						obj_dire_tmp = "right-top"
					}
					if (left_chip_category = "waterway" or left_chip_category = "port" or left_chip_category = "port" or left_chip_category_2 = "bridge") and (bottom_chip_category = "waterway" or left_chip_category = "port" or bottom_chip_category = "port" or bottom_chip_category_2 = "bridge") {
						if left_bottom_chip_category = "waterway" or left_bottom_chip_category = "port" or left_bottom_chip_category_2 = "bridge" : obj_type_tmp = "turn" :  else : obj_type_tmp = "river_turn"
						obj_dire_tmp = "left-bottom"
					}
					if (bottom_chip_category = "waterway" or left_chip_category = "port" or bottom_chip_category = "port" or bottom_chip_category_2 = "bridge") and (right_chip_category = "waterway" or right_chip_category = "port" or right_chip_category = "port" or bottom_chip_category_2 = "bridge") {
						if right_bottom_chip_category = "waterway" or right_bottom_chip_category = "port" or right_bottom_chip_category_2 = "bridge" : obj_type_tmp = "turn" :  else : obj_type_tmp = "river_turn"
						obj_dire_tmp = "right-bottom"
					}
					
					; 直線
					if (left_chip_category = "waterway" or left_chip_category = "port" or left_chip_category = "port" or left_chip_category_2 = "bridge") and (right_chip_category = "waterway" or right_chip_category = "port" or right_chip_category = "port" or bottom_chip_category_2 = "bridge") {
						obj_type_tmp = "river_default" : obj_dire_tmp = "depth"
					}
					if (top_chip_category = "waterway" or left_chip_category = "port" or top_chip_category = "port" or top_chip_category_2 = "bridge") and (bottom_chip_category = "waterway" or left_chip_category = "port" or bottom_chip_category = "port" or bottom_chip_category_2 = "bridge") {
						obj_type_tmp = "river_default" : obj_dire_tmp = "width"
					}
					
				}

				; 周囲の道路接続が3つ（T字型交差点）
				if correct = 3 {
					obj_type_tmp = "intersection_T"
					if (left_chip_category = "waterway" or left_chip_category = "port" or left_chip_category = "port" or left_chip_category_2 = "bridge") and (top_chip_category = "waterway" or left_chip_category = "port" or top_chip_category = "port" or top_chip_category_2 = "bridge") and (bottom_chip_category = "waterway" or left_chip_category = "port" or bottom_chip_category = "port" or bottom_chip_category_2 = "bridge") {
						if (left_top_chip_category = "waterway" or left_top_chip_category = "port" or left_top_chip_category_2 = "bridge") or (left_bottom_chip_category = "waterway" or left_bottom_chip_category = "port" or left_bottom_chip_category_2 = "bridge") {
							obj_type_tmp = "intersection_T" } else { obj_type_tmp = "river_intersection_T"
						}
						obj_dire_tmp = "left-top-bottom"
					}
					if (left_chip_category = "waterway" or left_chip_category = "port" or left_chip_category = "port" or left_chip_category_2 = "bridge") and (right_chip_category = "waterway" or right_chip_category = "port" or right_chip_category = "port" or bottom_chip_category_2 = "bridge") and (top_chip_category = "waterway" or left_chip_category = "port" or top_chip_category = "port" or top_chip_category_2 = "bridge") {
						if (left_top_chip_category = "waterway" or left_top_chip_category = "port" or left_top_chip_category_2 = "bridge") or (right_top_chip_category = "waterway" or right_top_chip_category = "port" or right_top_chip_category_2 = "bridge") {
							obj_type_tmp = "intersection_T" } else { obj_type_tmp = "river_intersection_T"
						}
						obj_dire_tmp = "left-right-top"
					}
					if (left_chip_category = "waterway" or left_chip_category = "port" or left_chip_category = "port" or left_chip_category_2 = "bridge") and (right_chip_category = "waterway" or right_chip_category = "port" or right_chip_category = "port" or bottom_chip_category_2 = "bridge") and (bottom_chip_category = "waterway" or left_chip_category = "port" or bottom_chip_category = "port" or bottom_chip_category_2 = "bridge") {
						if (left_bottom_chip_category = "waterway" or left_bottom_chip_category = "port" or left_bottom_chip_category_2 = "bridge") or (right_bottom_chip_category = "waterway" or right_bottom_chip_category = "port" or right_bottom_chip_category_2 = "bridge") {
							obj_type_tmp = "intersection_T" } else { obj_type_tmp = "river_intersection_T"
						}
						obj_dire_tmp = "left-right-bottom"
					}
					if (right_chip_category = "waterway" or right_chip_category = "port" or right_chip_category = "port" or bottom_chip_category_2 = "bridge") and (top_chip_category = "waterway" or left_chip_category = "port" or top_chip_category = "port" or top_chip_category_2 = "bridge") and (bottom_chip_category = "waterway" or left_chip_category = "port" or bottom_chip_category = "port" or bottom_chip_category_2 = "bridge") {
						if (right_top_chip_category = "waterway" or right_top_chip_category = "port" or right_top_chip_category_2 = "bridge") or (right_bottom_chip_category = "waterway" or right_bottom_chip_category = "port" or right_bottom_chip_category_2 = "bridge") {
							obj_type_tmp = "intersection_T" } else { obj_type_tmp = "river_intersection_T"
						}
						obj_dire_tmp = "right-top-bottom"
					}
				}

				; 周囲の道路接続が4つ（十字型交差点or河口）
				if correct = 4 {
					; 河口
					if left_top_chip_category != "waterway" and left_top_chip_category != "port" and left_top_chip_category_2 != "bridge" and left_bottom_chip_category != "waterway" and left_bottom_chip_category != "port" and left_bottom_chip_category_2 != "bridge" {
						obj_type_tmp = "estuary" : obj_dire_tmp = "left-top-bottom"
					}
					if right_top_chip_category != "waterway" and right_top_chip_category != "port" and right_top_chip_category_2 != "bridge" and left_top_chip_category != "waterway" and left_top_chip_category != "port" and left_top_chip_category_2 != "bridge" {
						obj_type_tmp = "estuary" : obj_dire_tmp = "left-right-top"
					}
					if left_bottom_chip_category != "waterway" and left_bottom_chip_category != "port" and left_bottom_chip_category_2 != "bridge" and right_bottom_chip_category != "waterway" and right_bottom_chip_category != "port" and right_bottom_chip_category_2 != "bridge" {
						obj_type_tmp = "estuary" : obj_dire_tmp = "left-right-bottom"
					}
					if right_top_chip_category != "waterway" and right_top_chip_category != "port" and right_top_chip_category_2 != "bridge" and right_bottom_chip_category != "waterway" and right_bottom_chip_category != "port" and right_bottom_chip_category_2 != "bridge" {
						obj_type_tmp = "estuary" : obj_dire_tmp = "right-top-bottom"
					}

					; 十字型交差点
					if (left_top_chip_category != "waterway" or left_top_chip_category != "port" or left_top_chip_category_2 != "bridge") and (right_top_chip_category = "waterway" or right_top_chip_category = "port" or right_top_chip_category_2 = "bridge") and (left_bottom_chip_category = "waterway" or left_bottom_chip_category = "port" or left_bottom_chip_category_2 = "bridge") and (right_bottom_chip_category = "waterway" or right_bottom_chip_category = "port" or right_bottom_chip_category_2 = "bridge") {
						obj_type_tmp = "intersection_cross_without_one_corner" : obj_dire_tmp = "left-top"
					}
					if (left_top_chip_category = "waterway" or left_top_chip_category = "port" or left_top_chip_category_2 = "bridge") and (right_top_chip_category != "waterway" or right_top_chip_category != "port" or right_top_chip_category_2 != "bridge") and (left_bottom_chip_category = "waterway" or left_bottom_chip_category = "port" or left_bottom_chip_category_2 = "bridge") and (right_bottom_chip_category = "waterway" or right_bottom_chip_category = "port" or right_bottom_chip_category_2 = "bridge") {
						obj_type_tmp = "intersection_cross_without_one_corner" : obj_dire_tmp = "right-top"
					}
					if (left_top_chip_category = "waterway" or left_top_chip_category = "port" or left_top_chip_category_2 = "bridge") and (right_top_chip_category = "waterway" or right_top_chip_category = "port" or right_top_chip_category_2 = "bridge") and (left_bottom_chip_category != "waterway" or left_bottom_chip_category != "port" or left_bottom_chip_category_2 != "bridge") and (right_bottom_chip_category = "waterway" or right_bottom_chip_category = "port" or right_bottom_chip_category_2 = "bridge") {
						obj_type_tmp = "intersection_cross_without_one_corner" : obj_dire_tmp = "left-bottom"
					}
					if (left_top_chip_category = "waterway" or left_top_chip_category = "port" or left_top_chip_category_2 = "bridge") and (right_top_chip_category = "waterway" or right_top_chip_category = "port" or right_top_chip_category_2 = "bridge") and (left_bottom_chip_category = "waterway" or left_bottom_chip_category = "port" or left_bottom_chip_category_2 = "bridge") and (right_bottom_chip_category != "waterway" or right_bottom_chip_category != "port" or right_bottom_chip_category_2 != "bridge") {
						obj_type_tmp = "intersection_cross_without_one_corner" : obj_dire_tmp = "right-bottom"
					}
					if left_top_chip_category != "waterway" and left_top_chip_category != "port" and left_top_chip_category_2 != "bridge" and right_top_chip_category != "waterway" and right_top_chip_category != "port" and right_top_chip_category_2 != "bridge" and left_bottom_chip_category != "waterway" and left_bottom_chip_category != "port" and left_bottom_chip_category_2 != "bridge" and right_bottom_chip_category != "waterway" and right_bottom_chip_category != "port" and right_bottom_chip_category_2 != "bridge" {
						obj_type_tmp = "river_intersection_cross" : obj_dire_tmp = "null"
					}
					if (left_top_chip_category = "waterway" or left_top_chip_category = "port" or left_top_chip_category_2 = "bridge") and (right_top_chip_category = "waterway" or right_top_chip_category = "port" or right_top_chip_category_2 = "bridge") and (left_bottom_chip_category = "waterway" or left_bottom_chip_category = "port" or left_bottom_chip_category_2 = "bridge") and (right_bottom_chip_category = "waterway" or right_bottom_chip_category = "port" or right_bottom_chip_category_2 = "bridge") {
						obj_type_tmp = "intersection_cross" : obj_dire_tmp = "null"
					}
				}

				; 周りに接続する道路がない場合
				if correct = 0 {
					obj_type_tmp = "isolated" : obj_dire_tmp = "null"
				}
			}
	
			; タイプと向きを指定
			if obj_type_tmp != "" and obj_dire_tmp != "" and obj_type_tmp != obj_type(sx,sy,sz) and obj_dire_tmp != obj_dire(sx,sy,sz) {
				; 踏切または橋を設置する必要がある場合
				if category(sx,sy,sz,1) = "train_crossing" {
					obj_type_tmp = "train_crossing"

					if cursor_mode = "put_Road" {
						if obj_dire_tmp = "width" {
							obj_dire_tmp = "depth"
						} else : if obj_dire_tmp = "depth" {
							obj_dire_tmp = "width"
						} else {
							if top_chip_category = "road" or bottom_chip_category = "road" {
								obj_dire_tmp = "depth"
							} else {
								obj_dire_tmp = "width"
							}
						}
					} else {
						if top_chip_category = "railroad" or bottom_chip_category = "railroad" {
							obj_dire_tmp = "width"
						} else {
							obj_dire_tmp = "depth"
						}
					}
				}
				if category(sx,sy,sz,1) = "bridge" {
					obj_type_tmp = "bridge"
					if obj_dire_tmp != "width" and obj_dire_tmp != "depth" {
						if top_chip_category = "road" or bottom_chip_category = "road" {
							obj_dire_tmp = "width"
						} else {
							obj_dire_tmp = "depth"
						}
					}
				}

				; 設定
				obj_type(sx,sy,sz,0) = element2(map(sx,sy,sz,0), addon_use_types_name, obj_type_tmp)
				obj_dire(sx,sy,sz,0) = element3(map(sx,sy,sz,0), obj_type(sx,sy,sz,0), addon_dire_names, obj_dire_tmp)
				
				from_build = 1 : gosub *get_addon_drow_position_new
			}
		loop
	loop

	under_construction_tiles = 0
	return

*delete_obj
	/*----------------------------------指定されたアドオンの削除----------------------------------*/
	; アドオンを設置することによって影響される地価、犯罪率、教育度とその影響範囲
	addon_land_price_influence__tmp = int(sdnl(addon_land_price_influence, map(mx,my,mz,0), 0))
	addon_land_price_influence_grid__tmp = int(sdnl(addon_land_price_influence, map(mx,my,mz,0), 1))

	addon_crime_rate_influence__tmp = int(sdnl(addon_crime_rate_influence, map(mx,my,mz,0), 0))
	addon_crime_rate_influence_grid__tmp = int(sdnl(addon_crime_rate_influence, map(mx,my,mz,0), 1))
		
	addon_education_rate_influence__tmp = int(sdnl(addon_education_rate_influence, map(mx,my,mz,0), 0))
	addon_education_rate_influence_grid__tmp = int(sdnl(addon_education_rate_influence, map(mx,my,mz,0), 1))

	p = 1

	; 削除
	start_x = mx-obj_tiles(mx,my,mz,0)
	start_y = my-obj_tiles(mx,my,mz,1)

	sx = start_x : sy = start_y : sz = 0

	repeat_x = obj_use_tiles(mx,my,mz,0) : if repeat_x = 0 : repeat_x = 1
	repeat_y = obj_use_tiles(mx,my,mz,1) : if repeat_y = 0 : repeat_y = 1

	before_obj_use_tiles_x = obj_use_tiles(sx,sy,sz,0)
	before_obj_use_tiles_y = obj_use_tiles(sx,sy,sz,1)

	before_obj_dire = obj_dire(sx,sy,sz)

	repeat repeat_x
		repeat repeat_y
			map(sx,sy,sz,0)				= tile_addon_number
			name(sx,sy,sz,0)			= sdnl(addon_name, tile_addon_number, 0)
				
			category(sx,sy,sz,0)		= sdnl(addon_type, tile_addon_number, 0)
			category(sx,sy,sz,1)		= ""
			category(sx,sy,sz,2)		= ""

			obj_type(sx,sy,sz,0)		= 0
			obj_dire(sx,sy,sz,0)		= 0

			obj_serial_num(sx,sy,sz)	= 0
			
			obj_use_tiles(sx,sy,sz,0)	= 0
			obj_use_tiles(sx,sy,sz,1)	= 0
			
			obj_tiles(sx,sy,sz,0)		= 0
			obj_tiles(sx,sy,sz,1)		= 0

			crop(sx,sy,sz)				= ""
			crop_amount(sx,sy,sz)		= 0

			reservation(sx,sy,sz)		= "none"
			original_name(sx,sy,sz)		= ""


			from_build = 1 : gosub *get_addon_drow_position_new

			if before_obj_use_tiles_y > 1 {
				if before_obj_dire = 2 : sy-- : else : sy++
			}
		loop

		if before_obj_use_tiles_x > 1 {
			if before_obj_dire = 3 : sx-- : else : sx++
			sy = start_y
		}
	loop

	; 周囲の道路/線路/水路に反映
	from_Delete_obj = 1 : gosub *build_roadtypes

	; 地価の変動
	if addon_land_price_influence__tmp != 0 {
		if addon_land_price_influence_grid__tmp != 0 {
			add_value = addon_land_price_influence__tmp / addon_land_price_influence_grid__tmp * p
		} else : if addon_land_price_influence_grid__tmp = 0 {
			add_value = 0
		}
									
		round = 0						
		for round, 1, addon_land_price_influence_grid__tmp+1, 1							
			repeat (round*2-1)
				if mx+cnt-(round-1)>0 and mx+cnt-(round-1)<mapsize_x and my+round-1>0 and my+round-1<mapsize_y {
					land_price(mx+cnt-(round-1),my+round-1,mz) -= int( addon_land_price_influence__tmp - (add_value*(round-1)) )
				}
			loop			
			repeat (round*2-1)
				if mx+cnt-(round-1)>0 and mx+cnt-(round-1)<mapsize_x and my-round+1>0 and my-round+1<mapsize_y {
					land_price(mx+cnt-(round-1),my-round+1,mz) -= int( addon_land_price_influence__tmp - (add_value*(round-1)) )
				}
			loop
			repeat (round*2-1)
				if mx+round-1>0 and mx+round-1<mapsize_x and my+cnt-(round-1)>0 and my+cnt-(round-1)<mapsize_y {
					land_price(mx+round-1,my+cnt-(round-1),mz) -= int( addon_land_price_influence__tmp - (add_value*(round-1)) )
				}
			loop
			repeat (round*2-1)
				if mx-round+1>0 and mx-round+1<mapsize_x and my+cnt-(round-1)>0 and my+cnt-(round-1)<mapsize_y {
					land_price(mx-round+1,my+cnt-(round-1),mz) -= int( addon_land_price_influence__tmp - (add_value*(round-1)) )
				}
			loop
		next
	}
	
	; 犯罪率の変動
	if addon_crime_rate_influence__tmp != 0 {
		add_value = addon_crime_rate_influence__tmp / addon_crime_rate_influence_grid__tmp * p
				
		round = 0	
		for round, 1, addon_crime_rate_influence_grid__tmp+1, 1
			repeat (round*2-1)
				if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize_x and (my+round-1) >= 0 and (my+round-1) <= mapsize_y {
					crime_rate(mx+cnt-(round-1),my+round-1,mz) -= int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
					if crime_rate(mx+cnt-(round-1),my+round-1,mz) > 100  : crime_rate(mx+cnt-(round-1),my+round-1,mz) = 100
					if crime_rate(mx+cnt-(round-1),my+round-1,mz) < -100 : crime_rate(mx+cnt-(round-1),my+round-1,mz) = -100
				}
			loop
			repeat (round*2-1)
				if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize_x and (my-round+1) >= 0 and (my-round+1) <= mapsize_y {
					crime_rate(mx+cnt-(round-1),my-round+1,mz) -= int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
					if crime_rate(mx+cnt-(round-1),my-round+1,mz) > 100  : crime_rate(mx+cnt-(round-1),my-round+1,mz) = 100
					if crime_rate(mx+cnt-(round-1),my-round+1,mz) < -100 : crime_rate(mx+cnt-(round-1),my-round+1,mz) = -100
				}
			loop
			repeat (round*2-1)
				if (mx+round-1) >= 0 and (mx+round-1) <= mapsize_x and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize_y {
					crime_rate(mx+round-1,my+cnt-(round-1),mz) -= int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
					if crime_rate(mx+round-1,my+cnt-(round-1),mz) > 100  : crime_rate(mx+round-1,my+cnt-(round-1),mz) = 100
					if crime_rate(mx+round-1,my+cnt-(round-1),mz) < -100 : crime_rate(mx+round-1,my+cnt-(round-1),mz) = -100
				}
			loop
			repeat (round*2-1)
				if (mx-round-1) >= 0 and (mx-round-1) <= mapsize_x and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize_y {
					crime_rate(mx-round+1,my+cnt-(round-1),mz) -= int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
					if crime_rate(mx-round+1,my+cnt-(round-1),mz) > 100  : crime_rate(mx-round+1,my+cnt-(round-1)) = 100
					if crime_rate(mx-round+1,my+cnt-(round-1),mz) < -100 : crime_rate(mx-round+1,my+cnt-(round-1)) = -100
				}
			loop
		next
	}
	
	; 教育度の変動
	if addon_education_rate_influence__tmp != 0 {
		add_value = addon_education_rate_influence__tmp / addon_education_rate_influence_grid__tmp * p
		round = 0
		for round, 1, addon_education_rate_influence_grid__tmp+1, 1
			repeat (round*2-1)
				if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize_x and (my+round-1) >= 0 and (my+round-1) <= mapsize_y {
					education_rate(mx+cnt-(round-1),my+round-1,mz) -= int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
				}
			loop
			repeat (round*2-1)
				if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize_x and (my-round+1) >= 0 and (my-round+1) <= mapsize_y {
					education_rate(mx+cnt-(round-1),my-round+1,mz) -= int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
				}
			loop
			repeat (round*2-1)
				if (mx+round-1) >= 0 and (mx+round-1) <= mapsize_x and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize_y {
					education_rate(mx+round-1,my+cnt-(round-1),mz) -= int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
				}
			loop
			repeat (round*2-1)
				if (mx-round-1) >= 0 and (mx-round-1) <= mapsize_x and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize_y {
					education_rate(mx-round+1,my+cnt-(round-1),mz) -= int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
				}
			loop
		next
	}

	return

*get_news
	/*-------------------------------------ニュースの取得-----------------------------------------*/
	news_content = ""
	
	; 特殊ニュース
	exist "data/news/special.news"
	if strsize = -1 : error "F06 : special.newsが見つかりません\n/data/news/フォルダ内にspecial.newsがありません。"
			
	notesel news_file : noteload "data/news/special.news"
			
	; マップ作成直後のニュース
	if not_displayed_news_new_map = 1 {
		not_displayed_news_new_map = 0
		same_news = 0
	
		; 同じ内容のニュースを複数読み込む
		repeat notemax
			noteget news_tmp, cnt
	
			if instr(news_tmp, 0, "case=\"new_map\"") != -1 {
				split news_tmp, ", ", tmp, news_content_candidate_tmp
				news_content_candidate(same_news) = strmid(news_content_candidate_tmp, 0, instr(news_content_candidate_tmp, 0, "}"))	; 表示するニュースの候補
				same_news ++	; 同じ内容のニュースの数
			}
		loop
					
		if same_news > 0 : news_content = news_content_candidate(rnd(same_news))		; 候補の中からひとつランダムに選ぶ
	}

	; 人口増加のニュース
	if before_map_Total_Population != map_Total_Population {
		show_news_population = ""

		if before_map_Total_Population < 1000 and Total_map_Population >= 1000       : show_news_population = "over_1000"
		if before_map_Total_Population < 5000 and Total_map_Population >= 5000       : show_news_population = "over_5000"
		if before_map_Total_Population < 10000 and Total_map_Population >= 10000     : show_news_population = "over_10000"
		if before_map_Total_Population < 30000 and Total_map_Population >= 30000     : show_news_population = "over_30000"
		if before_map_Total_Population < 50000 and Total_map_Population >= 50000     : show_news_population = "over_50000"
		if before_map_Total_Population < 80000 and Total_map_Population >= 80000     : show_news_population = "over_80000"
		if before_map_Total_Population < 100000 and Total_map_Population >= 100000   : show_news_population = "over_100000"
		if before_map_Total_Population < 200000 and Total_map_Population >= 200000   : show_news_population = "over_200000"
		if before_map_Total_Population < 300000 and Total_map_Population >= 300000   : show_news_population = "over_300000"
		if before_map_Total_Population < 400000 and Total_map_Population >= 400000   : show_news_population = "over_400000"
		if before_map_Total_Population < 500000 and Total_map_Population >= 500000   : show_news_population = "over_500000"
		if before_map_Total_Population < 600000 and Total_map_Population >= 600000   : show_news_population = "over_600000"
		if before_map_Total_Population < 700000 and Total_map_Population >= 700000   : show_news_population = "over_700000"
		if before_map_Total_Population < 800000 and Total_map_Population >= 800000   : show_news_population = "over_800000"
		if before_map_Total_Population < 900000 and Total_map_Population >= 900000   : show_news_population = "over_900000"
		if before_map_Total_Population < 1000000 and Total_map_Population >= 1000000 : show_news_population = "over_1000000"
					
		same_news = 0
	
		; 同じ内容のニュースを複数読み込む
		repeat notemax
			noteget news_tmp, cnt
			if instr(news_tmp, 0, "case=\""+show_news_population+"\"") != -1 {
				split news_tmp, ", ", tmp, news_content_candidate_tmp
				news_content_candidate(same_news) = strmid(news_content_candidate_tmp, 0, instr(news_content_candidate_tmp, 0, "}"))	; 表示するニュースの候補
				same_news ++	; 同じ内容のニュースの数
			}
		loop
		if same_news > 0 : news_content = news_content_candidate(rnd(same_news))		; 候補の中からひとつランダムに選ぶ
	}
	
	; 特に報じることがない場合、どうでもいいニュースを表示
	exist "data/news/others.news"
	if strsize = -1 : error "F07 : others.newsが見つかりません\n/data/news/フォルダ内にothers.newsがありません。"
			
	notesel news_file : noteload "data/news/others.news"
			
	if news_content = "" {
		not_displayed_news_new_map = 0
		same_news = 0
	
		; 同じ内容のニュースを複数読み込む
		repeat notemax
			noteget news_tmp, cnt
			if instr(news_tmp, 0, "case=\"others\"") != -1 {
				split news_tmp, ", ", tmp, news_content_candidate_tmp
				news_content_candidate(same_news) = strmid(news_content_candidate_tmp, 0, instr(news_content_candidate_tmp, 0, "}"))	; 表示するニュースの候補
				same_news ++	; 同じ内容のニュースの数
			}
		loop	
		if same_news > 0 : news_content = news_content_candidate(rnd(same_news))		; 候補の中からひとつランダムに選ぶ
	}

	before_map_Total_Population = map_Total_Population
	
	return

*play_BGM
	/*----------------------------------------BGMの再生-------------------------------------------*/
	; 次のBGMをランダムに選出
	chdir ""+directory+"\\bgm"
	mci "close Cities-Box"
				
	; パス名を含めたファイル一覧を取得
	dirlist2h 1, ',' : dirlist2 buf_BGMs, "*.mp3", 1, '\\'
	sdim BGM_filelist, buf_BGMs : dirlist2r BGM_filelist
	notesel BGM_filelist : total_BGMs = notemax
			
	chdir directory
			
	; ランダムに選出
	repeat
		BGM_rnd = rnd(total_BGMs)
	
		; 現在再生しているBGMと同じ曲でないことと、特定の条件下のみで流れるBGM（ファイル名に[Sp]がある）でないことを確認
		notesel BGM_filelist : noteget next_BGM_file, BGM_rnd
						
		if next_BGM_file != playing_BGM_file {
			if instr(next_BGM_file, 0, "[less_") != -1 {			; 人口○人以下の場合のみ流れるBGM
				less_var = int(strmid(next_BGM_file, 6, instr(next_BGM_file, 0, "]")))	
				if map_Total_Population <= less_var {
					playing_BGM_file = next_BGM_file
					break
				}
			} else : if instr(next_BGM_file, 0, "[more_") != -1 {	; 人口○人以上の場合のみ流れるBGM
				more_var = int(strmid(next_BGM_file, 6, instr(next_BGM_file, 0, "]")))		
				if map_Total_Population >= more_var {
					playing_BGM_file = next_BGM_file
					break
				}
			} else : if instr(next_BGM_file, 0, "[m_") != -1 {	; ○月のみ流れる曲
				month_var = int(strmid(next_BGM_file, 3, instr(next_BGM_file, 0, "]")))	
				if month_var = map_time_month {
					playing_BGM_file = next_BGM_file
					break
				}
			} else : if instr(next_BGM_file, 0, "[Sp]") = -1 {
				playing_BGM_file = next_BGM_file
				break
			}
		}
		await 1
	loop
	
	; 天気が雨なら、1/5の確率でランダムで雨っぽい曲を流す
	if add_rain > 0 and rnd(5) = 2 : playing_BGM_file = "[Sp]Satie-Jeteveux.mp3"

	; Pacrimanモードの場合
	if config_Pacriman_Mode = 1 :  playing_BGM_file = "[Sp]レトロダンジョン.mp3"
	
	; 再生
	exist ""+directory+"/bgm/"+playing_BGM_file+""
	if strsize = -1 : error "S06 : 再生ファイルが見つかりません\nbgmフォルダ内に"+playing_BGM_file+"が見つかりません。"
				
	mci "open \""+directory+"\\bgm\\"+playing_BGM_file+"\" alias Cities-Box"	; 開く
	mci "play Cities-Box"													    ; 再生
	mci "setaudio Cities-Box volume to 1000"
	
	changed_BGM = 1
	
	; ボリューム
	if config_Set_Play_BGM = 0 : mci "setaudio Cities-Box volume to 0"
	
	return

*climate
	/*--------------------------------------------天候の変動--------------------------------------*/
	; 気温の変動
	change_temperature = rnd(5)
	if change_temperature = 0 and pause = 0 {
		; 日中は気温が上がりやすく、夜間は下がりやすくする
		temperature_increase_or_decrease = rnd(8)
			
		; 日中
		if 8 <= map_time_Hour and 14 >= map_time_Hour {
			if 0 <= temperature_increase_or_decrease and 5 >= temperature_increase_or_decrease { temperature_increase = 1 : temperature_decrease = 0 }
			if 6 <= temperature_increase_or_decrease and 7 >= temperature_increase_or_decrease { temperature_increase = 0 : temperature_decrease = 1 }
			
		; 夜間
		} else {
			if 0 <= temperature_increase_or_decrease and 1 >= temperature_increase_or_decrease { temperature_increase = 1 : temperature_decrease = 0 }
			if 2 <= temperature_increase_or_decrease and 7 >= temperature_increase_or_decrease { temperature_increase = 0 : temperature_decrease = 1 }
		}
				
		; 12月〜2月：-10℃〜15℃の範囲で気温を変動
		if map_time_Month = 12 or (1 <= map_time_Month and 2 >= map_time_Month) {				
			if temperature_increase = 1 and map_temperature < 15  : map_temperature ++
			if temperature_decrease = 1 and map_temperature > -10 : map_temperature --
		}
			
		; 3月〜5月：10℃〜25℃の範囲で気温を変動
		if 3 <= map_time_Month and 5 >= map_time_Month {
			if temperature_increase = 1 and map_temperature < 25 : map_temperature ++
			if temperature_decrease = 1 and map_temperature > 10 : map_temperature --
		}
			
		; 6月〜8月：20℃〜35℃の範囲で気温を変動
		if 6 <= map_time_Month and 8 >= map_time_Month {
			if temperature_increase = 1 and map_temperature < 35 : map_temperature ++
			if temperature_decrease = 1 and map_temperature > 20 : map_temperature --
		}
			
		; 9月〜11月：10℃〜25℃の範囲で気温を変動
		if 9 <= map_time_Month and 11 >= map_time_Month {			
			if temperature_increase = 1 and map_temperature < 25 : map_temperature ++
			if temperature_decrease = 1 and map_temperature > 10 : map_temperature --
		}
	}
	
	; 天気の変動
	; 雨・雪の表示、気温の変動
	if map_Set_Change_Weather = 1 {		
		add_rain_increase_or_decrease = rnd(2)	
		if add_rain_increase_or_decrease = 0 {
			add_rain --
		} else : if add_rain_increase_or_decrease = 1 {
			add_rain ++
		}
						
		repeat 50
			if rain_y(cnt) >= windowy or rain(cnt) = 0 {
				rain_increase_or_decrease = rnd(2)
									
				if rain_increase_or_decrease = 0 and add_rain >= 0 {
					rain(cnt) = 1
					rain_x(cnt) = rnd(windowx)
					rain_y(cnt) = -rnd(windowy)
					snow_size(cnt) = rnd(5)+1
				} else {
					rain(cnt) = 0
					rain_x(cnt) = 0
					rain_y(cnt) = 0
					snow_size(cnt) = 0
				}
			}
			
			if rain(cnt) = 1 {
				color 255, 255, 255
				if map_temperature >= 3 {	; 気温が3℃以上なら雨
					if pause = 0 {
						rain_y(cnt) += 5 * speed
					}
					line rain_x(cnt), rain_y(cnt), rain_x(cnt), rain_y(cnt)+20				
				} else {				; 気温が2℃以下なら雪
					if pause = 0 {
						rain_x(cnt) += (rnd(3)-1)*2
						rain_y(cnt) += 1 * speed
					}
					circle rain_x(cnt), rain_y(cnt), rain_x(cnt)+snow_size(cnt), rain_y(cnt)+snow_size(cnt)				
				}
			}
		loop
	}
		
	return

*show_detail
	/*---------------------------------タイルの詳細を表示-----------------------------------------*/
	; ダイアログの大きさを文字列の長さによって決める
	buffer 999
		font config_SystemFont, 14
		if original_name(clicked_mx, clicked_my, clicked_mz) = "" {
			mes sdnl(addon_name, map(clicked_mx,clicked_my,clicked_mz), 1)
		} else {
			mes original_name(clicked_mx, clicked_my, clicked_mz)
		}
		
		diax = ginfo(14) + 5 : diay1 = ginfo(15) + 2
		if diax < 100 : diax = 100

	gsel 0

	; 相対的なダイアログの表示座標の算出
	show_detail_position_x = clicked_mx * CHIP_SIZE/2 - clicked_my * CHIP_SIZE/2 - camx
	show_detail_position_y = clicked_my * CHIP_SIZE/4 + clicked_mx * CHIP_SIZE/4 - camy + CHIP_SIZE

	; 詳細
	dia_lines = 0
	mes_tmp = ""
	
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "residential" {
		mes_tmp = "住宅地区\n住民 : "+residents(clicked_mx, clicked_my, clicked_mz)+"人\n幸福度 : "+happiness(clicked_mx, clicked_my, clicked_mz)+"\n教育度 : "+education_rate(clicked_mx, clicked_my, clicked_mz)+"\n地価 : §"+land_price(clicked_mx, clicked_my, clicked_mz)+"0000"
		dia_lines = 5
	}
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "commercial" {
		mes_tmp = "商業地区\n労働者数 : "+workers(clicked_mx, clicked_my, clicked_mz)+"人\n幸福度 : "+happiness(clicked_mx, clicked_my, clicked_mz)+"\n地価 : §"+land_price(clicked_mx, clicked_my, clicked_mz)+"0000"
		dia_lines = 4
	}
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "office" {
		mes_tmp = "オフィス地区\n労働者数 : "+workers(clicked_mx, clicked_my, clicked_mz)+"人\n幸福度 : "+happiness(clicked_mx, clicked_my, clicked_mz)+"\n地価 : §"+land_price(clicked_mx, clicked_my, clicked_mz)+"0000"
		dia_lines = 4
	}
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "industrial" {
		mes_tmp = "工業地区\n労働者数 : "+workers(clicked_mx, clicked_my, clicked_mz)+"人\n幸福度 : "+happiness(clicked_mx, clicked_my, clicked_mz)+"\n地価 : §"+land_price(clicked_mx, clicked_my, clicked_mz)+"0000"
		dia_lines = 4
	}
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "farm" {
		mes_tmp = "農業地区\n労働者数 : "+workers(clicked_mx, clicked_my, clicked_mz)+"人\n幸福度 : "+happiness(clicked_mx, clicked_my, clicked_mz)+"\n地価 : §"+land_price(clicked_mx, clicked_my, clicked_mz)+"0000\n生産物 : "+crop(clicked_mx, clicked_my, clicked_mz)+""
		dia_lines = 5
	}
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "public" {
		mes_tmp = "公共施設\n労働者数 : "+workers(clicked_mx, clicked_my, clicked_mz)+"人\n幸福度 : "+happiness(clicked_mx, clicked_my, clicked_mz)+"\n地価 : §"+land_price(clicked_mx, clicked_my, clicked_mz)+"0000"
		dia_lines = 4
	}
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "park" {
		mes_tmp = "公園\n地価 : §"+land_price(clicked_mx, clicked_my, clicked_mz)+"0000"
		dia_lines = 2
	}
	
	; 詳細の表示にかかるサイズを取得
	buffer 999
		font config_SystemFont, 10
		pos 0, 0 : mes mes_tmp
		diay2 = ginfo(15) * dia_lines
	gsel 0
			
	; 表示
	color 255, 255, 255
	line show_detail_position_x+32, show_detail_position_y-100, show_detail_position_x+32, show_detail_position_y-32
		
	color 0, 0, 0
	sboxf 128, show_detail_position_x+32, show_detail_position_y-100-(diay1+5+diay2+5), show_detail_position_x+32+15+diax+25, show_detail_position_y-100
	
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "residential" : color 34, 177, 76
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "commercial"  : color 63, 72, 204
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "office"      : color 0, 162, 232
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "industrial"  : color 255, 242, 0
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "farm"        : color 185, 122, 87
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "public"      : color 195, 195, 195
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "park"        : color 119, 153, 17
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "road"        : color 50, 50, 50
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "railroad"    : color 175, 112, 77
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "waterway"    : color 0, 0, 255
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "station"     : color 255, 0, 0
	if category(clicked_mx, clicked_my, clicked_mz, 0) = "port"        : color 255, 0, 0

	boxf show_detail_position_x+32, show_detail_position_y-100-(diay1+5+diay2+5), show_detail_position_x+32+10, show_detail_position_y-100
	
	color 255, 255, 255
	; 建物名（アドオン名）
	font config_SystemFont, 14
	pos show_detail_position_x+32+15, show_detail_position_y-100-(diay1+5+diay2+5)+5
	if original_name(clicked_mx, clicked_my, clicked_mz) = "" {
		mes sdnl(addon_name, map(clicked_mx,clicked_my,clicked_mz), 1)
	} else {
		mes original_name(clicked_mx, clicked_my, clicked_mz)
	}

	; 詳細
	font config_SystemFont, 10
	pos show_detail_position_x+32+15, show_detail_position_y-100-(diay1+5+diay2+5)+diay1+5 : mes mes_tmp
	//mes "Category:"+category(clicked_mx,clicked_my)+"\nType:"+obj_type(clicked_mx,clicked_my)+" / Dire:"+obj_dire(clicked_mx,clicked_my)+""	; category, obj_type, obj_direの情報
	
	; 建物名変更ボタン
	pos show_detail_position_x+32+15+diax+25-20, show_detail_position_y-100-(diay1+5+diay2+5) : gmode 2 : gcopy 71, 0, 0, 20, 20
			
	return

*fix_new_name
	/*-----------------------------------建物名を変更---------------------------------------------*/
	original_name(clicked_mx, clicked_my, clicked_mz) = new_name
	
	clrobj new_name_stat
	showing_new_name_input = 0
					
	return

*processing_start_of_day
	/*---------------------一日の始まりの処理（住民の変動、予算の支出など）-----------------------*/
	gosub *processing_get_first
	
	sx = 0 : sy = 0 : sz = 0
	happiness_tmp = 0

	gender_M = 0 : gender_F = 0

	map_total_Residential = 0 : map_total_Commercial = 0 : map_total_Office = 0 : map_total_Industrial = 0 : map_total_Farm = 0
	map_total_Police_Stations = 0 : map_total_Fire_Depertments = 0 : map_total_Post_Offices = 0 : map_total_Education = 0
		
	repeat mapsize_x
		sx = cnt
		repeat mapsize_y
			sy = cnt
			
			; 人口・労働人口・需要度などを増減
			if category(sx,sy,sz,0) = "residential" {
				; 住民数を変更するかどうか決める（住民数0なら高確率）
				if residents(sx,sy,sz) = 0 : rtmp = rnd(10) : else : rtmp = rnd(100)
		
				; 住民数の増減
				if rtmp = 9 {
					if map_demand_Residential < 0 : map_demand_Residential = 0

					rndv = rnd(2)
		
					; 変更前の住民数
					before_residents = residents(sx,sy,sz)
		
					; 変更前の住民の年齢と性別
					sdim age_in_Residential_tmp, 16, before_residents + 10
					split age(sx,sy,sz), "]", age_in_Residential_tmp
					dim age_in_Residential, before_residents + 10
					repeat before_residents
						split age_in_Residential_tmp(cnt), "[", cut, age_in_Residential_tmp(cnt)
						age_in_Residential(cnt) = int(age_in_Residential_tmp(cnt))
					loop

					sdim gender_in_Residential_tmp, 16, before_residents + 10
					split gender(sx,sy,sz), "]", gender_in_Residential_tmp
					dim gender_in_Residential, before_residents + 10
					repeat before_residents
						split gender_in_Residential_tmp(cnt), "[", cut, gender_in_Residential_tmp(cnt)
						gender_in_Residential(cnt) = int(gender_in_Residential_tmp(cnt))
					loop
		
					; 住民数の増減処理
					; 住民の増加
					if rndv = 0 {
						if int(sdnl(addon_maximum_capacity, map(sx,sy,sz,0), 0)) - before_residents > 0 {
							add_residents = rnd(int(sdnl(addon_maximum_capacity, map(sx,sy,sz,0), 0)) - before_residents)
							residents(sx,sy,sz) = before_residents + add_residents
							map_demand_Residential -= add_residents
										
							repeat add_residents
								new_age_tmp = rnd(120)
								if new_age_tmp <= 40 {
									new_age_tmp = 0			; 1/3の確率で0歳児
								} else {
									new_age_tmp -= 40		; new_age_tmp > 40の場合、new_age_tmpから40引いた歳を新しい住民の年齢とする
								}
											
								age(sx,sy,sz) += "["+new_age_tmp+"]"

								gender_rnd = rnd(2)
								if gender_rnd = 0 : gender(sx,sy,sz) += "[m]"
								if gender_rnd = 1 : gender(sx,sy,sz) += "[f]"
							loop
						}
					}
		
					; 住民の減少
					if rndv = 1 {
						if before_residents > 0 {
							cut_residents = rnd(before_residents+5) - 5
							if cut_residents < 0 {
								residents(sx,sy,sz) = 0										; -5 <= cut_residents < 0の場合、その家の住民全員がマップ外へ出る
							} else {
								residents(sx,sy,sz) = before_residents - (cut_residents + 5)	; その他の場合、cut_residetsに5を足した人数がマップ外へ出る
							}
							age(sx,sy,sz) = ""
							gender(sx,sy,sz) = ""
							if residents(sx,sy,sz) > 0 {
								repeat (before_residents-cut_residents)
									age(sx,sy,sz) += "["+age_in_Residential(cnt)+"]"
									gender(sx,sy,sz) += "["+gender_in_Residential(cnt)+"]"
								loop
							}
						}
					}
		
					if residents(sx,sy,sz) < 0 : residents(sx,sy,sz) = 0
					
					; 総人口数にも反映
					map_Total_Population = map_Total_Population - before_residents + residents(sx,sy,sz)
				}

				; 毎年1月1日に、住民の年齢に1を足す
				if map_Time_Month = 1 and map_Time_Date = 1 and residents(sx,sy,sz) > 0 {
					; 年齢に1を足す
					dim age_in_Residential, residents(sx,sy,sz)
					repeat residents(sx,sy,sz)
						; 120歳を寿命として、drop = 0なら住人一人が死亡
						drop = rnd(121-age_in_Residential(cnt))
							
						if drop = 0 {
							age_in_Residential(cnt) = -1
							map_Total_Population -= 1
						} else {	
							age_in_Residential(cnt) ++
						}
						age(sx,sy,sz) = ""
						repeat residents(sx,sy,sz)
							if age_in_Residential(cnt) >= 0 : age(sx,sy,sz) += "["+age_in_Residential(cnt)+"]"
						loop
					loop
				}

				; 住人の年齢を取得
				sdim age_in_Residential_tmp, 16, residents(sx,sy,sz)
				split age(sx,sy,sz), "]", age_in_Residential_tmp
				dim age_in_Residential, residents(sx,sy,sz)
				repeat residents(sx,sy,sz)
					split age_in_Residential_tmp(cnt), "[", cut, age_in_Residential_tmp(cnt)
					age_in_Residential(cnt) = int(age_in_Residential_tmp(cnt))
				loop

				; 就職先または就学先の決定
				gosub *fix_workplace
				gosub *fix_school
			}

			; 幸福度を更新
			happiness(sx,sy,sz) = (int(((double(land_price(sx,sy,sz))/200)*100)*0.50) - int((double(crime_rate(sx,sy,sz)/50)*0.30)) + int(((double(education_rate(sx,sy,sz))/60)*100)*0.20))

			; 幸福度の平均値を算出するために幸福度を加算
			happiness_tmp += happiness(sx,sy,sz)

			; 男女別人口を算出
			if gender(sx,sy,sz) != "" and residents(sx,sy,sz) > 0 {
				split gender(sx,sy,sz), "]", gender_tmp
	
				repeat residents(sx,sy,sz)
					if instr(gender_tmp(cnt), 0, "m") != -1 {
						gender_M ++
					}
					if instr(gender_tmp(cnt), 0, "f") != -1 {
						gender_F ++
					}
				loop
			}

			; アドオンの表示位置をもう一度確認（毎月1日のみ、タイル色の変更のため）
			if map_time_Date = 1 { from_Build = 1 : gosub *get_addon_drow_position_new }

			; 税金を支出＆徴収するためにそれぞれの建物の総数を取得（毎月1日のみ）
			if map_time_Date = 1 {
				if category(sx,sy,sz,1) = "police_station"  : map_total_Police_Stations ++
				if category(sx,sy,sz,1) = "fire_depertment" : map_total_Fire_Depertments ++
				if category(sx,sy,sz,1) = "post_office"     : map_total_Post_Offices ++
				if category(sx,sy,sz,1) = "education"       : map_total_Education ++

				if category(sx,sy,sz,0) = "residential"     : map_total_Residential ++
				if category(sx,sy,sz,0) = "commercial"      : map_total_Commercial ++
				if category(sx,sy,sz,0) = "office"          : map_total_Office ++
				if category(sx,sy,sz,0) = "industrial"      : map_total_Industrial ++
				if category(sx,sy,sz,0) = "farm"            : map_total_Farm ++
			}
				
		loop
		await 1
	loop

	; 幸福度の平均値を算出
	happiness_ave = happiness_tmp / (mapsize_x*mapsize_y)

	; 支持率を算出
	map_approval_rate = happiness_ave

	; 税金の支出＆徴収（毎月1日のみ）
	if map_time_Date = 1 {
		if map_total_Police_Stations = 0  : take_budget_of_Police = 0          : else : take_budget_of_Police = map_total_Police_Stations * map_budget_of_Police*10
		if map_total_Fire_Depertments = 0 : take_budget_of_Fire_Depertment = 0 : else : take_budget_of_Fire_Depertment = map_total_Fire_Depertments * map_budget_of_Police*10
		if map_total_Post_Offices = 0     : take_budget_of_Post_Office = 0     : else : take_budget_of_Post_Office = map_total_Post_Offices * map_budget_of_Post_Office*10
		if map_total_Education = 0        : take_budget_of_Education = 0       : else : take_budget_of_Education = map_total_Education * map_budget_of_Education*10

		if map_total_Residential = 0 : take_tax_of_Residential = 0 : else : take_tax_of_Residential = map_total_Residential * map_tax_of_Residential
		if map_total_Commercial = 0  : take_tax_of_Commercial = 0  : else : take_tax_of_Commercial = map_total_Commercial * map_tax_of_Commercial
		if map_total_Office = 0      : take_tax_of_Office = 0      : else : take_tax_of_Office = map_total_Office * map_tax_of_Office
		if map_total_Industrial = 0  : take_tax_of_Industrial = 0  : else : take_tax_of_Industrial = map_total_Industrial * map_tax_of_Industrial
		if map_total_Farm = 0        : take_tax_of_Farm = 0        : else : take_tax_of_Farm = map_total_Farm * map_tax_of_Farm

		map_Money -= take_budget_of_Police + take_budget_of_Fire_Depertment + take_budget_of_Post_Office + take_budget_of_Education
		map_Money += take_tax_of_Residential + take_tax_of_Commercial + take_tax_of_Office + take_tax_of_Industrial + take_tax_of_Farm
	}

	; 需要度を増減
	; 総求人数を取得
	before_Vacancies = Vacancies
	Vacancies = (map_total_Commercial_maximum_capacity-map_Total_workers_Commercial) + (map_total_Office_maximum_capacity-map_Total_workers_Office) + (map_total_Industrial_maximum_capacity-map_Total_workers_Industrial) + (map_total_Public_maximum_capacity-map_Total_workers_Public)
				
	; 非労働者（学生含む）数を取得
	before_Vagrants = Vagrants
	map_Total_Vagrants = map_Total_Population - map_Total_workers_Commercial - map_Total_workers_Office - map_Total_workers_Industrial - map_Total_workers_Public
	
	if map_Total_Vagrants < 0 : map_Total_Vagrants = 0
				
	; RCOIF需要メーターを変動
	; Residential（住居）
	if map_Total_Population > 0 {
		map_demand_Residential 	= happiness_ave + (-rnd(20)+10) + Special_map_demand_Residential
	} else {
		map_demand_Residential 	= 100
	}
	if map_demand_Residential < 0 : map_demand_Residential = 1

	; Commercial（商業）
	if map_Total_Commercial_maximum_capacity > 0 {
		map_demand_Commercial 	+= rnd(30) - 10  + Special_map_demand_Commercial
	} else {
		map_demand_Commercial 	= 100
	}
	if map_demand_Commercial < 0 : map_demand_Commercial = 1

	; Office（オフィス）
	if map_Total_Office_maximum_capacity > 0 {
		map_demand_Office 		+= rnd(30) - 10  + Special_map_demand_Office
	} else {
		map_demand_Office 		= 100
	}
	if map_demand_Office < 0 : map_demand_Office = 1

	; Industrial（工業）
	if map_Total_Industrial_maximum_capacity > 0 {
		map_demand_Industrial 	+= rnd(30) - 10  + Special_map_demand_Industrial
	} else {
		map_demand_Industrial 	= 100
	}
	if map_demand_Industrial < 0 : map_demand_Industrial = 1

	; Farm（農業）
	if map_Total_Farm_maximum_capacity > 0 {
		map_demand_Farm 	+= rnd(30) - 10  + Special_map_demand_Farm
	} else {
		map_demand_Farm 	= 100
	}
	if map_demand_Farm < 0 : map_demand_Farm = 1

	return

*processing_get_first
	/*-----------*processingで扱うデータのうち、取得に時間がかかるものを予め取得しておく----------*/
	; 職場
	dim all_workplace_x, next_obj_serial_num
	dim all_workplace_y, next_obj_serial_num
	dim all_workplace_z, next_obj_serial_num
	
	gx = 0 : gy = 0 : gz = 0 : gi = 0
			
	repeat mapsize_x
		gx = cnt
		repeat mapsize_y
			gy = cnt
			if category(gx,gy,gz,0) = "commercial" or category(gx,gy,gz,0) = "office" or category(gx,gy,gz,0) = "industrial" or category(gx,gy,gz,0) = "farm" or category(gx,gy,gz,0) = "public" {
				all_workplace_x(gi) = gx : all_workplace_y(gi) = gy : all_workplace_z(gi) = gz
				gi ++
			}
		loop
	loop
	
	; 学校
	dim all_elementary_schools_x, next_obj_serial_num : dim all_elementary_schools_y, next_obj_serial_num : dim all_elementary_schools_z, next_obj_serial_num
	dim all_junior_high_schools_x, next_obj_serial_num : dim all_junior_high_schools_y, next_obj_serial_num : dim all_junior_high_schools_z, next_obj_serial_num
	dim all_high_schools_x, next_obj_serial_num : dim all_high_schools_y, next_obj_serial_num : dim all_high_schools_z, next_obj_serial_num
	dim all_universities_x, next_obj_serial_num : dim all_universities_y, next_obj_serial_num : dim all_universities_z, next_obj_serial_num
	
	gx = 0 : gy = 0 : gz = 0
	gi_e = 0 : gi_j = 0 : gi_h = 0 : gi_u = 0
			
	repeat mapsize_x
		gx = cnt
		repeat mapsize_y
			gy = cnt
			if category(gx,gy,gz,2) = "elementary-school" {
				all_elementary_schools_x(gi_e) = gx : all_elementary_schools_y(gi_e) = gy : all_elementary_schools_z(gi_e) = gz
				gi_e ++
			}
			if category(gx,gy,gz,2) = "junior-high-school" {
				all_junior_high_schools_x(gi_j) = gx : all_junior_high_schools_y(gi_j) = gy : all_junior_high_schools_z(gi_j) = gz
				gi_j ++
			}
			if category(gx,gy,gz,2) = "high-school" {
				all_high_schools_x(gi_h) = gx : all_high_schools_y(gi_h) = gy : all_high_schools_z(gi_h) = gz
				gi_h ++
				}
			if category(gx,gy,gz,2) = "university" {
				all_universities_x(gi_u) = gx : all_universities_y(gi_u) = gy : all_universities_z(gi_u) = gz
				gi_u ++
			}
		loop
	loop
		
	return

*fix_workplace
	/*------------------------------------住民の職場を決定----------------------------------------*/
	sdim workplace_tmp, 8, residents(sx,sy,sz)
	split workplace(sx,sy,sz), "][", workplace_tmp
	workplace(sx,sy,sz) = ""
	repeat residents(sx,sy,sz)
		if instr(workplace_tmp(cnt), 0, "[") != -1 : split workplace_tmp(cnt), "[", cut, workplace_tmp(cnt)
		if instr(workplace_tmp(cnt), 0, "]") != -1 : split workplace_tmp(cnt), "]", workplace_tmp(cnt), cut
	
		; 労働者が居るのに総労働者数が0の場合（バグ対策）
		if workers_zero = 1 {
			if instr(workplace(sx,sy,sz), 0, "c") != -1 : map_Total_workers_Commercial += 1
			if instr(workplace(sx,sy,sz), 0, "o") != -1 : map_Total_workers_Office += 1
			if instr(workplace(sx,sy,sz), 0, "i") != -1 : map_Total_workers_Industrial += 1
			if instr(workplace(sx,sy,sz), 0, "f") != -1 : map_Total_workers_Farm += 1
			if instr(workplace(sx,sy,sz), 0, "p") != -1 : map_Total_workers_Public += 1
			
			if sx = mapsize_x and sy = mapsize_y and sz = mapsize_z : workers_zero = 0
		}
		
		if workplace_tmp(cnt) = "" and age_in_Residential(cnt) >= 18 and age_in_Residential(cnt) <= 60 {
			; 就職先が決まっておらず、かつ18歳以上60歳以下なら(年齢/10)分の1の確率で就職先を決める
			dr = rnd((age_in_Residential(cnt)/10))
				
			if dr = 0 {
				new_workplace_rnd = rnd(gi-1)	; 職場はランダムに決める
				new_workplace_x = all_workplace_x(new_workplace_rnd)
				new_workplace_y = all_workplace_y(new_workplace_rnd)
				new_workplace_z = all_workplace_z(new_workplace_rnd)

				; 収容人数内に収まる場合は就職を決定する
				if category(new_workplace_x, new_workplace_y, new_workplace_z, 0) = "commercial" {
					if int(sdnl(addon_maximum_capacity, map(new_workplace_x, new_workplace_y, new_workplace_z), 0)) >= workers(new_workplace_x, new_workplace_y, new_workplace_z) + 1 {
						workers(new_workplace_x, new_workplace_y, new_workplace_z) ++
						workplace_tmp(cnt) = "c"+str(obj_serial_num(new_workplace_x, new_workplace_y, new_workplace_z))+""
	
						map_Total_workers_Commercial ++
						map_demand_Commercial --
	
						repeat gi
							if obj_serial_num(all_workplace_x(cnt), all_workplace_y(cnt), all_workplace_z(cnt)) = obj_serial_num(new_workplace_x, new_workplace_y, new_workplace_z) {
								workers(all_workplace_x(cnt), all_workplace_y(cnt), all_workplace_z(cnt)) ++
							}
						loop
					}
				}
				if category(new_workplace_x, new_workplace_y, new_workplace_z, 0) = "office" {
					if int(sdnl(addon_maximum_capacity, map(new_workplace_x, new_workplace_y, new_workplace_z), 0)) >= workers(new_workplace_x, new_workplace_y, new_workplace_z) + 1 {
						workers(new_workplace_x, new_workplace_y, new_workplace_z) ++
						workplace_tmp(cnt) = "o"+str(obj_serial_num(new_workplace_x, new_workplace_y, new_workplace_z))+""
	
						map_Total_workers_Office ++
						map_demand_Office --
	
						repeat gi
							if obj_serial_num(all_workplace_x(cnt), all_workplace_y(cnt), all_workplace_z(cnt)) = obj_serial_num(new_workplace_x, new_workplace_y, new_workplace_z) {
								workers(all_workplace_x(cnt), all_workplace_y(cnt), all_workplace_z(cnt)) ++
							}
						loop 
					}
				}
				if category(new_workplace_x, new_workplace_y, new_workplace_z, 0) = "industrial" {
					if int(sdnl(addon_maximum_capacity, map(new_workplace_x, new_workplace_y, new_workplace_z), 0)) >= workers(new_workplace_x, new_workplace_y, new_workplace_z) + 1 {
						workers(new_workplace_x, new_workplace_y, new_workplace_z) ++
						workplace_tmp(cnt) = "i"+str(obj_serial_num(new_workplace_x, new_workplace_y, new_workplace_z))+""
	
						map_Total_workers_Industrial ++
						map_demand_Industrial --
					}
	
					repeat gi
						if obj_serial_num(all_workplace_x(cnt), all_workplace_y(cnt), all_workplace_z(cnt)) = obj_serial_num(new_workplace_x, new_workplace_y, new_workplace_z) {
							workers(all_workplace_x(cnt), all_workplace_y(cnt), all_workplace_z(cnt)) ++
						}
					loop
				}
				if category(new_workplace_x, new_workplace_y, new_workplace_z, 0) = "farm" {
					if int(sdnl(addon_maximum_capacity, map(new_workplace_x, new_workplace_y, new_workplace_z), 0)) >= workers(new_workplace_x, new_workplace_y, new_workplace_z) + 1 {
						workers(new_workplace_x, new_workplace_y, new_workplace_z) ++
						workplace_tmp(cnt) = "f"+str(obj_serial_num(new_workplace_x, new_workplace_y, new_workplace_z))+""
	
						map_Total_workers_Farm ++
						map_demand_Farm --
	
						repeat gi
							if obj_serial_num(all_workplace_x(cnt), all_workplace_y(cnt), all_workplace_z(cnt)) = obj_serial_num(new_workplace_x, new_workplace_y, new_workplace_z) {
								workers(all_workplace_x(cnt), all_workplace_y(cnt)) ++
							}
						loop
					}
				}
				if category(new_workplace_x, new_workplace_y, new_workplace_z, 0) = "public" {
					if int(sdnl(addon_maximum_capacity, map(new_workplace_x, new_workplace_y, new_workplace_z), 0)) >= workers(new_workplace_x, new_workplace_y, new_workplace_z) + 1 {
						workers(new_workplace_x, new_workplace_y, new_workplace_z) ++
						workplace_tmp(cnt) = "p"+str(obj_serial_num(new_workplace_x, new_workplace_y, new_workplace_z))+""
	
						map_Total_workers_Public ++
						map_demand_Public --
	
						repeat gi
							if obj_serial_num(all_workplace_x(cnt), all_workplace_y(cnt), all_workplace_z(cnt)) = obj_serial_num(new_workplace_x, new_workplace_y, new_workplace_z) {
								workers(all_workplace_x(cnt), all_workplace_y(cnt), all_workplace_z(cnt)) ++
							}
						loop
					}
				}
			}
		}
	
		workplace(sx,sy,sz) += "["+workplace_tmp(cnt)+"]"
	loop
	
	return

*fix_school
	/*------------------------------------住民が通う学校を決定------------------------------------*/
	sdim school_tmp, 8, residents(sx,sy,sz)
	split school(sx,sy,sz), "][", school_tmp
	
	sdim workplace_tmp, 8, residents(sx,sy,sz)
	split workplace(sx,sy,sz), "][", workplace_tmp
	
	school(sx,sy,sz) = ""
	repeat residents(sx,sy,sz)
		if instr(school_tmp(cnt), 0, "[") != -1 : split school_tmp(cnt), "[", cut, school_tmp(cnt)
		if instr(school_tmp(cnt), 0, "]") != -1 : split school_tmp(cnt), "]", school_tmp(cnt), cut
		
		if instr(workplace_tmp(cnt), 0, "[") != -1 : split workplace_tmp(cnt), "[", cut, workplace_tmp(cnt)
		if instr(workplace_tmp(cnt), 0, "]") != -1 : split workplace_tmp(cnt), "]", workplace_tmp(cnt), cut
		
		; 就学先を年齢別で決める
		if school_tmp(cnt) = "" {
			; 小学校（6〜12歳）
			if age_in_Residential(cnt) >= 6 and age_in_Residential(cnt) <= 12 and gi_e >= 1 {
				new_school_rnd = rnd(gi_e-1)	; 学校はランダムに決める
				new_school_x = all_elementary_schools_x(new_school_rnd)
				new_school_y = all_elementary_schools_y(new_school_rnd)
				new_school_z = all_elementary_schools_z(new_school_rnd)
	
				if int(sdnl(addon_maximum_capacity, map(new_school_x, new_school_y, new_school_z), 0)) >= students(new_school_x, new_school_y, new_school_z) + 1 {
					school_tmp(cnt) = "e"+str(obj_serial_num(new_school_x, new_school_y, new_school_z))+""
					students(new_school_x, new_school_y, new_school_z) += 1
	
					; １つで2マス以上の学校の場合、学校内で同じ生徒数にする
					repeat gi_e
						if obj_serial_num(all_elementary_schools_x(cnt), all_elementary_schools_y(cnt), all_elementary_schools_z(cnt)) = obj_serial_num(new_school_x, new_school_y, new_school_z) {
							students(all_elementary_schools_x(cnt), all_elementary_schools_y(cnt), all_elementrary_schools_z(cnt)) = students(new_school_x, new_school_y, new_school_z)
						}
					loop
				}
			}
			//中学校（13〜15歳）
			if age_in_Residential(cnt) >= 13 and age_in_Residential(cnt) <= 15 and gi_j >= 1 {
				new_school_rnd = rnd(gi_j-1)	; 学校はランダムに決める
				new_school_x = all_junior_high_schools_x(new_school_rnd)
				new_school_y = all_junior_high_schools_y(new_school_rnd)
				new_school_z = all_junior_high_schools_z(new_school_rnd)
	
				if int(sdnl(addon_maximum_capacity, map(new_school_x, new_school_y, new_school_z), 0)) >= students(new_school_x, new_school_y, new_school_z) + 1 {
					school_tmp(cnt) = "j"+str(obj_serial_num(new_school_x, new_school_y, new_school_z))+""
					students(new_school_x, new_school_y, new_school_z) += 1
	
					//１つで2マス以上の学校の場合、学校内で同じ生徒数にする
					repeat gi_j
						if obj_serial_num(all_junior_high_schools_x(cnt), all_junior_high_schools_y(cnt), all_junior_high_schools_z(cnt)) = obj_serial_num(new_school_x, new_school_y, new_school_z) {
							students(all_junior_high_schools_x(cnt), all_junior_high_schools_y(cnt), all_junior_high_schools_z(cnt)) = students(new_school_x, new_school_y, new_school_z)
						}
					loop
				}
			}
		}
		if school_tmp(cnt) = "" and workplace_tmp(cnt) = "" and age_in_Residential(cnt) >= 16 and age_in_Residential(cnt) <= 50 {
			//高校（16〜18歳）
			dr_h = rnd(3)	; 高校は 1/3の確率で入る
	
			if dr_h = 0 and age_in_Residential(cnt) >= 16 and age_in_Residential(cnt) <= 18 and gi_h >= 1 {
				new_school_rnd = rnd(gi_h-1)	; 学校はランダムに決める
				new_school_x = all_high_schools_x(new_school_rnd)
				new_school_y = all_high_schools_y(new_school_rnd)
				new_school_z = all_high_schools_z(new_school_rnd)
	
				if int(sdnl(addon_maximum_capacity, map(new_school_x, new_school_y, new_school_z), 0)) >= students(new_school_x, new_school_y, new_school_z) + 1 {
					school_tmp(cnt) = "h"+str(obj_serial_num(new_school_x, new_school_y, new_school_z))+""
					students(new_school_x, new_school_y, new_school_z) += 1
	
					//１つで2マス以上の学校の場合、学校内で同じ生徒数にする
					repeat gi_h
						if obj_serial_num(all_high_schools_x(cnt), all_high_schools_y(cnt), all_high_schools_z(cnt)) = obj_serial_num(new_school_x, new_school_y, new_school_z) {
							students(all_high_schools_x(cnt), all_high_schools_y(cnt), all_high_schools_z(cnt)) = students(new_school_x, new_school_y, new_school_z)
						}
					loop
				}
			}
	
			//大学（19〜50歳）
			dr_u = rnd(age_in_Residential(cnt))	; 大学は1/年齢の確率で入る
			
			if dr_u = 0 and age_in_Residential(cnt) >= 19 and age_in_Residential(cnt) <= 50 and gi_u >= 1 {
				new_school_rnd = rnd(gi_u-1)	; 学校はランダムに決める
				new_school_x = all_universities_x(new_school_rnd)
				new_school_y = all_universities_y(new_school_rnd)
				new_school_z = all_universities_z(new_school_rnd)
	
				if int(sdnl(addon_maximum_capacity, map(new_school_x, new_school_y, new_school_z), 0)) >= students(new_school_x, new_school_y, new_school_z) + 1 {
					school_tmp(cnt) = "u"+str(obj_serial_num(new_school_x, new_school_y, new_school_z))+""
					students(new_school_x, new_school_y, new_school_z) += 1
	
					//１つで2マス以上の学校の場合、学校内で同じ生徒数にする
					repeat gi_j
						if obj_serial_num(all_universities_x(cnt), all_universities_y(cnt), all_universities_z(cnt)) = obj_serial_num(new_school_x, new_school_y, new_school_z) {
							students(all_universities_x(cnt), all_universities_y(cnt), all_universities_z(cnt)) = students(new_school_x, new_school_y, new_school_z)
						}
					loop
				}
			}
		}
	
		school(sx,sy,sz) += "["+school_tmp(cnt)+"]"
	loop
		
	return
		

*information_panel
	/*------------------------------------情報パネル----------------------------------------------*/
	screen 1, 400, 300
	gsel 1, 2 : title "情報パネル"
	
	color 128, 128, 128 : boxf
	
	mci "stop Cities-Box"
	mci "set Cities-Box_2 time format milliseconds"
	
	if map_approval_rate > 50 : mci "open \""+directory+"\\bgm\\[Sp]Satie-Jeteveux.mp3\" alias Cities-Box_2" : else : mci "open \""+directory+"\\bgm\\[Sp]Tchikovsky-Serenade-1st.mp3\" alias Cities-Box_2"
	if config_Set_Play_BGM = 1 : mci "play Cities-Box_2"
	
	pos 10, 10 : gmode 2 : gcopy 52, 0, 0, 32, 32
	
	font config_SystemFont, 16 : color 255, 255, 255
	pos 50, 15 : mes "都市の情報"
	
	color 255, 255, 255 : boxf 10, 45, 390, 95
	color 128, 128, 128 : boxf 11, 46, 389, 94
	
	color 255, 255, 255 : font config_SystemFont, 14
	pos 15, 50  : mes "都市名 "+map_city_name+"\n市長　 "+map_mayor_name+""
	pos 200, 50 : mes "資金　 § "+map_Money+"\n支持率 "+map_approval_rate+"%"
	
	color 255, 255, 255 : boxf 10, 100, 390, 200
	color 128, 128, 128 : boxf 11, 101, 389, 199
	
	color 255, 255, 255 : font config_SystemFont, 14
	pos 15, 105  : mes "商業地区の労働者数 　　"+map_Total_workers_Commercial+"人\nオフィス地区の労働者数　　"+map_Total_workers_Office+"人\n工業地区の労働者数 　　"+map_Total_workers_Industrial+"人\n農業地区の労働者数　　"+map_Total_workers_Farm+"人\n公務員の労働者数　　　"+map_Total_workers_Public+"人"
	//pos 230, 105  : mes "非労働者数 　　"+map_Total_Vagrants+"人"
	
	color 255, 255, 255 : boxf 10, 205, 390, 245
	color 128, 128, 128 : boxf 11, 206, 389, 244
	
	color 255, 255, 255 : font config_SystemFont, 14
	pos 15, 210 : mes "人口 "+map_Total_Population+"人"
	pos 200, 210 : mes "男性人口 "+map_gender_M+"人\n女性人口 "+map_gender_F+"人"
	
	stop

*budget_panel
	/*------------------------------------予算パネル----------------------------------------------*/
	screen 1, 300, 380
	gsel 1, 2 : title "予算パネル"
	
	color 128, 128, 128 : boxf
	
	mci "stop Cities-Box"
	mci "set Cities-Box_2 time format milliseconds"
	
	if map_Money > 0 : mci"open \""+directory+"\\bgm\\[Sp]Satie-Jeteveux.mp3\" alias Cities-Box_2" : else : mci"open \""+directory+"\\bgm\\[Sp]Tchikovsky-Serenade-1st.mp3\" alias Cities-Box_2"
	if config_Set_Play_BGM = 1 : mci "play Cities-Box_2"
	
	objsize 50, 20
	font config_SystemFont, 14 : color 255, 255, 255
	
	; 支出率
	pos 200, 70  : input map_budget_of_Police : input_stat__map_budget_of_Police = stat
	pos 280, 70  : mes "%"	
	pos 200, 90  : input map_budget_of_Fire_Depertment : input_stat__map_budget_of_Fire_Depertment = stat
	pos 280, 90  : mes "%"
	pos 200, 110 : input map_budget_of_Post_Office : input_stat__map_budget_of_Post_Office = stat
	pos 280, 110 : mes "%"
	pos 200, 130 : input map_budget_of_Education : input_stat__map_budget_of_Education = stat
	pos 280, 130 : mes "%"
	
	; 税率
	pos 200, 190 : input map_tax_of_Residential : input_stat__map_tax_of_Residential = stat
	pos 290, 190 : mes "%"
	pos 200, 210 : input map_tax_of_Commercial : input_stat__map_tax_of_Commercial = stat
	pos 290, 210 : mes "%"
	pos 200, 230 : input map_tax_of_Office : input_stat__map_tax_of_Office = stat
	pos 290, 230 : mes "%"
	pos 200, 250 : input map_tax_of_Industrial : input_stat__map_tax_of_Industrial = stat
	pos 290, 250 : mes "%"
	pos 200, 280 : input map_tax_of_Farm : input_stat__map_tax_of_Farm = stat
	pos 290, 280 : mes "%"
	
	objsize 50, 20
	pos 240, 350 : button "OK", *fix_budget
	
	repeat
		redraw 0
	
		color 128, 128, 128 : boxf
	
		font config_SystemFont, 16 : color 255, 255, 255
		pos 10, 10 : mes "今月の予算"
	
		; 支出率のパーセンテージを上限・下限に合わせる
		if map_budget_of_Police < 0 { map_budget_of_Police = 0 : objprm input_stat__map_budget_of_Police, map_budget_of_Police }
		if map_budget_of_Fire_Depertment < 0 { map_budget_of_Fire_Depertment = 0 : objprm input_stat__map_budget_of_Fire_Depertment, map_budget_of_Fire_Depertment }
		if map_budget_of_Post_Office < 0 { map_budget_of_Post_Office = 0 : objprm input_stat__map_budget_of_Post_Office, map_budget_of_Post_Office }
		if map_budget_of_Education < 0 { map_budget_of_Education = 0 : objprm input_stat__map_budget_of_Education, map_budget_of_Education }
	
		; 税率のパーセンテージを上限・下限に合わせる
		if map_tax_of_Residential < 0 { map_tax_of_Residential = 0 : objprm input_stat__map_tax_of_Residential, map_tax_of_Residential }
		if map_tax_of_Commercial < 0 { map_tax_of_Commercial = 0 : objprm input_stat__map_tax_of_Commercial, map_tax_of_Commercial }
		if map_tax_of_Office < 0 { map_tax_of_Office = 0 : objprm input_stat__map_tax_of_Office, map_tax_of_Office }
		if map_tax_of_Industrial < 0 { map_tax_of_Industrial = 0 : objprm input_stat__map_tax_of_Industrial, map_tax_of_Industrial }
		if map_tax_of_Farm < 0 { map_tax_of_Farm = 0 : objprm input_stat__map_tax_of_Farm, map_tax_of_Farm }
	
		; 支出の具体的な金額を算出
		if map_total_Police_Stations = 0  : take_map_budget_of_Police = 0          : else : take_map_budget_of_Police = map_total_Police_Stations * map_budget_of_Police * 10
		if map_total_Fire_Depertments = 0 : take_map_budget_of_Fire_Depertment = 0 : else : take_map_budget_of_Fire_Depertment = map_total_Fire_Depertments * map_budget_of_Fire_Depertment * 10
		if map_total_Post_Offices = 0     : take_map_budget_of_Post_Office = 0     : else : take_map_budget_of_Post_Office = map_total_Post_Offices * map_budget_of_Post_Office * 10
		if map_total_Education = 0        : take_map_budget_of_Education = 0       : else : take_map_budget_of_Education = map_total_Education * map_budget_of_Education * 10
	
		; 収入の具体的な金額を算出
		if map_total_Residential = 0 : take_map_tax_of_Residential = 0 : else : take_map_tax_of_Residential = map_total_Residential * map_tax_of_Residential
		if map_total_Commercial = 0  : take_map_tax_of_Commercial = 0  : else : take_map_tax_of_Commercial = map_total_Commercial * map_tax_of_Commercial
		if map_total_Office = 0      : take_map_tax_of_Office = 0      : else : take_map_tax_of_Office = map_total_Office * map_tax_of_Office
		if map_total_Industrial = 0  : take_map_tax_of_Industrial = 0  : else : take_map_tax_of_Industrial = map_total_Industrial * map_tax_of_Industrial
		if map_total_Farm = 0        : take_map_tax_of_Farm = 0        : else : take_map_tax_of_Farm = map_total_Farm * map_tax_of_Farm
	
		font config_SystemFont, 14
		
		color 255, 127, 39
		pos 10, 30 : mes "繰越金 §"+map_Money+""
	
		color 255, 255, 255
	
		pos 8, 50  : mes "支出"
		pos 10, 70  : mes "警察署　 　　§-"+take_map_budget_of_Police+""
		pos 10, 90  : mes "消防署　　　 §-"+take_map_budget_of_Fire_Depertment+""
		pos 10, 110  : mes "郵便事業 　　§-"+take_map_budget_of_Post_Office+""
		pos 10, 130 : mes "教育事業　　 §-"+take_map_budget_of_Education+""
	
		pos 8, 170  : mes "収入"
		pos 10, 190 : mes "住居地区　　 §+"+take_map_tax_of_Residential+""
		pos 10, 210 : mes "商業地区　　 §+"+take_map_tax_of_Commercial+""
		pos 10, 230 : mes "オフィス地区 　§+"+take_map_tax_of_Office+""
		pos 10, 250 : mes "工業地区 　　§+"+take_map_tax_of_Industrial+""
		pos 10, 270 : mes "農業地区 　　§+"+take_map_tax_of_Farm+""
	
		repeat 4
			pos 250, 70+(cnt*20)  : mes "%"
		loop
	
		repeat 4
			pos 250, 190+(cnt*20) : mes "%"
		loop
	
		expenses = take_map_budget_of_Police + take_map_budget_of_Fire_Depertment + take_map_budget_of_Post_Office + take_map_budget_of_Education
		color 255, 0, 0
		pos 10, 290 : mes "今月の支出　 §-"+expenses+""
	
		income = take_map_tax_of_Residential + take_map_tax_of_Commercial + take_map_tax_of_Office + take_map_tax_of_Industrial + take_map_tax_of_Farm
		color 0, 255, 0
		pos 10, 310 : mes "今月の収入　 §+"+income+""
	
		color 0, 162, 232
		pos 10, 330 : mes "月末の資金　 §"+(map_Money - expenses + income)+""
	
		redraw 1
		wait 10
	loop
	
	stop

*fix_budget
	gsel ginfo_act, -1
	
	if Set_Play_BGM = 1 {
		mci "stop Cities-Box_2"
		mci "play Cities-Box"
	}
	
	gsel 0
	goto *main

*setting
	/*-------------------------------------マップデータの設定画面---------------------------------*/
	screen 1, 300, 400
	gsel 1 : title "マップ設定"
	*setting_2
	onclick *setting_onclick
	
	color 95, 95, 95 : boxf
	
	color 255, 255, 255
	font config_SystemFont, 16
	
	; 都市名(map_City_Name)
	pos 10, 10 : mes "都市名"
	objsize 210, 20
	pos 80, 10 : input map_City_Name
	
	; 市長名(map_Mayor_Name)
	pos 10, 40 : mes "市長名"
	objsize 210, 20
	pos 80, 40 : input map_Mayor_Name
	
	; 天候の変化(map_Set_Change_Weather)
	if map_Set_Change_Weather = 0 {
		pos 10, 73 : gcopy 14, 0, 0, 16, 16
	} else {
		pos 10, 73 : gcopy 14, 0, 16, 16, 16
	}
	pos 35, 70 : mes "天候の変化"
	
	; 夜間は暗くする(map_Set_Dark_on_Night)
	if map_Set_Dark_on_Night = 0 {
		pos 10, 103 : gcopy 14, 0, 0, 16, 16
	} else {
		pos 10, 103 : gcopy 14, 0, 16, 16, 16
	}
	pos 35, 100 : mes "夜間は暗くする"
	
	; BGMの再生の有無(config_Set_Play_BGM)
	if config_Set_Play_BGM = 0 {
		pos 10, 133 : gcopy 14, 0, 0, 16, 16
	} else {
		pos 10, 133 : gcopy 14, 0, 16, 16, 16
	}
	pos 35, 130 : mes "BGMの再生"
	
	; フォント(config_SystemFont)
	pos 10, 160 : mes "フォント"
	objsize 194, 20
	pos 80, 160 : input config_SystemFont
	
	gmode 2 : pos 274, 160 : gcopy 16, 0, 0, 16, 16
		
	stop

*setting_onclick
	gsel 1
	
	; 天候の変化(map_Set_Change_Weather)
	if click_range(10, 73, 10+16, 73+16) = 1 {
		if map_Set_Change_Weather = 0 {
			map_Set_Change_Weather = 1
		} else {
			map_Set_Change_Weather = 0
		}
	}
	
	; 夜間は暗くする(map_Set_Dark_on_Night)
	if click_range(10, 103, 10+16, 103+16) = 1 {
		if map_Set_Dark_on_Night = 0 {
			map_Set_Dark_on_Night = 1
		} else {
			map_Set_Dark_on_Night = 0
		}
	}
	
	; BGMの再生の有無(config_Set_Play_BGM)
	if click_range(10, 133, 10+16, 133+16) = 1 {
		if config_Set_Play_BGM = 0 {
			config_Set_Play_BGM = 1
		} else {
			config_Set_Play_BGM = 0
		}
	}
	
	; フォント(SystemFont)
	; 参照ボタン
		if click_range(274, 160, 274+16, 160+16) = 1 : gosub *refer_fonts

	goto *setting_2

*refer_fonts
	#uselib "comdlg32.dll"
	#func ChooseFont "ChooseFontA" int
	
	mref bmscr, 67
	dim chfont,16
	dim logfont,16
	sdim setting_SystemFont,32
	
	chfont.0 = 60 
	chfont.1 = bmscr.13
	chfont.3=varptr(logfont)
	chfont.5 = 0x01000141
	
	pm=varptr(chfont)
	ChooseFont pm
	
	if stat = 0 {
		return
	}
	
	style=0
	if (chfont.12 & 0x0100):style=style+1
	if (chfont.12 & 0x0200):style=style+2 
	if (logfont.5 & 0x0000FF00):style=style+4 
	if (logfont.5 & 0x00FF0000):style=style+8
	size=chfont.4/10
	memcpy config_SystemFont,logfont,32,0,28

	if from_menu_setting = 1 : goto *menu_setting_2
	
	return

*save
	/*------------------------------------マップデータの保存--------------------------------------*/
	save_mapdata = ""
	
	; 誤反応防止
	if click_range(0, 0, windowx, windowy) = 1 and click_range(windowx-54, windowy-40-titlebar_h, windowx, windowy) = 0 : return
	
	; 保存先ファイルの選択
	dialog "cbd", 17, "Cities Box マップデータ"
			
	save_mapdata_name = refstr
	if instr(save_mapdata_name, 0, ".cbd") = -1 : save_mapdata_name = ""+save_mapdata_name+".cbd"
			
	if stat = 0 : return
	
	; 保存中表示
	color : sboxf 128, 0, 0, windowx, windowy
	color 255, 255, 255 : font config_SystemFont, 26
	cmes "保存中...", 0, (windowy/2)-18, windowx, (windowy/2)+18
	
	; マップ保存
	title "保存中..."

	save_name = "name(x,y) {\n"
	save_name2 = "name2(x,y) {\n"
	save_category = "category(x,y) {\n"
	save_category_2 = "category_2(x,y) {\n"
	save_category_3 = "category_3(x,y) {\n"
	save_obj_type = "obj_type(x,y) {\n"
	save_obj_type2 = "obj_type2(x,y) {\n"
	save_obj_dire = "obj_dire(x,y) {\n"
	save_obj_dire2 = "obj_dire2(x,y) {\n"
	save_obj_serial_num = "obj_serial_num(x,y) {\n"
	save_obj_use_tiles_x = "obj_use_tiles_x(x,y) {\n"
	save_obj_use_tiles_y = "obj_use_tiles_y(x,y) {\n"
	save_obj_tiles_x = "obj_tiles_x(x,y) {\n"
	save_obj_tiles_y = "obj_tiles_y(x,y) {\n"
	save_residents = "residents(x,y) {\n"
	save_workers_Commercial = "workers_Commercial(x,y) {\n"
	save_workers_Office = "workers_Office(x,y) {\n"
	save_workers_Industrial = "workers_Industrial(x,y) {\n"
	save_workers_Farm = "workers_Farm(x,y) {\n"
	save_workers_Public = "workers_Public(x,y) {\n"
	save_studets = "students(x,y) {\n"
	save_land_price = "land_price(x,y) {\n"
	save_crime_rate = "crime_rate(x,y) {\n"
	save_education_rate = "education_rate(x,y) {\n"
	save_happiness = "happiness(x,y) {\n"
	save_crop = "crop(x,y) {\n"
	save_crop_amount = "crop_amount(x,y) {\n"
	save_age = "age(x,y) {\n"
	save_gender = "gender(x,y) {\n"
	save_workplace = "workplace(x,y) {\n"
	save_school = "school(x,y) {\n"
	save_reservation = "reservation(x,y) {\n"
	save_original_name = "original_name(x,y) {\n"

	sz = 0
	repeat mapsize_x
		sy = cnt
		repeat mapsize_y
			sx = cnt

			if sx != mapsize_x-1 : comma = ", " : else : comma = "\n"

			save_name            += name(sx,sy,sz,0)+comma
			save_name2           += name(sx,sy,sz,1)+comma
			save_category        += category(sx,sy,sz,0)+comma
			save_category_2      += category(sx,sy,sz,1)+comma
			save_category_3      += category(sx,sy,sz,2)+comma
			save_obj_type        += strf("%03d", obj_type(sx,sy,sz,0))+comma
			save_obj_type2       += strf("%03d", obj_type(sx,sy,sz,1))+comma
			save_obj_dire        += strf("%03d", obj_dire(sx,sy,sz,0))+comma
			save_obj_dire2       += strf("%03d", obj_dire(sx,sy,sz,1))+comma
			save_obj_serial_num  += strf("%04d", obj_serial_num(sx,sy,sz))+comma
			save_obj_use_tiles_x += strf("%03d", obj_use_tiles(sx,sy,sz,0))+comma
			save_obj_use_tiles_y += strf("%03d", obj_use_tiles(sx,sy,sz,1))+comma
			save_obj_tiles_x     += strf("%03d", obj_tiles(sx,sy,sz,0))+comma
			save_obj_tiles_y     += strf("%03d", obj_tiles(sx,sy,sz,1))+comma
			save_residents       += strf("%03d", residents(sx,sy,sz))+comma
			if category(sx,sy,sz,0) = "commercial" : save_workers_Commercial += strf("%03d", workers(sx,sy,sz))+comma : else : save_workers_Commercial += "000"+comma
			if category(sx,sy,sz,0) = "office"     : save_workers_Office     += strf("%03d", workers(sx,sy,sz))+comma : else : save_workers_Office     += "000"+comma
			if category(sx,sy,sz,0) = "industrial" : save_workers_Industrial += strf("%03d", workers(sx,sy,sz))+comma : else : save_workers_Industrial += "000"+comma
			if category(sx,sy,sz,0) = "farm"       : save_workers_Farm       += strf("%03d", workers(sx,sy,sz))+comma : else : save_workers_Farm       += "000"+comma
			if category(sx,sy,sz,0) = "public"     : save_workers_Public     += strf("%03d", workers(sx,sy,sz))+comma : else : save_workers_Public     += "000"+comma
			save_studets         += strf("%03d", students(sx,sy,sz))+comma
			save_land_price      += strf("%03d", land_price(sx,sy,sz))+comma
			save_crime_rate      += strf("%03d", crime_rate(sx,sy,sz))+comma
			save_education_rate  += strf("%03d", education_rate(sx,sy,sz))+comma
			save_happiness       += strf("%03d", happiness(sx,sy,sz))+comma
			save_crop            += crop(sx,sy,sz)+comma
			save_crop_amount     += strf("%03d", crop_amount(sx,sy,sz))+comma
			save_age             += age(sx,sy,sz)+comma
			save_gender          += gender(sx,sy,sz)+comma
			save_workplace       += workplace(sx,sy,sz)+comma
			save_school          += school(sx,sy,sz)+comma
			save_reservation     += reservation(sx,sy,sz)+comma
			save_original_name   += original_name(sx,sy,sz)+comma
		loop
	loop
		
	notesel save_mapdata
	
	; 保存したCities Boxのバージョン（リリースナンバー）
		noteadd "Version = "+about_release_number+";", -1
		noteadd " ", -1
		
	; 次に各マップデータ(*.cbx)の設定を保存
		noteadd "City_Name = \""+map_City_Name+"\";", -1
		noteadd "Mayor_Name = \""+map_Mayor_Name+"\";", -1
		noteadd "Total_Population = "+map_Total_Population+";", -1
		noteadd "Set_Change_Weather = "+map_Set_Change_Weather+";", -1
		noteadd "Temperature = "+map_temperature+";", -1
		noteadd "Set_Dark_on_Night = "+map_Set_Dark_on_Night+";", -1
		noteadd " ", -1
	
	; マップサイズ
		noteadd "mapsize_x = "+mapsize_x+";", -1
		noteadd "mapsize_y = "+mapsize_y+";", -1
		noteadd " ", -1
	
	; 日時
		noteadd "time_Year = "+map_time_Year+";", -1
		noteadd "time_Month = "+map_time_Month+";", -1
		noteadd "time_Date = "+map_time_Date+";", -1
		noteadd "time_Hour = "+map_time_Hour+";", -1
		noteadd "time_Minutes = "+map_time_Minutes+";", -1
		noteadd " ", -1
	
	; 需要度
		noteadd "demand_Residential = "+map_demand_Residential+";", -1
		noteadd "demand_Commercial = "+map_demand_Commercial+";", -1
		noteadd "demand_Office = "+map_demand_Office+";", -1
		noteadd "demand_Industrial = "+map_demand_Industrial+";", -1
		noteadd "demand_Farm = "+map_demand_Farm+";", -1
	
	; 資金
		noteadd "Money = "+map_Money+";", -1
		noteadd " ", -1
	
	; 予算
		noteadd "budget_of_Police = "+map_budget_of_Police+";", -1
		noteadd "budget_of_Fire_Depertment = "+map_budget_of_Fire_Depertment+";", -1
		noteadd "budget_of_Post_Office = "+map_budget_of_Post_Office+";", -1
		noteadd "budget_of_Education = "+map_budget_of_Education+";", -1
	
		noteadd "tax_of_Residential = "+map_tax_of_Residential+";", -1
		noteadd "tax_of_Commercial = "+map_tax_of_Commercial+";", -1
		noteadd "tax_of_Office = "+map_tax_of_Office+";", -1
		noteadd "tax_of_Industrial = "+map_tax_of_Industrial+";", -1
		noteadd "tax_of_Farm = "+map_tax_of_Farm+";", -1
		
		noteadd " ", -1
		noteadd " \n", -1

	; 配列データの保存
	save_mapdata += save_name+"}\n"
	save_mapdata += save_name2+"}\n"
	save_mapdata += save_category+"}\n"
	save_mapdata += save_category_2+"}\n"
	save_mapdata += save_category_3+"}\n"
	save_mapdata += save_obj_type+"}\n"
	save_mapdata += save_obj_type2+"}\n"
	save_mapdata += save_obj_dire+"}\n"
	save_mapdata += save_obj_dire2+"}\n"
	save_mapdata += save_obj_serial_num+"}\n"
	save_mapdata += save_obj_use_tiles_x+"}\n"
	save_mapdata += save_obj_use_tiles_y+"}\n"
	save_mapdata += save_obj_tiles_x+"}\n"
	save_mapdata += save_obj_tiles_y+"}\n"
	save_mapdata += save_residents+"}\n"
	save_mapdata += save_workers_Commercial+"}\n"
	save_mapdata += save_workers_Office+"}\n"
	save_mapdata += save_workers_Industrial+"}\n"
	save_mapdata += save_workers_Farm+"}\n"
	save_mapdata += save_workers_Public+"}\n"
	save_mapdata += save_studets+"}\n"
	save_mapdata += save_land_price+"}\n"
	save_mapdata += save_crime_rate+"}\n"
	save_mapdata += save_education_rate+"}\n"
	save_mapdata += save_happiness+"}\n"
	save_mapdata += save_crop+"}\n"
	save_mapdata += save_crop_amount+"}\n"
	save_mapdata += save_age+"}\n"
	save_mapdata += save_gender+"}\n"
	save_mapdata += save_workplace+"}\n"
	save_mapdata += save_school+"}\n"
	save_mapdata += save_reservation+"}\n"
	save_mapdata += save_original_name+"}\n"
	
	; 保存
	notesel save_mapdata
	notesave save_mapdata_name
			
	title about_title
	
	return

*update
	/*----------------------------------アップデーターダウンロード＆起動--------------------------*/
	color 0, 0, 0
	sboxf 128, 0, 0, windowx, windowy
		
	font config_SystemFont, 14
	color 255, 255, 255 : cmes "アップデータをダウンロード中です\nしばらくお待ち下さい...", 0, windowy/2-20, windowx, windowy/2+20

	if normalUpdate = 1 {
		latest_version__Updater = get_chapter(latest_version, "Updater", " : ", ";")
		latest_version__Updater_Name = get_chapter(latest_version, "Updater_Name", " : ", ";")
	
		download latest_version__Updater, latest_version__Updater_Name, latest_version__Updater_Name
	
		exist latest_version__Updater_Name
		exe = latest_version__Updater_Name
	} else : if devUpdate = 1 {
		Dev_latest_version__Updater = get_chapter(Dev_latest_version, "Updater", " : ", ";")
		Dev_latest_version__Updater_Name = get_chapter(Dev_latest_version, "Updater_Name", " : ", ";")
	
		download Dev_latest_version__Updater, Dev_latest_version__Updater_Name, Dev_latest_version__Updater_Name

		exist Dev_latest_version__Updater_Name
		exe = Dev_latest_version__Updater_Name
	}
	
	if strsize = -1 : error "S07 : アップデートに失敗しました\nアップデータ "+exe+"のダウンロードが完了しませんでした。"
		
	if normalUpdate = 1 {
		exec latest_version__Updater_Name
	} else {
		exec Dev_latest_version__Updater_Name
	}
	end

*exit
	if ginfo_act = 0 {
		gsel 0
		end
		
	} else {
		gsel ginfo_act, -1
		
		gsel 0
	
		mci "close Cities-Box_2"
		mci "play Cities-Box"

		; 設定を保存
		chdir directory
	
		config = ""
		
		notesel config
		noteadd "SystemFont = \""+config_SystemFont+"\"", -1
		noteadd "Set_Play_BGM = "+config_Set_Play_BGM+";", -1
		noteadd "Ignore_Update = "+config_Ignore_Update+";", -1
		noteadd "Get_Dev_Version = "+config_Get_Dev_Version+";", -1
		noteadd "OS = \""+config_OS+"\";", -1
		noteadd "Adjustment_Interval = "+config_Adjustment_Interval+";", -1
		noteadd "Drow_Interval = "+config_Drow_Interval+";", -1
		noteadd "Config_WindowSize_X = "+Config_WindowSize_X+";", -1
		noteadd "Config_WindowSize_Y = "+Config_WindowSize_Y+";", -1
		noteadd "Pacriman_Mode = "+config_Pacriman_Mode+";", -1
		notesave "data/config.dat"

		from_menu_setting = 0
		
		if return_from_exit = "menu" : goto *menu
		if return_from_exit = "main" : goto *main

		stop
	}